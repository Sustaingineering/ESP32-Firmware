
c:/Users/tarek/Sustaingineering/Particle-Experiment/target/2.0.0-rc.1/electron/Particle-Experiment.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  08080000  08080000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  08080018  08080018  00010018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00001714  0808001c  0808001c  0001001c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000004  40024000  08081730  00014000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         00000068  20000000  08081734  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          000004f8  20000068  20000068  00030068  2**2
                  ALLOC
  6 .module_info_suffix 00000028  0808179c  0808179c  0002179c  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .module_info_crc 00000004  080817c4  080817c4  000217c4  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   000eb693  00000000  00000000  000217c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00011a79  00000000  00000000  0010ce5b  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00015221  00000000  00000000  0011e8d4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00001b48  00000000  00000000  00133af5  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000046b0  00000000  00000000  0013563d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00025f50  00000000  00000000  00139ced  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   000261e4  00000000  00000000  0015fc3d  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    000b4029  00000000  00000000  00185e21  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  00004344  00000000  00000000  00239e4c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0808001c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 808001c:	4809      	ldr	r0, [pc, #36]	; (8080044 <link_dynalib_end+0x28>)
 808001e:	490a      	ldr	r1, [pc, #40]	; (8080048 <link_dynalib_end+0x2c>)
void* module_user_pre_init() {
 8080020:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 8080022:	4288      	cmp	r0, r1
 8080024:	d005      	beq.n	8080032 <module_user_pre_init+0x16>
 8080026:	4a09      	ldr	r2, [pc, #36]	; (808004c <link_dynalib_end+0x30>)
 8080028:	4282      	cmp	r2, r0
 808002a:	d002      	beq.n	8080032 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
 808002c:	1a12      	subs	r2, r2, r0
 808002e:	f001 fa4d 	bl	80814cc <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
 8080032:	4807      	ldr	r0, [pc, #28]	; (8080050 <link_dynalib_end+0x34>)
 8080034:	4a07      	ldr	r2, [pc, #28]	; (8080054 <link_dynalib_end+0x38>)
 8080036:	2100      	movs	r1, #0
 8080038:	1a12      	subs	r2, r2, r0
 808003a:	f001 fa55 	bl	80814e8 <memset>
    return &link_heap_start;
}
 808003e:	4806      	ldr	r0, [pc, #24]	; (8080058 <link_dynalib_end+0x3c>)
 8080040:	bd08      	pop	{r3, pc}
 8080042:	bf00      	nop
 8080044:	20000000 	.word	0x20000000
 8080048:	08081734 	.word	0x08081734
 808004c:	20000068 	.word	0x20000068
 8080050:	20000068 	.word	0x20000068
 8080054:	20000560 	.word	0x20000560
 8080058:	20000560 	.word	0x20000560

0808005c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
 808005c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
 808005e:	f000 fbbf 	bl	80807e0 <module_user_init_hook>

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 8080062:	2500      	movs	r5, #0
 8080064:	4e05      	ldr	r6, [pc, #20]	; (808007c <module_user_init+0x20>)
 8080066:	4c06      	ldr	r4, [pc, #24]	; (8080080 <module_user_init+0x24>)
 8080068:	1ba4      	subs	r4, r4, r6
 808006a:	08a4      	lsrs	r4, r4, #2
 808006c:	42a5      	cmp	r5, r4
 808006e:	d100      	bne.n	8080072 <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
 8080070:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
 8080072:	f856 3b04 	ldr.w	r3, [r6], #4
 8080076:	4798      	blx	r3
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 8080078:	3501      	adds	r5, #1
 808007a:	e7f7      	b.n	808006c <module_user_init+0x10>
 808007c:	08081704 	.word	0x08081704
 8080080:	08081724 	.word	0x08081724

08080084 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
 8080084:	f000 b816 	b.w	80800b4 <setup>

08080088 <module_user_loop>:
}

void module_user_loop() {
 8080088:	b508      	push	{r3, lr}
    loop();
 808008a:	f000 f843 	bl	8080114 <loop>
    _post_loop();
}
 808008e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
 8080092:	f000 bb67 	b.w	8080764 <_post_loop>

08080096 <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
 8080096:	f000 ba01 	b.w	808049c <malloc>

0808009a <_Znaj>:
 808009a:	f000 b9ff 	b.w	808049c <malloc>

0808009e <_ZdlPv>:
	return malloc(size);
}

void operator delete(void *p)
{
	free(p);
 808009e:	f000 ba05 	b.w	80804ac <free>

080800a2 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
 80800a2:	7800      	ldrb	r0, [r0, #0]
 80800a4:	fab0 f080 	clz	r0, r0
 80800a8:	0940      	lsrs	r0, r0, #5
 80800aa:	4770      	bx	lr

080800ac <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
 80800ac:	2301      	movs	r3, #1
 80800ae:	7003      	strb	r3, [r0, #0]
 80800b0:	4770      	bx	lr
	...

080800b4 <setup>:
#include <Arduino.h>

#define BUILTIN_LED D7
void setup()
{
 80800b4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  Serial.begin(115200);
 80800b6:	f000 ff1b 	bl	8080ef0 <_Z16_fetch_usbserialv>
 80800ba:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
 80800be:	f000 fefd 	bl	8080ebc <_ZN9USBSerial5beginEl>
  pinMode(BUILTIN_LED, OUTPUT);
 80800c2:	2101      	movs	r1, #1
 80800c4:	2007      	movs	r0, #7
 80800c6:	f001 f95f 	bl	8081388 <pinMode>
inline particle::Flags<TagT, ValueT>::Flags(Flag<TagT, ValueT> flag) :
        val_(flag.value()) {
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags(ValueT val) :
 80800ca:	4b0f      	ldr	r3, [pc, #60]	; (8080108 <setup+0x54>)
        return publish(eventName, eventData, DEFAULT_CLOUD_EVENT_TTL, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, int ttl, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
 80800cc:	4a0f      	ldr	r2, [pc, #60]	; (808010c <setup+0x58>)
 80800ce:	781b      	ldrb	r3, [r3, #0]
 80800d0:	490f      	ldr	r1, [pc, #60]	; (8080110 <setup+0x5c>)
 80800d2:	f88d 3000 	strb.w	r3, [sp]
 80800d6:	a802      	add	r0, sp, #8
 80800d8:	233c      	movs	r3, #60	; 0x3c
 80800da:	f000 fcd9 	bl	8080a90 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
 80800de:	9c03      	ldr	r4, [sp, #12]
 80800e0:	b17c      	cbz	r4, 8080102 <setup+0x4e>
      if (--_M_use_count == 0)
 80800e2:	6863      	ldr	r3, [r4, #4]
 80800e4:	3b01      	subs	r3, #1
 80800e6:	6063      	str	r3, [r4, #4]
 80800e8:	b95b      	cbnz	r3, 8080102 <setup+0x4e>
          _M_dispose();
 80800ea:	6823      	ldr	r3, [r4, #0]
 80800ec:	4620      	mov	r0, r4
 80800ee:	689b      	ldr	r3, [r3, #8]
 80800f0:	4798      	blx	r3
          if (--_M_weak_count == 0)
 80800f2:	68a3      	ldr	r3, [r4, #8]
 80800f4:	3b01      	subs	r3, #1
 80800f6:	60a3      	str	r3, [r4, #8]
 80800f8:	b91b      	cbnz	r3, 8080102 <setup+0x4e>
            _M_destroy();
 80800fa:	6823      	ldr	r3, [r4, #0]
 80800fc:	4620      	mov	r0, r4
 80800fe:	68db      	ldr	r3, [r3, #12]
 8080100:	4798      	blx	r3
  Particle.publish("message","Hello_World!", PUBLIC);
}
 8080102:	b004      	add	sp, #16
 8080104:	bd10      	pop	{r4, pc}
 8080106:	bf00      	nop
 8080108:	2000006c 	.word	0x2000006c
 808010c:	0808159c 	.word	0x0808159c
 8080110:	080815a9 	.word	0x080815a9

08080114 <loop>:

void loop()
{
 8080114:	b508      	push	{r3, lr}
  digitalWrite(BUILTIN_LED, HIGH);
 8080116:	2101      	movs	r1, #1
 8080118:	2007      	movs	r0, #7
 808011a:	f001 f946 	bl	80813aa <digitalWrite>
  delay(100);
 808011e:	2064      	movs	r0, #100	; 0x64
 8080120:	f000 faac 	bl	808067c <delay>
  digitalWrite(BUILTIN_LED, LOW);
 8080124:	2100      	movs	r1, #0
 8080126:	2007      	movs	r0, #7
 8080128:	f001 f93f 	bl	80813aa <digitalWrite>
  delay(100);
 808012c:	2064      	movs	r0, #100	; 0x64
 808012e:	f000 faa5 	bl	808067c <delay>
  Serial.println("Hello World!");
 8080132:	f000 fedd 	bl	8080ef0 <_Z16_fetch_usbserialv>
}
 8080136:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  Serial.println("Hello World!");
 808013a:	4901      	ldr	r1, [pc, #4]	; (8080140 <loop+0x2c>)
 808013c:	f000 ba47 	b.w	80805ce <_ZN5Print7printlnEPKc>
 8080140:	080815b1 	.word	0x080815b1

08080144 <_GLOBAL__sub_I_setup>:
        val_(val) {
 8080144:	2200      	movs	r2, #0
 8080146:	4b02      	ldr	r3, [pc, #8]	; (8080150 <_GLOBAL__sub_I_setup+0xc>)
 8080148:	701a      	strb	r2, [r3, #0]
inline int32_t pinReadFast(pin_t _pin)
{
    return ((PIN_MAP[_pin].gpio_peripheral->IDR & PIN_MAP[_pin].gpio_pin) == 0 ? LOW : HIGH);
}
#elif defined(STM32F2XX)
static Hal_Pin_Info* PIN_MAP = HAL_Pin_Map();
 808014a:	f000 b803 	b.w	8080154 <HAL_Pin_Map>
 808014e:	bf00      	nop
 8080150:	2000006c 	.word	0x2000006c

08080154 <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
 8080154:	b508      	push	{r3, lr}
 8080156:	4b02      	ldr	r3, [pc, #8]	; (8080160 <HAL_Pin_Map+0xc>)
 8080158:	681b      	ldr	r3, [r3, #0]
 808015a:	681b      	ldr	r3, [r3, #0]
 808015c:	9301      	str	r3, [sp, #4]
 808015e:	bd08      	pop	{r3, pc}
 8080160:	080401b0 	.word	0x080401b0

08080164 <HAL_Pin_Mode>:
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
 8080164:	b508      	push	{r3, lr}
 8080166:	4b02      	ldr	r3, [pc, #8]	; (8080170 <HAL_Pin_Mode+0xc>)
 8080168:	681b      	ldr	r3, [r3, #0]
 808016a:	689b      	ldr	r3, [r3, #8]
 808016c:	9301      	str	r3, [sp, #4]
 808016e:	bd08      	pop	{r3, pc}
 8080170:	080401b0 	.word	0x080401b0

08080174 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
 8080174:	b508      	push	{r3, lr}
 8080176:	4b02      	ldr	r3, [pc, #8]	; (8080180 <HAL_Get_Pin_Mode+0xc>)
 8080178:	681b      	ldr	r3, [r3, #0]
 808017a:	68db      	ldr	r3, [r3, #12]
 808017c:	9301      	str	r3, [sp, #4]
 808017e:	bd08      	pop	{r3, pc}
 8080180:	080401b0 	.word	0x080401b0

08080184 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
 8080184:	b508      	push	{r3, lr}
 8080186:	4b02      	ldr	r3, [pc, #8]	; (8080190 <HAL_GPIO_Write+0xc>)
 8080188:	681b      	ldr	r3, [r3, #0]
 808018a:	691b      	ldr	r3, [r3, #16]
 808018c:	9301      	str	r3, [sp, #4]
 808018e:	bd08      	pop	{r3, pc}
 8080190:	080401b0 	.word	0x080401b0

08080194 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
 8080194:	b508      	push	{r3, lr}
 8080196:	4b02      	ldr	r3, [pc, #8]	; (80801a0 <HAL_RNG_GetRandomNumber+0xc>)
 8080198:	681b      	ldr	r3, [r3, #0]
 808019a:	685b      	ldr	r3, [r3, #4]
 808019c:	9301      	str	r3, [sp, #4]
 808019e:	bd08      	pop	{r3, pc}
 80801a0:	0804019c 	.word	0x0804019c

080801a4 <HAL_Timer_Get_Milli_Seconds>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
 80801a4:	b508      	push	{r3, lr}
 80801a6:	4b02      	ldr	r3, [pc, #8]	; (80801b0 <HAL_Timer_Get_Milli_Seconds+0xc>)
 80801a8:	681b      	ldr	r3, [r3, #0]
 80801aa:	695b      	ldr	r3, [r3, #20]
 80801ac:	9301      	str	r3, [sp, #4]
 80801ae:	bd08      	pop	{r3, pc}
 80801b0:	0804019c 	.word	0x0804019c

080801b4 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
 80801b4:	b508      	push	{r3, lr}
 80801b6:	4b02      	ldr	r3, [pc, #8]	; (80801c0 <os_mutex_recursive_create+0xc>)
 80801b8:	681b      	ldr	r3, [r3, #0]
 80801ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80801bc:	9301      	str	r3, [sp, #4]
 80801be:	bd08      	pop	{r3, pc}
 80801c0:	080401d0 	.word	0x080401d0

080801c4 <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
 80801c4:	b508      	push	{r3, lr}
 80801c6:	4b02      	ldr	r3, [pc, #8]	; (80801d0 <os_mutex_recursive_destroy+0xc>)
 80801c8:	681b      	ldr	r3, [r3, #0]
 80801ca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80801cc:	9301      	str	r3, [sp, #4]
 80801ce:	bd08      	pop	{r3, pc}
 80801d0:	080401d0 	.word	0x080401d0

080801d4 <hal_usart_init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
 80801d4:	b508      	push	{r3, lr}
 80801d6:	4b02      	ldr	r3, [pc, #8]	; (80801e0 <hal_usart_init+0xc>)
 80801d8:	681b      	ldr	r3, [r3, #0]
 80801da:	699b      	ldr	r3, [r3, #24]
 80801dc:	9301      	str	r3, [sp, #4]
 80801de:	bd08      	pop	{r3, pc}
 80801e0:	080401c4 	.word	0x080401c4

080801e4 <hal_usart_write>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
 80801e4:	b508      	push	{r3, lr}
 80801e6:	4b02      	ldr	r3, [pc, #8]	; (80801f0 <hal_usart_write+0xc>)
 80801e8:	681b      	ldr	r3, [r3, #0]
 80801ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80801ec:	9301      	str	r3, [sp, #4]
 80801ee:	bd08      	pop	{r3, pc}
 80801f0:	080401c4 	.word	0x080401c4

080801f4 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
 80801f4:	b508      	push	{r3, lr}
 80801f6:	4b02      	ldr	r3, [pc, #8]	; (8080200 <hal_usart_available+0xc>)
 80801f8:	681b      	ldr	r3, [r3, #0]
 80801fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80801fc:	9301      	str	r3, [sp, #4]
 80801fe:	bd08      	pop	{r3, pc}
 8080200:	080401c4 	.word	0x080401c4

08080204 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
 8080204:	b508      	push	{r3, lr}
 8080206:	4b02      	ldr	r3, [pc, #8]	; (8080210 <hal_usart_read+0xc>)
 8080208:	681b      	ldr	r3, [r3, #0]
 808020a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 808020c:	9301      	str	r3, [sp, #4]
 808020e:	bd08      	pop	{r3, pc}
 8080210:	080401c4 	.word	0x080401c4

08080214 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
 8080214:	b508      	push	{r3, lr}
 8080216:	4b02      	ldr	r3, [pc, #8]	; (8080220 <hal_usart_peek+0xc>)
 8080218:	681b      	ldr	r3, [r3, #0]
 808021a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 808021c:	9301      	str	r3, [sp, #4]
 808021e:	bd08      	pop	{r3, pc}
 8080220:	080401c4 	.word	0x080401c4

08080224 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
 8080224:	b508      	push	{r3, lr}
 8080226:	4b02      	ldr	r3, [pc, #8]	; (8080230 <hal_usart_flush+0xc>)
 8080228:	681b      	ldr	r3, [r3, #0]
 808022a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 808022c:	9301      	str	r3, [sp, #4]
 808022e:	bd08      	pop	{r3, pc}
 8080230:	080401c4 	.word	0x080401c4

08080234 <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
 8080234:	b508      	push	{r3, lr}
 8080236:	4b02      	ldr	r3, [pc, #8]	; (8080240 <hal_usart_is_enabled+0xc>)
 8080238:	681b      	ldr	r3, [r3, #0]
 808023a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 808023c:	9301      	str	r3, [sp, #4]
 808023e:	bd08      	pop	{r3, pc}
 8080240:	080401c4 	.word	0x080401c4

08080244 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
 8080244:	b508      	push	{r3, lr}
 8080246:	4b02      	ldr	r3, [pc, #8]	; (8080250 <hal_usart_available_data_for_write+0xc>)
 8080248:	681b      	ldr	r3, [r3, #0]
 808024a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 808024c:	9301      	str	r3, [sp, #4]
 808024e:	bd08      	pop	{r3, pc}
 8080250:	080401c4 	.word	0x080401c4

08080254 <hal_i2c_write>:
DYNALIB_FN(BASE_IDX + 3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
DYNALIB_FN(BASE_IDX + 7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
 8080254:	b508      	push	{r3, lr}
 8080256:	4b02      	ldr	r3, [pc, #8]	; (8080260 <hal_i2c_write+0xc>)
 8080258:	681b      	ldr	r3, [r3, #0]
 808025a:	6a1b      	ldr	r3, [r3, #32]
 808025c:	9301      	str	r3, [sp, #4]
 808025e:	bd08      	pop	{r3, pc}
 8080260:	080401ac 	.word	0x080401ac

08080264 <hal_i2c_available>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
 8080264:	b508      	push	{r3, lr}
 8080266:	4b02      	ldr	r3, [pc, #8]	; (8080270 <hal_i2c_available+0xc>)
 8080268:	681b      	ldr	r3, [r3, #0]
 808026a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 808026c:	9301      	str	r3, [sp, #4]
 808026e:	bd08      	pop	{r3, pc}
 8080270:	080401ac 	.word	0x080401ac

08080274 <hal_i2c_read>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
 8080274:	b508      	push	{r3, lr}
 8080276:	4b02      	ldr	r3, [pc, #8]	; (8080280 <hal_i2c_read+0xc>)
 8080278:	681b      	ldr	r3, [r3, #0]
 808027a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 808027c:	9301      	str	r3, [sp, #4]
 808027e:	bd08      	pop	{r3, pc}
 8080280:	080401ac 	.word	0x080401ac

08080284 <hal_i2c_peek>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
 8080284:	b508      	push	{r3, lr}
 8080286:	4b02      	ldr	r3, [pc, #8]	; (8080290 <hal_i2c_peek+0xc>)
 8080288:	681b      	ldr	r3, [r3, #0]
 808028a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 808028c:	9301      	str	r3, [sp, #4]
 808028e:	bd08      	pop	{r3, pc}
 8080290:	080401ac 	.word	0x080401ac

08080294 <hal_i2c_flush>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
 8080294:	b508      	push	{r3, lr}
 8080296:	4b02      	ldr	r3, [pc, #8]	; (80802a0 <hal_i2c_flush+0xc>)
 8080298:	681b      	ldr	r3, [r3, #0]
 808029a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 808029c:	9301      	str	r3, [sp, #4]
 808029e:	bd08      	pop	{r3, pc}
 80802a0:	080401ac 	.word	0x080401ac

080802a4 <hal_i2c_is_enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
 80802a4:	b508      	push	{r3, lr}
 80802a6:	4b02      	ldr	r3, [pc, #8]	; (80802b0 <hal_i2c_is_enabled+0xc>)
 80802a8:	681b      	ldr	r3, [r3, #0]
 80802aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80802ac:	9301      	str	r3, [sp, #4]
 80802ae:	bd08      	pop	{r3, pc}
 80802b0:	080401ac 	.word	0x080401ac

080802b4 <hal_i2c_init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
 80802b4:	b508      	push	{r3, lr}
 80802b6:	4b02      	ldr	r3, [pc, #8]	; (80802c0 <hal_i2c_init+0xc>)
 80802b8:	681b      	ldr	r3, [r3, #0]
 80802ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80802bc:	9301      	str	r3, [sp, #4]
 80802be:	bd08      	pop	{r3, pc}
 80802c0:	080401ac 	.word	0x080401ac

080802c4 <hal_spi_init>:
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
 80802c4:	b508      	push	{r3, lr}
 80802c6:	4b02      	ldr	r3, [pc, #8]	; (80802d0 <hal_spi_init+0xc>)
 80802c8:	681b      	ldr	r3, [r3, #0]
 80802ca:	69db      	ldr	r3, [r3, #28]
 80802cc:	9301      	str	r3, [sp, #4]
 80802ce:	bd08      	pop	{r3, pc}
 80802d0:	080401b4 	.word	0x080401b4

080802d4 <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
 80802d4:	b508      	push	{r3, lr}
 80802d6:	4b02      	ldr	r3, [pc, #8]	; (80802e0 <hal_spi_is_enabled+0xc>)
 80802d8:	681b      	ldr	r3, [r3, #0]
 80802da:	6a1b      	ldr	r3, [r3, #32]
 80802dc:	9301      	str	r3, [sp, #4]
 80802de:	bd08      	pop	{r3, pc}
 80802e0:	080401b4 	.word	0x080401b4

080802e4 <inet_gethostbyname>:
DYNALIB_FN(10, hal_cellular, cellular_credentials_set, cellular_result_t(const char*, const char*, const char*, void*))
DYNALIB_FN(11, hal_cellular, cellular_credentials_get, CellularCredentials*(void*))
DYNALIB_FN(12, hal_cellular, cellular_sim_ready, bool(void*))
DYNALIB_FN(13, hal_cellular, cellular_cancel, void(bool, bool, void*))
DYNALIB_FN(14, hal_cellular, HAL_NET_SetNetWatchDog, uint32_t(uint32_t))
DYNALIB_FN(15, hal_cellular, inet_gethostbyname, int(const char*, uint16_t, HAL_IPAddress*, network_interface_t, void*))
 80802e4:	b508      	push	{r3, lr}
 80802e6:	4b02      	ldr	r3, [pc, #8]	; (80802f0 <inet_gethostbyname+0xc>)
 80802e8:	681b      	ldr	r3, [r3, #0]
 80802ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80802ec:	9301      	str	r3, [sp, #4]
 80802ee:	bd08      	pop	{r3, pc}
 80802f0:	08060020 	.word	0x08060020

080802f4 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
 80802f4:	b508      	push	{r3, lr}
 80802f6:	4b02      	ldr	r3, [pc, #8]	; (8080300 <HAL_USB_USART_Init+0xc>)
 80802f8:	681b      	ldr	r3, [r3, #0]
 80802fa:	681b      	ldr	r3, [r3, #0]
 80802fc:	9301      	str	r3, [sp, #4]
 80802fe:	bd08      	pop	{r3, pc}
 8080300:	0806001c 	.word	0x0806001c

08080304 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
 8080304:	b508      	push	{r3, lr}
 8080306:	4b02      	ldr	r3, [pc, #8]	; (8080310 <HAL_USB_USART_Begin+0xc>)
 8080308:	681b      	ldr	r3, [r3, #0]
 808030a:	685b      	ldr	r3, [r3, #4]
 808030c:	9301      	str	r3, [sp, #4]
 808030e:	bd08      	pop	{r3, pc}
 8080310:	0806001c 	.word	0x0806001c

08080314 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
 8080314:	b508      	push	{r3, lr}
 8080316:	4b02      	ldr	r3, [pc, #8]	; (8080320 <HAL_USB_USART_Available_Data+0xc>)
 8080318:	681b      	ldr	r3, [r3, #0]
 808031a:	691b      	ldr	r3, [r3, #16]
 808031c:	9301      	str	r3, [sp, #4]
 808031e:	bd08      	pop	{r3, pc}
 8080320:	0806001c 	.word	0x0806001c

08080324 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
 8080324:	b508      	push	{r3, lr}
 8080326:	4b02      	ldr	r3, [pc, #8]	; (8080330 <HAL_USB_USART_Available_Data_For_Write+0xc>)
 8080328:	681b      	ldr	r3, [r3, #0]
 808032a:	695b      	ldr	r3, [r3, #20]
 808032c:	9301      	str	r3, [sp, #4]
 808032e:	bd08      	pop	{r3, pc}
 8080330:	0806001c 	.word	0x0806001c

08080334 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 8080334:	b508      	push	{r3, lr}
 8080336:	4b02      	ldr	r3, [pc, #8]	; (8080340 <HAL_USB_USART_Receive_Data+0xc>)
 8080338:	681b      	ldr	r3, [r3, #0]
 808033a:	699b      	ldr	r3, [r3, #24]
 808033c:	9301      	str	r3, [sp, #4]
 808033e:	bd08      	pop	{r3, pc}
 8080340:	0806001c 	.word	0x0806001c

08080344 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 8080344:	b508      	push	{r3, lr}
 8080346:	4b02      	ldr	r3, [pc, #8]	; (8080350 <HAL_USB_USART_Send_Data+0xc>)
 8080348:	681b      	ldr	r3, [r3, #0]
 808034a:	69db      	ldr	r3, [r3, #28]
 808034c:	9301      	str	r3, [sp, #4]
 808034e:	bd08      	pop	{r3, pc}
 8080350:	0806001c 	.word	0x0806001c

08080354 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
 8080354:	b508      	push	{r3, lr}
 8080356:	4b02      	ldr	r3, [pc, #8]	; (8080360 <HAL_USB_USART_Flush_Data+0xc>)
 8080358:	681b      	ldr	r3, [r3, #0]
 808035a:	6a1b      	ldr	r3, [r3, #32]
 808035c:	9301      	str	r3, [sp, #4]
 808035e:	bd08      	pop	{r3, pc}
 8080360:	0806001c 	.word	0x0806001c

08080364 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
 8080364:	b508      	push	{r3, lr}
 8080366:	4b02      	ldr	r3, [pc, #8]	; (8080370 <set_system_mode+0xc>)
 8080368:	681b      	ldr	r3, [r3, #0]
 808036a:	685b      	ldr	r3, [r3, #4]
 808036c:	9301      	str	r3, [sp, #4]
 808036e:	bd08      	pop	{r3, pc}
 8080370:	080401a4 	.word	0x080401a4

08080374 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
 8080374:	b508      	push	{r3, lr}
 8080376:	4b02      	ldr	r3, [pc, #8]	; (8080380 <system_delay_ms+0xc>)
 8080378:	681b      	ldr	r3, [r3, #0]
 808037a:	695b      	ldr	r3, [r3, #20]
 808037c:	9301      	str	r3, [sp, #4]
 808037e:	bd08      	pop	{r3, pc}
 8080380:	080401a4 	.word	0x080401a4

08080384 <application_thread_current>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
DYNALIB_FN(16, system, Spark_Prepare_For_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))
DYNALIB_FN(17, system, Spark_Save_Firmware_Chunk, int(FileTransfer::Descriptor&, const uint8_t*, void*))
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
 8080384:	b508      	push	{r3, lr}
 8080386:	4b02      	ldr	r3, [pc, #8]	; (8080390 <application_thread_current+0xc>)
 8080388:	681b      	ldr	r3, [r3, #0]
 808038a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 808038c:	9301      	str	r3, [sp, #4]
 808038e:	bd08      	pop	{r3, pc}
 8080390:	080401a4 	.word	0x080401a4

08080394 <application_thread_invoke>:
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
 8080394:	b508      	push	{r3, lr}
 8080396:	4b02      	ldr	r3, [pc, #8]	; (80803a0 <application_thread_invoke+0xc>)
 8080398:	681b      	ldr	r3, [r3, #0]
 808039a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 808039c:	9301      	str	r3, [sp, #4]
 808039e:	bd08      	pop	{r3, pc}
 80803a0:	080401a4 	.word	0x080401a4

080803a4 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
 80803a4:	b508      	push	{r3, lr}
 80803a6:	4b03      	ldr	r3, [pc, #12]	; (80803b4 <system_ctrl_set_app_request_handler+0x10>)
 80803a8:	681b      	ldr	r3, [r3, #0]
 80803aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80803ae:	9301      	str	r3, [sp, #4]
 80803b0:	bd08      	pop	{r3, pc}
 80803b2:	0000      	.short	0x0000
 80803b4:	080401a4 	.word	0x080401a4

080803b8 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
 80803b8:	b508      	push	{r3, lr}
 80803ba:	4b03      	ldr	r3, [pc, #12]	; (80803c8 <system_ctrl_set_result+0x10>)
 80803bc:	681b      	ldr	r3, [r3, #0]
 80803be:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80803c2:	9301      	str	r3, [sp, #4]
 80803c4:	bd08      	pop	{r3, pc}
 80803c6:	0000      	.short	0x0000
 80803c8:	080401a4 	.word	0x080401a4

080803cc <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
 80803cc:	b508      	push	{r3, lr}
 80803ce:	4b02      	ldr	r3, [pc, #8]	; (80803d8 <network_connect+0xc>)
 80803d0:	681b      	ldr	r3, [r3, #0]
 80803d2:	685b      	ldr	r3, [r3, #4]
 80803d4:	9301      	str	r3, [sp, #4]
 80803d6:	bd08      	pop	{r3, pc}
 80803d8:	080401c8 	.word	0x080401c8

080803dc <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
 80803dc:	b508      	push	{r3, lr}
 80803de:	4b02      	ldr	r3, [pc, #8]	; (80803e8 <network_connecting+0xc>)
 80803e0:	681b      	ldr	r3, [r3, #0]
 80803e2:	689b      	ldr	r3, [r3, #8]
 80803e4:	9301      	str	r3, [sp, #4]
 80803e6:	bd08      	pop	{r3, pc}
 80803e8:	080401c8 	.word	0x080401c8

080803ec <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
 80803ec:	b508      	push	{r3, lr}
 80803ee:	4b02      	ldr	r3, [pc, #8]	; (80803f8 <network_disconnect+0xc>)
 80803f0:	681b      	ldr	r3, [r3, #0]
 80803f2:	68db      	ldr	r3, [r3, #12]
 80803f4:	9301      	str	r3, [sp, #4]
 80803f6:	bd08      	pop	{r3, pc}
 80803f8:	080401c8 	.word	0x080401c8

080803fc <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
 80803fc:	b508      	push	{r3, lr}
 80803fe:	4b02      	ldr	r3, [pc, #8]	; (8080408 <network_ready+0xc>)
 8080400:	681b      	ldr	r3, [r3, #0]
 8080402:	691b      	ldr	r3, [r3, #16]
 8080404:	9301      	str	r3, [sp, #4]
 8080406:	bd08      	pop	{r3, pc}
 8080408:	080401c8 	.word	0x080401c8

0808040c <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
 808040c:	b508      	push	{r3, lr}
 808040e:	4b02      	ldr	r3, [pc, #8]	; (8080418 <network_on+0xc>)
 8080410:	681b      	ldr	r3, [r3, #0]
 8080412:	695b      	ldr	r3, [r3, #20]
 8080414:	9301      	str	r3, [sp, #4]
 8080416:	bd08      	pop	{r3, pc}
 8080418:	080401c8 	.word	0x080401c8

0808041c <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
 808041c:	b508      	push	{r3, lr}
 808041e:	4b02      	ldr	r3, [pc, #8]	; (8080428 <network_off+0xc>)
 8080420:	681b      	ldr	r3, [r3, #0]
 8080422:	699b      	ldr	r3, [r3, #24]
 8080424:	9301      	str	r3, [sp, #4]
 8080426:	bd08      	pop	{r3, pc}
 8080428:	080401c8 	.word	0x080401c8

0808042c <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
 808042c:	b508      	push	{r3, lr}
 808042e:	4b02      	ldr	r3, [pc, #8]	; (8080438 <network_listen+0xc>)
 8080430:	681b      	ldr	r3, [r3, #0]
 8080432:	69db      	ldr	r3, [r3, #28]
 8080434:	9301      	str	r3, [sp, #4]
 8080436:	bd08      	pop	{r3, pc}
 8080438:	080401c8 	.word	0x080401c8

0808043c <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
 808043c:	b508      	push	{r3, lr}
 808043e:	4b02      	ldr	r3, [pc, #8]	; (8080448 <network_listening+0xc>)
 8080440:	681b      	ldr	r3, [r3, #0]
 8080442:	6a1b      	ldr	r3, [r3, #32]
 8080444:	9301      	str	r3, [sp, #4]
 8080446:	bd08      	pop	{r3, pc}
 8080448:	080401c8 	.word	0x080401c8

0808044c <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
 808044c:	b508      	push	{r3, lr}
 808044e:	4b02      	ldr	r3, [pc, #8]	; (8080458 <network_set_listen_timeout+0xc>)
 8080450:	681b      	ldr	r3, [r3, #0]
 8080452:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8080454:	9301      	str	r3, [sp, #4]
 8080456:	bd08      	pop	{r3, pc}
 8080458:	080401c8 	.word	0x080401c8

0808045c <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
 808045c:	b508      	push	{r3, lr}
 808045e:	4b02      	ldr	r3, [pc, #8]	; (8080468 <network_get_listen_timeout+0xc>)
 8080460:	681b      	ldr	r3, [r3, #0]
 8080462:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8080464:	9301      	str	r3, [sp, #4]
 8080466:	bd08      	pop	{r3, pc}
 8080468:	080401c8 	.word	0x080401c8

0808046c <spark_cloud_flag_connected>:
DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, void(void))
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
 808046c:	b508      	push	{r3, lr}
 808046e:	4b02      	ldr	r3, [pc, #8]	; (8080478 <spark_cloud_flag_connected+0xc>)
 8080470:	681b      	ldr	r3, [r3, #0]
 8080472:	695b      	ldr	r3, [r3, #20]
 8080474:	9301      	str	r3, [sp, #4]
 8080476:	bd08      	pop	{r3, pc}
 8080478:	080401cc 	.word	0x080401cc

0808047c <spark_send_event>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
 808047c:	b508      	push	{r3, lr}
 808047e:	4b02      	ldr	r3, [pc, #8]	; (8080488 <spark_send_event+0xc>)
 8080480:	681b      	ldr	r3, [r3, #0]
 8080482:	6a1b      	ldr	r3, [r3, #32]
 8080484:	9301      	str	r3, [sp, #4]
 8080486:	bd08      	pop	{r3, pc}
 8080488:	080401cc 	.word	0x080401cc

0808048c <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
 808048c:	b508      	push	{r3, lr}
 808048e:	4b02      	ldr	r3, [pc, #8]	; (8080498 <spark_set_random_seed_from_cloud_handler+0xc>)
 8080490:	681b      	ldr	r3, [r3, #0]
 8080492:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8080494:	9301      	str	r3, [sp, #4]
 8080496:	bd08      	pop	{r3, pc}
 8080498:	080401cc 	.word	0x080401cc

0808049c <malloc>:
#include "newlib_impure.h"
#endif

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
 808049c:	b508      	push	{r3, lr}
 808049e:	4b02      	ldr	r3, [pc, #8]	; (80804a8 <malloc+0xc>)
 80804a0:	681b      	ldr	r3, [r3, #0]
 80804a2:	681b      	ldr	r3, [r3, #0]
 80804a4:	9301      	str	r3, [sp, #4]
 80804a6:	bd08      	pop	{r3, pc}
 80804a8:	080401a0 	.word	0x080401a0

080804ac <free>:
DYNALIB_FN(1, rt, free, void(void*))
 80804ac:	b508      	push	{r3, lr}
 80804ae:	4b02      	ldr	r3, [pc, #8]	; (80804b8 <free+0xc>)
 80804b0:	681b      	ldr	r3, [r3, #0]
 80804b2:	685b      	ldr	r3, [r3, #4]
 80804b4:	9301      	str	r3, [sp, #4]
 80804b6:	bd08      	pop	{r3, pc}
 80804b8:	080401a0 	.word	0x080401a0

080804bc <abort>:
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
 80804bc:	b508      	push	{r3, lr}
 80804be:	4b02      	ldr	r3, [pc, #8]	; (80804c8 <abort+0xc>)
 80804c0:	681b      	ldr	r3, [r3, #0]
 80804c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80804c4:	9301      	str	r3, [sp, #4]
 80804c6:	bd08      	pop	{r3, pc}
 80804c8:	080401a0 	.word	0x080401a0

080804cc <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
 80804cc:	b508      	push	{r3, lr}
 80804ce:	4b02      	ldr	r3, [pc, #8]	; (80804d8 <_malloc_r+0xc>)
 80804d0:	681b      	ldr	r3, [r3, #0]
 80804d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80804d4:	9301      	str	r3, [sp, #4]
 80804d6:	bd08      	pop	{r3, pc}
 80804d8:	080401a0 	.word	0x080401a0

080804dc <newlib_impure_ptr_callback>:
// RT is currently being imported into system-part1 from system-part2,
// which is the reverse direction.

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
 80804dc:	b508      	push	{r3, lr}
 80804de:	4b02      	ldr	r3, [pc, #8]	; (80804e8 <newlib_impure_ptr_callback+0xc>)
 80804e0:	681b      	ldr	r3, [r3, #0]
 80804e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80804e4:	9301      	str	r3, [sp, #4]
 80804e6:	bd08      	pop	{r3, pc}
 80804e8:	080401a0 	.word	0x080401a0

080804ec <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
 80804ec:	b570      	push	{r4, r5, r6, lr}
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
 80804ee:	2600      	movs	r6, #0
 80804f0:	4604      	mov	r4, r0
 80804f2:	460d      	mov	r5, r1
 80804f4:	f840 6f08 	str.w	r6, [r0, #8]!
    {
        os_mutex_recursive_create(&handle_);
 80804f8:	f7ff fe5c 	bl	80801b4 <os_mutex_recursive_create>
{
    _spi = spi;
    hal_spi_init(_spi);
 80804fc:	4628      	mov	r0, r5
    _spi = spi;
 80804fe:	7025      	strb	r5, [r4, #0]
    hal_spi_init(_spi);
 8080500:	f7ff fee0 	bl	80802c4 <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
}
 8080504:	4620      	mov	r0, r4
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
 8080506:	6066      	str	r6, [r4, #4]
}
 8080508:	bd70      	pop	{r4, r5, r6, pc}

0808050a <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0>:
    operator SleepResult() {
        return toSleepResult();
    }

private:
    void freeWakeupSourceMemory() {
 808050a:	b510      	push	{r4, lr}
 808050c:	4604      	mov	r4, r0
        if (wakeupSource_) {
 808050e:	6800      	ldr	r0, [r0, #0]
 8080510:	b118      	cbz	r0, 808051a <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0+0x10>
            free(wakeupSource_);
 8080512:	f7ff ffcb 	bl	80804ac <free>
            wakeupSource_ = nullptr;
 8080516:	2300      	movs	r3, #0
 8080518:	6023      	str	r3, [r4, #0]
        }
    }
 808051a:	bd10      	pop	{r4, pc}

0808051c <_ZN11SystemClassD1Ev>:
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
 808051c:	b510      	push	{r4, lr}
 808051e:	4604      	mov	r4, r0
        freeWakeupSourceMemory();
 8080520:	f7ff fff3 	bl	808050a <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0>
class SystemClass {
 8080524:	4620      	mov	r0, r4
 8080526:	bd10      	pop	{r4, pc}

08080528 <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
 8080528:	2202      	movs	r2, #2
              error_(SYSTEM_ERROR_NONE) {
 808052a:	2000      	movs	r0, #0
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
 808052c:	b510      	push	{r4, lr}
 808052e:	4b08      	ldr	r3, [pc, #32]	; (8080550 <_GLOBAL__sub_I_System+0x28>)
 8080530:	4c08      	ldr	r4, [pc, #32]	; (8080554 <_GLOBAL__sub_I_System+0x2c>)
 8080532:	601a      	str	r2, [r3, #0]
    SleepResult() {}
 8080534:	4b08      	ldr	r3, [pc, #32]	; (8080558 <_GLOBAL__sub_I_System+0x30>)
              error_(SYSTEM_ERROR_NONE) {
 8080536:	6020      	str	r0, [r4, #0]
 8080538:	80a0      	strh	r0, [r4, #4]
    SleepResult() {}
 808053a:	71a0      	strb	r0, [r4, #6]
 808053c:	60a3      	str	r3, [r4, #8]
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
 808053e:	f7ff ff11 	bl	8080364 <set_system_mode>
SystemClass System;
 8080542:	4620      	mov	r0, r4
 8080544:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
SystemClass System;
 8080548:	4a04      	ldr	r2, [pc, #16]	; (808055c <_GLOBAL__sub_I_System+0x34>)
 808054a:	4905      	ldr	r1, [pc, #20]	; (8080560 <_GLOBAL__sub_I_System+0x38>)
 808054c:	f000 bfa4 	b.w	8081498 <__aeabi_atexit>
 8080550:	2000007c 	.word	0x2000007c
 8080554:	20000070 	.word	0x20000070
 8080558:	ffff0000 	.word	0xffff0000
 808055c:	20000068 	.word	0x20000068
 8080560:	0808051d 	.word	0x0808051d

08080564 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
 8080564:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8080566:	4606      	mov	r6, r0
 8080568:	460d      	mov	r5, r1
  size_t n = 0;
 808056a:	2400      	movs	r4, #0
 808056c:	188f      	adds	r7, r1, r2
  while (size--) {
 808056e:	42bd      	cmp	r5, r7
 8080570:	d00c      	beq.n	808058c <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
 8080572:	6833      	ldr	r3, [r6, #0]
 8080574:	4630      	mov	r0, r6
 8080576:	689b      	ldr	r3, [r3, #8]
 8080578:	f815 1b01 	ldrb.w	r1, [r5], #1
 808057c:	4798      	blx	r3
     if (chunk>=0)
 808057e:	1e03      	subs	r3, r0, #0
 8080580:	db01      	blt.n	8080586 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
 8080582:	441c      	add	r4, r3
  while (size--) {
 8080584:	e7f3      	b.n	808056e <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
 8080586:	2c00      	cmp	r4, #0
 8080588:	bf08      	it	eq
 808058a:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
 808058c:	4620      	mov	r0, r4
 808058e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08080590 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
 8080590:	b570      	push	{r4, r5, r6, lr}
 8080592:	4605      	mov	r5, r0
      if (str == NULL) return 0;
 8080594:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
 8080596:	4608      	mov	r0, r1
      if (str == NULL) return 0;
 8080598:	b149      	cbz	r1, 80805ae <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
 808059a:	f000 ffec 	bl	8081576 <strlen>
 808059e:	682b      	ldr	r3, [r5, #0]
 80805a0:	4602      	mov	r2, r0
 80805a2:	4621      	mov	r1, r4
 80805a4:	4628      	mov	r0, r5
    }
 80805a6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      return write((const uint8_t *)str, strlen(str));
 80805aa:	68db      	ldr	r3, [r3, #12]
 80805ac:	4718      	bx	r3
    }
 80805ae:	bd70      	pop	{r4, r5, r6, pc}

080805b0 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
 80805b0:	6803      	ldr	r3, [r0, #0]
 80805b2:	689b      	ldr	r3, [r3, #8]
 80805b4:	4718      	bx	r3

080805b6 <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
 80805b6:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
 80805b8:	210d      	movs	r1, #13
{
 80805ba:	4605      	mov	r5, r0
  size_t n = print('\r');
 80805bc:	f7ff fff8 	bl	80805b0 <_ZN5Print5printEc>
  n += print('\n');
 80805c0:	210a      	movs	r1, #10
  size_t n = print('\r');
 80805c2:	4604      	mov	r4, r0
  n += print('\n');
 80805c4:	4628      	mov	r0, r5
 80805c6:	f7ff fff3 	bl	80805b0 <_ZN5Print5printEc>
  return n;
}
 80805ca:	4420      	add	r0, r4
 80805cc:	bd38      	pop	{r3, r4, r5, pc}

080805ce <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
 80805ce:	b538      	push	{r3, r4, r5, lr}
 80805d0:	4605      	mov	r5, r0
  return write(str);
 80805d2:	f7ff ffdd 	bl	8080590 <_ZN5Print5writeEPKc>
 80805d6:	4604      	mov	r4, r0
  size_t n = print(c);
  n += println();
 80805d8:	4628      	mov	r0, r5
 80805da:	f7ff ffec 	bl	80805b6 <_ZN5Print7printlnEv>
  return n;
}
 80805de:	4420      	add	r0, r4
 80805e0:	bd38      	pop	{r3, r4, r5, pc}

080805e2 <_ZN5Print11printNumberEmh>:

size_t Print::printNumber(unsigned long n, uint8_t base) {
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
 80805e2:	2300      	movs	r3, #0

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
 80805e4:	2a01      	cmp	r2, #1
 80805e6:	bf98      	it	ls
 80805e8:	220a      	movls	r2, #10
size_t Print::printNumber(unsigned long n, uint8_t base) {
 80805ea:	b530      	push	{r4, r5, lr}
 80805ec:	b08b      	sub	sp, #44	; 0x2c
 80805ee:	460c      	mov	r4, r1
  *str = '\0';
 80805f0:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  if (base < 2) base = 10;
 80805f4:	a909      	add	r1, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
 80805f6:	4625      	mov	r5, r4
 80805f8:	fbb4 f4f2 	udiv	r4, r4, r2
   char c = m - base * n;
 80805fc:	fb04 5312 	mls	r3, r4, r2, r5
 8080600:	b2db      	uxtb	r3, r3
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
 8080602:	2b09      	cmp	r3, #9
 8080604:	bf94      	ite	ls
 8080606:	3330      	addls	r3, #48	; 0x30
 8080608:	3337      	addhi	r3, #55	; 0x37
 808060a:	b2db      	uxtb	r3, r3
  } while(n);
 808060c:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
 808060e:	f801 3d01 	strb.w	r3, [r1, #-1]!
  } while(n);
 8080612:	d9f0      	bls.n	80805f6 <_ZN5Print11printNumberEmh+0x14>

  return write(str);
 8080614:	f7ff ffbc 	bl	8080590 <_ZN5Print5writeEPKc>
}
 8080618:	b00b      	add	sp, #44	; 0x2c
 808061a:	bd30      	pop	{r4, r5, pc}

0808061c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~__shared_count() noexcept
 808061c:	b538      	push	{r3, r4, r5, lr}
	if (_M_pi != nullptr)
 808061e:	6804      	ldr	r4, [r0, #0]
      ~__shared_count() noexcept
 8080620:	4605      	mov	r5, r0
	if (_M_pi != nullptr)
 8080622:	b17c      	cbz	r4, 8080644 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
      if (--_M_use_count == 0)
 8080624:	6863      	ldr	r3, [r4, #4]
 8080626:	3b01      	subs	r3, #1
 8080628:	6063      	str	r3, [r4, #4]
 808062a:	b95b      	cbnz	r3, 8080644 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
          _M_dispose();
 808062c:	6823      	ldr	r3, [r4, #0]
 808062e:	4620      	mov	r0, r4
 8080630:	689b      	ldr	r3, [r3, #8]
 8080632:	4798      	blx	r3
          if (--_M_weak_count == 0)
 8080634:	68a3      	ldr	r3, [r4, #8]
 8080636:	3b01      	subs	r3, #1
 8080638:	60a3      	str	r3, [r4, #8]
 808063a:	b91b      	cbnz	r3, 8080644 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
            _M_destroy();
 808063c:	6823      	ldr	r3, [r4, #0]
 808063e:	4620      	mov	r0, r4
 8080640:	68db      	ldr	r3, [r3, #12]
 8080642:	4798      	blx	r3
	  _M_pi->_M_release();
      }
 8080644:	4628      	mov	r0, r5
 8080646:	bd38      	pop	{r3, r4, r5, pc}

08080648 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:

      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
 8080648:	680b      	ldr	r3, [r1, #0]
 808064a:	6003      	str	r3, [r0, #0]
      {
	if (_M_pi != 0)
 808064c:	b113      	cbz	r3, 8080654 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    { ++_M_use_count; }
 808064e:	685a      	ldr	r2, [r3, #4]
 8080650:	3201      	adds	r2, #1
 8080652:	605a      	str	r2, [r3, #4]
	  _M_pi->_M_add_ref_copy();
      }
 8080654:	4770      	bx	lr
	...

08080658 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
 8080658:	4b01      	ldr	r3, [pc, #4]	; (8080660 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
 808065a:	4a02      	ldr	r2, [pc, #8]	; (8080664 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
 808065c:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
 808065e:	4770      	bx	lr
 8080660:	20000080 	.word	0x20000080
 8080664:	080815be 	.word	0x080815be

08080668 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
 8080668:	4b02      	ldr	r3, [pc, #8]	; (8080674 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
 808066a:	681a      	ldr	r2, [r3, #0]
 808066c:	4b02      	ldr	r3, [pc, #8]	; (8080678 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
 808066e:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
 8080670:	4770      	bx	lr
 8080672:	bf00      	nop
 8080674:	20000000 	.word	0x20000000
 8080678:	20000084 	.word	0x20000084

0808067c <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
 808067c:	2100      	movs	r1, #0
 808067e:	f7ff be79 	b.w	8080374 <system_delay_ms>

08080682 <_ZNSt14_Function_baseD1Ev>:
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
 8080682:	b510      	push	{r4, lr}
    {
      if (_M_manager)
 8080684:	6883      	ldr	r3, [r0, #8]
    ~_Function_base()
 8080686:	4604      	mov	r4, r0
      if (_M_manager)
 8080688:	b113      	cbz	r3, 8080690 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 808068a:	2203      	movs	r2, #3
 808068c:	4601      	mov	r1, r0
 808068e:	4798      	blx	r3
    }
 8080690:	4620      	mov	r0, r4
 8080692:	bd10      	pop	{r4, pc}

08080694 <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
 8080694:	b510      	push	{r4, lr}
 8080696:	4604      	mov	r4, r0
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 8080698:	f7ff fff3 	bl	8080682 <_ZNSt14_Function_baseD1Ev>
 808069c:	4620      	mov	r0, r4
 808069e:	bd10      	pop	{r4, pc}

080806a0 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>:
    inline
#if __cplusplus >= 201103L
    typename enable_if<__and_<__not_<__is_tuple_like<_Tp>>,
			      is_move_constructible<_Tp>,
			      is_move_assignable<_Tp>>::value>::type
    swap(_Tp& __a, _Tp& __b)
 80806a0:	b513      	push	{r0, r1, r4, lr}
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80806a2:	466c      	mov	r4, sp
    swap(_Tp& __a, _Tp& __b)
 80806a4:	460b      	mov	r3, r1
 80806a6:	4602      	mov	r2, r0
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80806a8:	c803      	ldmia	r0, {r0, r1}
 80806aa:	e884 0003 	stmia.w	r4, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
 80806ae:	e893 0003 	ldmia.w	r3, {r0, r1}
 80806b2:	e882 0003 	stmia.w	r2, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
 80806b6:	e894 0003 	ldmia.w	r4, {r0, r1}
 80806ba:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 80806be:	b002      	add	sp, #8
 80806c0:	bd10      	pop	{r4, pc}
	...

080806c4 <_GLOBAL__sub_I_RGB>:
    _Function_base() : _M_manager(nullptr) { }
 80806c4:	2300      	movs	r3, #0
 80806c6:	4803      	ldr	r0, [pc, #12]	; (80806d4 <_GLOBAL__sub_I_RGB+0x10>)
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
 80806c8:	4a03      	ldr	r2, [pc, #12]	; (80806d8 <_GLOBAL__sub_I_RGB+0x14>)
 80806ca:	4904      	ldr	r1, [pc, #16]	; (80806dc <_GLOBAL__sub_I_RGB+0x18>)
 80806cc:	6083      	str	r3, [r0, #8]
 80806ce:	f000 bee3 	b.w	8081498 <__aeabi_atexit>
 80806d2:	bf00      	nop
 80806d4:	20000088 	.word	0x20000088
 80806d8:	20000068 	.word	0x20000068
 80806dc:	08080695 	.word	0x08080695

080806e0 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
 80806e0:	4b01      	ldr	r3, [pc, #4]	; (80806e8 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
 80806e2:	6018      	str	r0, [r3, #0]
    }, nullptr);
 80806e4:	4770      	bx	lr
 80806e6:	bf00      	nop
 80806e8:	20000004 	.word	0x20000004

080806ec <serialEventRun>:
{
 80806ec:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
 80806ee:	4b17      	ldr	r3, [pc, #92]	; (808074c <serialEventRun+0x60>)
 80806f0:	b143      	cbz	r3, 8080704 <serialEventRun+0x18>
 80806f2:	f000 fbfd 	bl	8080ef0 <_Z16_fetch_usbserialv>
 80806f6:	6803      	ldr	r3, [r0, #0]
 80806f8:	691b      	ldr	r3, [r3, #16]
 80806fa:	4798      	blx	r3
 80806fc:	2800      	cmp	r0, #0
 80806fe:	dd01      	ble.n	8080704 <serialEventRun+0x18>
        serialEvent();
 8080700:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
 8080704:	4b12      	ldr	r3, [pc, #72]	; (8080750 <serialEventRun+0x64>)
 8080706:	b143      	cbz	r3, 808071a <serialEventRun+0x2e>
 8080708:	f000 fd14 	bl	8081134 <_Z22__fetch_global_Serial1v>
 808070c:	6803      	ldr	r3, [r0, #0]
 808070e:	691b      	ldr	r3, [r3, #16]
 8080710:	4798      	blx	r3
 8080712:	2800      	cmp	r0, #0
 8080714:	dd01      	ble.n	808071a <serialEventRun+0x2e>
        serialEvent1();
 8080716:	f3af 8000 	nop.w
    if (serialEventRun2) serialEventRun2();
 808071a:	4b0e      	ldr	r3, [pc, #56]	; (8080754 <serialEventRun+0x68>)
 808071c:	b10b      	cbz	r3, 8080722 <serialEventRun+0x36>
 808071e:	f3af 8000 	nop.w
    if (serialEventRun4) serialEventRun4();
 8080722:	4b0d      	ldr	r3, [pc, #52]	; (8080758 <serialEventRun+0x6c>)
 8080724:	b10b      	cbz	r3, 808072a <serialEventRun+0x3e>
 8080726:	f3af 8000 	nop.w
    if (serialEventRun5) serialEventRun5();
 808072a:	4b0c      	ldr	r3, [pc, #48]	; (808075c <serialEventRun+0x70>)
 808072c:	b10b      	cbz	r3, 8080732 <serialEventRun+0x46>
 808072e:	f3af 8000 	nop.w
    if (usbSerialEvent1 && USBSerial1.available()>0)
 8080732:	4b0b      	ldr	r3, [pc, #44]	; (8080760 <serialEventRun+0x74>)
 8080734:	b143      	cbz	r3, 8080748 <serialEventRun+0x5c>
 8080736:	f000 fc19 	bl	8080f6c <_Z17_fetch_usbserial1v>
 808073a:	6803      	ldr	r3, [r0, #0]
 808073c:	691b      	ldr	r3, [r3, #16]
 808073e:	4798      	blx	r3
 8080740:	2800      	cmp	r0, #0
 8080742:	dd01      	ble.n	8080748 <serialEventRun+0x5c>
        usbSerialEvent1();
 8080744:	f3af 8000 	nop.w
}
 8080748:	bd08      	pop	{r3, pc}
 808074a:	bf00      	nop
	...

08080764 <_post_loop>:
{
 8080764:	b508      	push	{r3, lr}
	serialEventRun();
 8080766:	f7ff ffc1 	bl	80806ec <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
 808076a:	f7ff fd1b 	bl	80801a4 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
 808076e:	4b01      	ldr	r3, [pc, #4]	; (8080774 <_post_loop+0x10>)
 8080770:	6018      	str	r0, [r3, #0]
}
 8080772:	bd08      	pop	{r3, pc}
 8080774:	2000053c 	.word	0x2000053c

08080778 <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
 8080778:	4802      	ldr	r0, [pc, #8]	; (8080784 <_Z33system_initialize_user_backup_ramv+0xc>)
 808077a:	4a03      	ldr	r2, [pc, #12]	; (8080788 <_Z33system_initialize_user_backup_ramv+0x10>)
 808077c:	4903      	ldr	r1, [pc, #12]	; (808078c <_Z33system_initialize_user_backup_ramv+0x14>)
 808077e:	1a12      	subs	r2, r2, r0
 8080780:	f000 bea4 	b.w	80814cc <memcpy>
 8080784:	40024000 	.word	0x40024000
 8080788:	40024004 	.word	0x40024004
 808078c:	08081730 	.word	0x08081730

08080790 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 8080790:	2300      	movs	r3, #0
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
 8080792:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 8080794:	461a      	mov	r2, r3
 8080796:	f06f 0177 	mvn.w	r1, #119	; 0x77
 808079a:	9300      	str	r3, [sp, #0]
 808079c:	f7ff fe0c 	bl	80803b8 <system_ctrl_set_result>
}
 80807a0:	b003      	add	sp, #12
 80807a2:	f85d fb04 	ldr.w	pc, [sp], #4
	...

080807a8 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
 80807a8:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
 80807aa:	8843      	ldrh	r3, [r0, #2]
 80807ac:	2b0a      	cmp	r3, #10
 80807ae:	d008      	beq.n	80807c2 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
 80807b0:	2b50      	cmp	r3, #80	; 0x50
 80807b2:	d10b      	bne.n	80807cc <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
 80807b4:	4b09      	ldr	r3, [pc, #36]	; (80807dc <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
 80807b6:	681b      	ldr	r3, [r3, #0]
 80807b8:	b14b      	cbz	r3, 80807ce <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
 80807ba:	b003      	add	sp, #12
 80807bc:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
 80807c0:	4718      	bx	r3
        ctrl_request_custom_handler(req);
 80807c2:	f7ff ffe5 	bl	8080790 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
 80807c6:	b003      	add	sp, #12
 80807c8:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 80807cc:	2300      	movs	r3, #0
 80807ce:	461a      	mov	r2, r3
 80807d0:	f06f 0177 	mvn.w	r1, #119	; 0x77
 80807d4:	9300      	str	r3, [sp, #0]
 80807d6:	f7ff fdef 	bl	80803b8 <system_ctrl_set_result>
}
 80807da:	e7f4      	b.n	80807c6 <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
 80807dc:	2000009c 	.word	0x2000009c

080807e0 <module_user_init_hook>:
{
 80807e0:	b538      	push	{r3, r4, r5, lr}
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
 80807e2:	4c12      	ldr	r4, [pc, #72]	; (808082c <module_user_init_hook+0x4c>)
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
 80807e4:	2100      	movs	r1, #0
 80807e6:	4812      	ldr	r0, [pc, #72]	; (8080830 <module_user_init_hook+0x50>)
 80807e8:	f7ff fe78 	bl	80804dc <newlib_impure_ptr_callback>
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
 80807ec:	4d11      	ldr	r5, [pc, #68]	; (8080834 <module_user_init_hook+0x54>)
 80807ee:	6823      	ldr	r3, [r4, #0]
 80807f0:	42ab      	cmp	r3, r5
 80807f2:	bf0c      	ite	eq
 80807f4:	2201      	moveq	r2, #1
 80807f6:	2200      	movne	r2, #0
 80807f8:	4b0f      	ldr	r3, [pc, #60]	; (8080838 <module_user_init_hook+0x58>)
 80807fa:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
 80807fc:	d002      	beq.n	8080804 <module_user_init_hook+0x24>
        system_initialize_user_backup_ram();
 80807fe:	f7ff ffbb 	bl	8080778 <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
 8080802:	6025      	str	r5, [r4, #0]
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
 8080804:	f7ff fcc6 	bl	8080194 <HAL_RNG_GetRandomNumber>
 8080808:	4604      	mov	r4, r0
    srand(seed);
 808080a:	f000 fe75 	bl	80814f8 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
 808080e:	4b0b      	ldr	r3, [pc, #44]	; (808083c <module_user_init_hook+0x5c>)
 8080810:	b113      	cbz	r3, 8080818 <module_user_init_hook+0x38>
        random_seed_from_cloud(seed);
 8080812:	4620      	mov	r0, r4
 8080814:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
 8080818:	2100      	movs	r1, #0
 808081a:	4808      	ldr	r0, [pc, #32]	; (808083c <module_user_init_hook+0x5c>)
 808081c:	f7ff fe36 	bl	808048c <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
 8080820:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
 8080824:	2100      	movs	r1, #0
 8080826:	4806      	ldr	r0, [pc, #24]	; (8080840 <module_user_init_hook+0x60>)
 8080828:	f7ff bdbc 	b.w	80803a4 <system_ctrl_set_app_request_handler>
 808082c:	40024000 	.word	0x40024000
 8080830:	080806e1 	.word	0x080806e1
 8080834:	9a271c1e 	.word	0x9a271c1e
 8080838:	20000098 	.word	0x20000098
 808083c:	00000000 	.word	0x00000000
 8080840:	080807a9 	.word	0x080807a9

08080844 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
 8080844:	4770      	bx	lr

08080846 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      { return nullptr; }
 8080846:	2000      	movs	r0, #0
 8080848:	4770      	bx	lr

0808084a <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
 808084a:	b510      	push	{r4, lr}
 808084c:	4604      	mov	r4, r0
 808084e:	2110      	movs	r1, #16
 8080850:	f000 fe27 	bl	80814a2 <_ZdlPvj>
 8080854:	4620      	mov	r0, r4
 8080856:	bd10      	pop	{r4, pc}

08080858 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      _M_destroy() noexcept
 8080858:	b508      	push	{r3, lr}
      { delete this; }
 808085a:	f7ff fff6 	bl	808084a <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>
 808085e:	bd08      	pop	{r3, pc}

08080860 <_ZN8particle5ErrorC1EOS0_>:

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
 8080860:	2200      	movs	r2, #0

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
}

inline particle::Error::Error(Error&& error) :
 8080862:	b530      	push	{r4, r5, lr}
        type_(type) {
 8080864:	f64f 749c 	movw	r4, #65436	; 0xff9c
 8080868:	6002      	str	r2, [r0, #0]
 808086a:	8084      	strh	r4, [r0, #4]
      __a = _GLIBCXX_MOVE(__b);
 808086c:	888d      	ldrh	r5, [r1, #4]
      __b = _GLIBCXX_MOVE(__tmp);
 808086e:	808c      	strh	r4, [r1, #4]
      __a = _GLIBCXX_MOVE(__b);
 8080870:	680c      	ldr	r4, [r1, #0]
 8080872:	8085      	strh	r5, [r0, #4]
 8080874:	6004      	str	r4, [r0, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 8080876:	600a      	str	r2, [r1, #0]
        Error() {
    swap(*this, error);
}
 8080878:	bd30      	pop	{r4, r5, pc}

0808087a <_ZN8particle5ErrorD1Ev>:

inline particle::Error::~Error() {
 808087a:	b510      	push	{r4, lr}
 808087c:	4604      	mov	r4, r0
    free((void*)msg_);
 808087e:	6800      	ldr	r0, [r0, #0]
 8080880:	f7ff fe14 	bl	80804ac <free>
}
 8080884:	4620      	mov	r0, r4
 8080886:	bd10      	pop	{r4, pc}

08080888 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
 8080888:	b538      	push	{r3, r4, r5, lr}
      { delete _M_ptr; }
 808088a:	68c4      	ldr	r4, [r0, #12]
 808088c:	b1f4      	cbz	r4, 80808cc <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x44>
      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      {
	alignas(_Tp) unsigned char __buf[sizeof(_Tp)];
	_Tp* __ptr = reinterpret_cast<_Tp*>(__buf);
	__atomic_load(std::__addressof(_M_i), __ptr, int(__m));
 808088e:	7823      	ldrb	r3, [r4, #0]
    ~FutureImpl() {
        // Call destructor of the appropriate unnamed enum's field
        const State s = this->state();
        if (s == State::SUCCEEDED) {
            result_.~ResultT();
        } else if (s == State::FAILED) {
 8080890:	2b02      	cmp	r3, #2
 8080892:	d103      	bne.n	808089c <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x14>
            error_.~Error();
 8080894:	f104 000c 	add.w	r0, r4, #12
 8080898:	f7ff ffef 	bl	808087a <_ZN8particle5ErrorD1Ev>
      {
	memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_p, int(__m));
 808089c:	6865      	ldr	r5, [r4, #4]
        delete onSuccess_.load(std::memory_order_relaxed);
 808089e:	b135      	cbz	r5, 80808ae <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x26>
    class function<_Res(_ArgTypes...)>
 80808a0:	4628      	mov	r0, r5
 80808a2:	f7ff feee 	bl	8080682 <_ZNSt14_Function_baseD1Ev>
 80808a6:	2110      	movs	r1, #16
 80808a8:	4628      	mov	r0, r5
 80808aa:	f000 fdfa 	bl	80814a2 <_ZdlPvj>
 80808ae:	68a5      	ldr	r5, [r4, #8]
        delete onError_.load(std::memory_order_relaxed);
 80808b0:	b135      	cbz	r5, 80808c0 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x38>
 80808b2:	4628      	mov	r0, r5
 80808b4:	f7ff fee5 	bl	8080682 <_ZNSt14_Function_baseD1Ev>
 80808b8:	2110      	movs	r1, #16
 80808ba:	4628      	mov	r0, r5
 80808bc:	f000 fdf1 	bl	80814a2 <_ZdlPvj>
 80808c0:	4620      	mov	r0, r4
 80808c2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80808c6:	2114      	movs	r1, #20
 80808c8:	f000 bdeb 	b.w	80814a2 <_ZdlPvj>
 80808cc:	bd38      	pop	{r3, r4, r5, pc}

080808ce <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>:
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
    }

    // Unwraps promise from an object pointer created via dataPtr() method
    static Promise<ResultT, ContextT> fromDataPtr(void* data) {
 80808ce:	b573      	push	{r0, r1, r4, r5, r6, lr}
	__shared_ptr(const __shared_ptr<_Yp, _Lp>& __r,
		     element_type* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
 80808d0:	460e      	mov	r6, r1
 80808d2:	4604      	mov	r4, r0
 80808d4:	f856 3b04 	ldr.w	r3, [r6], #4
 80808d8:	460d      	mov	r5, r1
 80808da:	a801      	add	r0, sp, #4
 80808dc:	4631      	mov	r1, r6
 80808de:	9300      	str	r3, [sp, #0]
 80808e0:	f7ff feb2 	bl	8080648 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
	__shared_ptr(const __shared_ptr<_Yp, _Lp>& __r) noexcept
	: _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount)
	{ }

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
 80808e4:	9b00      	ldr	r3, [sp, #0]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
 80808e6:	9a01      	ldr	r2, [sp, #4]
      : _M_ptr(__r._M_ptr), _M_refcount()
 80808e8:	6023      	str	r3, [r4, #0]
	__r._M_pi = _M_pi;
 80808ea:	2300      	movs	r3, #0
	_M_pi = __tmp;
 80808ec:	6062      	str	r2, [r4, #4]
      ~__shared_ptr() = default;
 80808ee:	a801      	add	r0, sp, #4
	__r._M_pi = _M_pi;
 80808f0:	9301      	str	r3, [sp, #4]
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
 80808f2:	9300      	str	r3, [sp, #0]
      ~__shared_ptr() = default;
 80808f4:	f7ff fe92 	bl	808061c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80808f8:	4630      	mov	r0, r6
 80808fa:	f7ff fe8f 	bl	808061c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        auto d = static_cast<detail::FutureImplPtr<ResultT, ContextT>*>(data);
        const Promise<ResultT, ContextT> p(*d);
        delete d;
 80808fe:	4628      	mov	r0, r5
 8080900:	2108      	movs	r1, #8
 8080902:	f000 fdce 	bl	80814a2 <_ZdlPvj>
        return p;
    }
 8080906:	4620      	mov	r0, r4
 8080908:	b002      	add	sp, #8
 808090a:	bd70      	pop	{r4, r5, r6, pc}

0808090c <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 808090c:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
 808090e:	b510      	push	{r4, lr}
      if (_M_empty())
 8080910:	b90a      	cbnz	r2, 8080916 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_+0xa>
	__throw_bad_function_call();
 8080912:	f000 fdca 	bl	80814aa <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 8080916:	68c3      	ldr	r3, [r0, #12]
    }
 8080918:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 808091c:	4718      	bx	r3

0808091e <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 808091e:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
 8080920:	6800      	ldr	r0, [r0, #0]
    { return static_cast<_Up&&>(__t); }

  template<typename _Res, typename _Fn, typename... _Args>
    constexpr _Res
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
 8080922:	f100 0110 	add.w	r1, r0, #16
 8080926:	f7ff fff1 	bl	808090c <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
      }
 808092a:	bd08      	pop	{r3, pc}

0808092c <_ZNKSt8functionIFvRKbEEclES1_>:
      if (_M_empty())
 808092c:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
 808092e:	b510      	push	{r4, lr}
      if (_M_empty())
 8080930:	b90a      	cbnz	r2, 8080936 <_ZNKSt8functionIFvRKbEEclES1_+0xa>
	__throw_bad_function_call();
 8080932:	f000 fdba 	bl	80814aa <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 8080936:	68c3      	ldr	r3, [r0, #12]
    }
 8080938:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 808093c:	4718      	bx	r3

0808093e <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 808093e:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
 8080940:	6800      	ldr	r0, [r0, #0]
 8080942:	f100 0110 	add.w	r1, r0, #16
 8080946:	f7ff fff1 	bl	808092c <_ZNKSt8functionIFvRKbEEclES1_>
      }
 808094a:	bd08      	pop	{r3, pc}

0808094c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>:
	__shared_count(_Ptr __p) : _M_pi(0)
 808094c:	b538      	push	{r3, r4, r5, lr}
 808094e:	2300      	movs	r3, #0
 8080950:	4604      	mov	r4, r0
 8080952:	6003      	str	r3, [r0, #0]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
 8080954:	2010      	movs	r0, #16
	__shared_count(_Ptr __p) : _M_pi(0)
 8080956:	460d      	mov	r5, r1
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
 8080958:	f7ff fb9d 	bl	8080096 <_Znwj>
 808095c:	b128      	cbz	r0, 808096a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x1e>
      : _M_use_count(1), _M_weak_count(1) { }
 808095e:	2301      	movs	r3, #1
 8080960:	e9c0 3301 	strd	r3, r3, [r0, #4]
      : _M_ptr(__p) { }
 8080964:	4b02      	ldr	r3, [pc, #8]	; (8080970 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x24>)
 8080966:	60c5      	str	r5, [r0, #12]
 8080968:	6003      	str	r3, [r0, #0]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
 808096a:	6020      	str	r0, [r4, #0]
	}
 808096c:	4620      	mov	r0, r4
 808096e:	bd38      	pop	{r3, r4, r5, pc}
 8080970:	080815e8 	.word	0x080815e8

08080974 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>:
    function<_Res(_ArgTypes...)>::
 8080974:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
 8080976:	2300      	movs	r3, #0
 8080978:	6083      	str	r3, [r0, #8]
      { return !_M_empty(); }
 808097a:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
 808097c:	4604      	mov	r4, r0
 808097e:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
 8080980:	b12b      	cbz	r3, 808098e <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
 8080982:	2202      	movs	r2, #2
 8080984:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
 8080986:	68eb      	ldr	r3, [r5, #12]
 8080988:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
 808098a:	68ab      	ldr	r3, [r5, #8]
 808098c:	60a3      	str	r3, [r4, #8]
    }
 808098e:	4620      	mov	r0, r4
 8080990:	bd38      	pop	{r3, r4, r5, pc}
	...

08080994 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>:
    void setError(Error error) {
 8080994:	b5f0      	push	{r4, r5, r6, r7, lr}
 8080996:	b089      	sub	sp, #36	; 0x24
      { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
 8080998:	6804      	ldr	r4, [r0, #0]
        p_->setError(std::move(error));
 808099a:	4668      	mov	r0, sp
 808099c:	f7ff ff60 	bl	8080860 <_ZN8particle5ErrorC1EOS0_>

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s,
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(std::__addressof(_M_i),
 80809a0:	f04f 0302 	mov.w	r3, #2
 80809a4:	e8d4 2f4f 	ldrexb	r2, [r4]
 80809a8:	2a00      	cmp	r2, #0
 80809aa:	d103      	bne.n	80809b4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x20>
 80809ac:	e8c4 3f41 	strexb	r1, r3, [r4]
 80809b0:	2900      	cmp	r1, #0
 80809b2:	d1f7      	bne.n	80809a4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x10>
        if (this->changeState(State::FAILED)) {
 80809b4:	d125      	bne.n	8080a02 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
            new(&error_) Error(std::move(error));
 80809b6:	f104 050c 	add.w	r5, r4, #12
 80809ba:	4669      	mov	r1, sp
 80809bc:	4628      	mov	r0, r5
 80809be:	f7ff ff4f 	bl	8080860 <_ZN8particle5ErrorC1EOS0_>
	__atomic_store_n(&_M_i, __i, int(__m));
 80809c2:	2301      	movs	r3, #1
 80809c4:	f3bf 8f5b 	dmb	ish
 80809c8:	7063      	strb	r3, [r4, #1]

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, int(__m));
 80809ca:	2000      	movs	r0, #0
 80809cc:	f3bf 8f5b 	dmb	ish
 80809d0:	f104 0308 	add.w	r3, r4, #8
 80809d4:	e853 6f00 	ldrex	r6, [r3]
 80809d8:	e843 0200 	strex	r2, r0, [r3]
 80809dc:	2a00      	cmp	r2, #0
 80809de:	d1f9      	bne.n	80809d4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x40>
 80809e0:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
 80809e4:	b16e      	cbz	r6, 8080a02 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
        return (application_thread_current(nullptr) != 0);
 80809e6:	f7ff fccd 	bl	8080384 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
 80809ea:	b178      	cbz	r0, 8080a0c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x78>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
 80809ec:	4629      	mov	r1, r5
 80809ee:	4630      	mov	r0, r6
 80809f0:	f7ff ff8c 	bl	808090c <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
    class function<_Res(_ArgTypes...)>
 80809f4:	4630      	mov	r0, r6
 80809f6:	f7ff fe44 	bl	8080682 <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
 80809fa:	2110      	movs	r1, #16
 80809fc:	4630      	mov	r0, r6
 80809fe:	f000 fd50 	bl	80814a2 <_ZdlPvj>
        p_->setError(std::move(error));
 8080a02:	4668      	mov	r0, sp
 8080a04:	f7ff ff39 	bl	808087a <_ZN8particle5ErrorD1Ev>
    }
 8080a08:	b009      	add	sp, #36	; 0x24
 8080a0a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	  typename __cv_quals<_Bound_args>::type...>;

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
 8080a0c:	4631      	mov	r1, r6
 8080a0e:	a802      	add	r0, sp, #8
 8080a10:	f7ff ffb0 	bl	8080974 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
 8080a14:	68e0      	ldr	r0, [r4, #12]
 8080a16:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
 8080a1a:	b108      	cbz	r0, 8080a20 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x8c>
 8080a1c:	f000 fd90 	bl	8081540 <strdup>
        type_(type) {
 8080a20:	9006      	str	r0, [sp, #24]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
 8080a22:	2010      	movs	r0, #16
 8080a24:	f8ad 501c 	strh.w	r5, [sp, #28]
 8080a28:	f7ff fb35 	bl	8080096 <_Znwj>
 8080a2c:	4605      	mov	r5, r0
 8080a2e:	b1e8      	cbz	r0, 8080a6c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xd8>
    _Function_base() : _M_manager(nullptr) { }
 8080a30:	2700      	movs	r7, #0
 8080a32:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 8080a34:	2018      	movs	r0, #24
 8080a36:	f7ff fb2e 	bl	8080096 <_Znwj>
 8080a3a:	4604      	mov	r4, r0
 8080a3c:	b188      	cbz	r0, 8080a62 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xce>
	std::swap(_M_functor, __x._M_functor);
 8080a3e:	4601      	mov	r1, r0
    _Function_base() : _M_manager(nullptr) { }
 8080a40:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
 8080a42:	a802      	add	r0, sp, #8
 8080a44:	f7ff fe2c 	bl	80806a0 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8080a48:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
 8080a4a:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
 8080a4c:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8080a4e:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
 8080a50:	9204      	str	r2, [sp, #16]
 8080a52:	68e2      	ldr	r2, [r4, #12]
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 8080a54:	a906      	add	r1, sp, #24
      __b = _GLIBCXX_MOVE(__tmp);
 8080a56:	60e3      	str	r3, [r4, #12]
 8080a58:	f104 0010 	add.w	r0, r4, #16
      __a = _GLIBCXX_MOVE(__b);
 8080a5c:	9205      	str	r2, [sp, #20]
 8080a5e:	f7ff feff 	bl	8080860 <_ZN8particle5ErrorC1EOS0_>
	    _M_invoker = &_My_handler::_M_invoke;
 8080a62:	4b08      	ldr	r3, [pc, #32]	; (8080a84 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf0>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 8080a64:	602c      	str	r4, [r5, #0]
	    _M_invoker = &_My_handler::_M_invoke;
 8080a66:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
 8080a68:	4b07      	ldr	r3, [pc, #28]	; (8080a88 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf4>)
 8080a6a:	60ab      	str	r3, [r5, #8]
    struct _Head_base<_Idx, _Head, false>
 8080a6c:	a806      	add	r0, sp, #24
 8080a6e:	f7ff ff04 	bl	808087a <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
 8080a72:	a802      	add	r0, sp, #8
 8080a74:	f7ff fe05 	bl	8080682 <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
 8080a78:	2200      	movs	r2, #0
 8080a7a:	4629      	mov	r1, r5
 8080a7c:	4803      	ldr	r0, [pc, #12]	; (8080a8c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf8>)
 8080a7e:	f7ff fc89 	bl	8080394 <application_thread_invoke>
 8080a82:	e7b7      	b.n	80809f4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x60>
 8080a84:	0808091f 	.word	0x0808091f
 8080a88:	08080bb5 	.word	0x08080bb5
 8080a8c:	08081185 	.word	0x08081185

08080a90 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>:
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
}

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
 8080a90:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8080a94:	b08a      	sub	sp, #40	; 0x28
 8080a96:	4605      	mov	r5, r0
 8080a98:	460c      	mov	r4, r1
 8080a9a:	4617      	mov	r7, r2
 8080a9c:	4698      	mov	r8, r3
 8080a9e:	f89d 9048 	ldrb.w	r9, [sp, #72]	; 0x48
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
 8080aa2:	f7ff fce3 	bl	808046c <spark_cloud_flag_connected>
 8080aa6:	ae07      	add	r6, sp, #28
    if (!connected()) {
 8080aa8:	4682      	mov	sl, r0
 8080aaa:	bb38      	cbnz	r0, 8080afc <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x6c>
        type_(type) {
 8080aac:	f64f 732e 	movw	r3, #65326	; 0xff2e
 8080ab0:	9005      	str	r0, [sp, #20]
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
 8080ab2:	a905      	add	r1, sp, #20
 8080ab4:	4630      	mov	r0, r6
 8080ab6:	f8ad 3018 	strh.w	r3, [sp, #24]
 8080aba:	f7ff fed1 	bl	8080860 <_ZN8particle5ErrorC1EOS0_>
 8080abe:	2014      	movs	r0, #20
 8080ac0:	f7ff fae9 	bl	8080096 <_Znwj>
 8080ac4:	4604      	mov	r4, r0
 8080ac6:	b148      	cbz	r0, 8080adc <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x4c>
      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
 8080ac8:	2302      	movs	r3, #2
 8080aca:	7003      	strb	r3, [r0, #0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
 8080acc:	2301      	movs	r3, #1
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
 8080ace:	e9c0 aa01 	strd	sl, sl, [r0, #4]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
 8080ad2:	7043      	strb	r3, [r0, #1]
            error_(std::move(error)) {
 8080ad4:	4631      	mov	r1, r6
 8080ad6:	300c      	adds	r0, #12
 8080ad8:	f7ff fec2 	bl	8080860 <_ZN8particle5ErrorC1EOS0_>
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
 8080adc:	4628      	mov	r0, r5
	: __shared_count(__p)
 8080ade:	4621      	mov	r1, r4
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
 8080ae0:	f840 4b04 	str.w	r4, [r0], #4
	: __shared_count(__p)
 8080ae4:	f7ff ff32 	bl	808094c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
 8080ae8:	4630      	mov	r0, r6
 8080aea:	f7ff fec6 	bl	808087a <_ZN8particle5ErrorD1Ev>
    }

    explicit FutureBase(Error::Type error) :
            FutureBase(Error(error)) {
 8080aee:	a805      	add	r0, sp, #20
 8080af0:	f7ff fec3 	bl	808087a <_ZN8particle5ErrorD1Ev>
        p.setError(Error::UNKNOWN);
        p.fromDataPtr(d.handler_data); // Free wrapper object
    }

    return p.future();
}
 8080af4:	4628      	mov	r0, r5
 8080af6:	b00a      	add	sp, #40	; 0x28
 8080af8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    spark_send_event_data d = { sizeof(spark_send_event_data) };
 8080afc:	230c      	movs	r3, #12
 8080afe:	f04f 0a00 	mov.w	sl, #0
            p_(new detail::FutureImpl<ResultT, ContextT>(State::RUNNING)) {
 8080b02:	2014      	movs	r0, #20
 8080b04:	e9cd aa08 	strd	sl, sl, [sp, #32]
 8080b08:	9307      	str	r3, [sp, #28]
 8080b0a:	f7ff fac4 	bl	8080096 <_Znwj>
 8080b0e:	4601      	mov	r1, r0
 8080b10:	b128      	cbz	r0, 8080b1e <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x8e>
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
 8080b12:	e9c0 aa01 	strd	sl, sl, [r0, #4]
 8080b16:	f880 a000 	strb.w	sl, [r0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
 8080b1a:	f880 a001 	strb.w	sl, [r0, #1]
 8080b1e:	a804      	add	r0, sp, #16
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
 8080b20:	9103      	str	r1, [sp, #12]
	: __shared_count(__p)
 8080b22:	f7ff ff13 	bl	808094c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
    d.handler_callback = publishCompletionCallback;
 8080b26:	4b22      	ldr	r3, [pc, #136]	; (8080bb0 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x120>)
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
 8080b28:	2008      	movs	r0, #8
 8080b2a:	9308      	str	r3, [sp, #32]
 8080b2c:	f7ff fab3 	bl	8080096 <_Znwj>
 8080b30:	4682      	mov	sl, r0
 8080b32:	b128      	cbz	r0, 8080b40 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xb0>
      __shared_ptr(const __shared_ptr&) noexcept = default;
 8080b34:	9b03      	ldr	r3, [sp, #12]
 8080b36:	a904      	add	r1, sp, #16
 8080b38:	f840 3b04 	str.w	r3, [r0], #4
 8080b3c:	f7ff fd84 	bl	8080648 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
 8080b40:	4642      	mov	r2, r8
 8080b42:	4639      	mov	r1, r7
 8080b44:	4620      	mov	r0, r4
 8080b46:	9600      	str	r6, [sp, #0]
 8080b48:	fa5f f389 	uxtb.w	r3, r9
    d.handler_data = p.dataPtr();
 8080b4c:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
 8080b50:	f7ff fc94 	bl	808047c <spark_send_event>
 8080b54:	b9b8      	cbnz	r0, 8080b86 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xf6>
	return __atomic_load_n(&_M_i, int(__m));
 8080b56:	9b03      	ldr	r3, [sp, #12]
 8080b58:	785b      	ldrb	r3, [r3, #1]
 8080b5a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8080b5e:	b993      	cbnz	r3, 8080b86 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xf6>
 8080b60:	f64f 739c 	movw	r3, #65436	; 0xff9c
        p.setError(Error::UNKNOWN);
 8080b64:	a905      	add	r1, sp, #20
 8080b66:	a803      	add	r0, sp, #12
 8080b68:	9205      	str	r2, [sp, #20]
 8080b6a:	f8ad 3018 	strh.w	r3, [sp, #24]
 8080b6e:	f7ff ff11 	bl	8080994 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
 8080b72:	a805      	add	r0, sp, #20
 8080b74:	f7ff fe81 	bl	808087a <_ZN8particle5ErrorD1Ev>
        p.fromDataPtr(d.handler_data); // Free wrapper object
 8080b78:	a805      	add	r0, sp, #20
 8080b7a:	9909      	ldr	r1, [sp, #36]	; 0x24
 8080b7c:	f7ff fea7 	bl	80808ce <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
      ~__shared_ptr() = default;
 8080b80:	a806      	add	r0, sp, #24
 8080b82:	f7ff fd4b 	bl	808061c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
      __shared_ptr(const __shared_ptr&) noexcept = default;
 8080b86:	9b03      	ldr	r3, [sp, #12]
 8080b88:	a904      	add	r1, sp, #16
 8080b8a:	a806      	add	r0, sp, #24
 8080b8c:	9305      	str	r3, [sp, #20]
 8080b8e:	f7ff fd5b 	bl	8080648 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
      : _M_ptr(__r._M_ptr), _M_refcount()
 8080b92:	9b05      	ldr	r3, [sp, #20]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
 8080b94:	9a06      	ldr	r2, [sp, #24]
      : _M_ptr(__r._M_ptr), _M_refcount()
 8080b96:	602b      	str	r3, [r5, #0]
	__r._M_pi = _M_pi;
 8080b98:	2300      	movs	r3, #0
	_M_pi = __tmp;
 8080b9a:	606a      	str	r2, [r5, #4]
      ~__shared_ptr() = default;
 8080b9c:	a806      	add	r0, sp, #24
	__r._M_pi = _M_pi;
 8080b9e:	9306      	str	r3, [sp, #24]
	__r._M_ptr = 0;
 8080ba0:	9305      	str	r3, [sp, #20]
      ~__shared_ptr() = default;
 8080ba2:	f7ff fd3b 	bl	808061c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 8080ba6:	a804      	add	r0, sp, #16
 8080ba8:	f7ff fd38 	bl	808061c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
class Promise: public PromiseBase<ResultT, ContextT> {
 8080bac:	e7a2      	b.n	8080af4 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x64>
 8080bae:	bf00      	nop
 8080bb0:	08080c79 	.word	0x08080c79

08080bb4 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
	  switch (__op)
 8080bb4:	2a02      	cmp	r2, #2
	_M_manager(_Any_data& __dest, const _Any_data& __source,
 8080bb6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8080bb8:	4605      	mov	r5, r0
	  switch (__op)
 8080bba:	d007      	beq.n	8080bcc <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x18>
 8080bbc:	2a03      	cmp	r2, #3
 8080bbe:	d018      	beq.n	8080bf2 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x3e>
 8080bc0:	2a01      	cmp	r2, #1
 8080bc2:	d101      	bne.n	8080bc8 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>
	    return __source._M_access<_Functor*>();
 8080bc4:	680b      	ldr	r3, [r1, #0]
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
 8080bc6:	6003      	str	r3, [r0, #0]
	}
 8080bc8:	2000      	movs	r0, #0
 8080bca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	    new _Functor(*__source._M_access<const _Functor*>());
 8080bcc:	2018      	movs	r0, #24
	  __dest._M_access<_Functor*>() =
 8080bce:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
 8080bd0:	f7ff fa61 	bl	8080096 <_Znwj>
 8080bd4:	4604      	mov	r4, r0
 8080bd6:	b150      	cbz	r0, 8080bee <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x3a>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
 8080bd8:	4631      	mov	r1, r6
 8080bda:	f7ff fecb 	bl	8080974 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
 8080bde:	6930      	ldr	r0, [r6, #16]
 8080be0:	f9b6 7014 	ldrsh.w	r7, [r6, #20]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
 8080be4:	b108      	cbz	r0, 8080bea <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x36>
 8080be6:	f000 fcab 	bl	8081540 <strdup>
        type_(type) {
 8080bea:	6120      	str	r0, [r4, #16]
 8080bec:	82a7      	strh	r7, [r4, #20]
	  __dest._M_access<_Functor*>() =
 8080bee:	602c      	str	r4, [r5, #0]
	}
 8080bf0:	e7ea      	b.n	8080bc8 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>
	  delete __victim._M_access<_Functor*>();
 8080bf2:	6804      	ldr	r4, [r0, #0]
 8080bf4:	2c00      	cmp	r4, #0
 8080bf6:	d0e7      	beq.n	8080bc8 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>
 8080bf8:	f104 0010 	add.w	r0, r4, #16
 8080bfc:	f7ff fe3d 	bl	808087a <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
 8080c00:	4620      	mov	r0, r4
 8080c02:	f7ff fd3e 	bl	8080682 <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
 8080c06:	2118      	movs	r1, #24
 8080c08:	4620      	mov	r0, r4
 8080c0a:	f000 fc4a 	bl	80814a2 <_ZdlPvj>
 8080c0e:	e7db      	b.n	8080bc8 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>

08080c10 <_ZNSt8functionIFvRKbEEC1ERKS3_>:
    function<_Res(_ArgTypes...)>::
 8080c10:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
 8080c12:	2300      	movs	r3, #0
 8080c14:	6083      	str	r3, [r0, #8]
      { return !_M_empty(); }
 8080c16:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
 8080c18:	4604      	mov	r4, r0
 8080c1a:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
 8080c1c:	b12b      	cbz	r3, 8080c2a <_ZNSt8functionIFvRKbEEC1ERKS3_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
 8080c1e:	2202      	movs	r2, #2
 8080c20:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
 8080c22:	68eb      	ldr	r3, [r5, #12]
 8080c24:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
 8080c26:	68ab      	ldr	r3, [r5, #8]
 8080c28:	60a3      	str	r3, [r4, #8]
    }
 8080c2a:	4620      	mov	r0, r4
 8080c2c:	bd38      	pop	{r3, r4, r5, pc}

08080c2e <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
	  switch (__op)
 8080c2e:	2a02      	cmp	r2, #2
	_M_manager(_Any_data& __dest, const _Any_data& __source,
 8080c30:	b570      	push	{r4, r5, r6, lr}
 8080c32:	4604      	mov	r4, r0
	  switch (__op)
 8080c34:	d007      	beq.n	8080c46 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x18>
 8080c36:	2a03      	cmp	r2, #3
 8080c38:	d012      	beq.n	8080c60 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x32>
 8080c3a:	2a01      	cmp	r2, #1
 8080c3c:	d101      	bne.n	8080c42 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
	    return __source._M_access<_Functor*>();
 8080c3e:	680b      	ldr	r3, [r1, #0]
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
 8080c40:	6003      	str	r3, [r0, #0]
	}
 8080c42:	2000      	movs	r0, #0
 8080c44:	bd70      	pop	{r4, r5, r6, pc}
	    new _Functor(*__source._M_access<const _Functor*>());
 8080c46:	2014      	movs	r0, #20
	  __dest._M_access<_Functor*>() =
 8080c48:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
 8080c4a:	f7ff fa24 	bl	8080096 <_Znwj>
 8080c4e:	4605      	mov	r5, r0
 8080c50:	b120      	cbz	r0, 8080c5c <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x2e>
 8080c52:	4631      	mov	r1, r6
 8080c54:	f7ff ffdc 	bl	8080c10 <_ZNSt8functionIFvRKbEEC1ERKS3_>
 8080c58:	7c33      	ldrb	r3, [r6, #16]
 8080c5a:	742b      	strb	r3, [r5, #16]
	  __dest._M_access<_Functor*>() =
 8080c5c:	6025      	str	r5, [r4, #0]
	}
 8080c5e:	e7f0      	b.n	8080c42 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
	  delete __victim._M_access<_Functor*>();
 8080c60:	6804      	ldr	r4, [r0, #0]
 8080c62:	2c00      	cmp	r4, #0
 8080c64:	d0ed      	beq.n	8080c42 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
    class function<_Res(_ArgTypes...)>
 8080c66:	4620      	mov	r0, r4
 8080c68:	f7ff fd0b 	bl	8080682 <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
 8080c6c:	2114      	movs	r1, #20
 8080c6e:	4620      	mov	r0, r4
 8080c70:	f000 fc17 	bl	80814a2 <_ZdlPvj>
 8080c74:	e7e5      	b.n	8080c42 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
	...

08080c78 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_>:
void publishCompletionCallback(int error, const void* data, void* callbackData, void* reserved) {
 8080c78:	b5f0      	push	{r4, r5, r6, r7, lr}
 8080c7a:	4604      	mov	r4, r0
 8080c7c:	b089      	sub	sp, #36	; 0x24
 8080c7e:	460d      	mov	r5, r1
    auto p = Promise<bool>::fromDataPtr(callbackData);
 8080c80:	a801      	add	r0, sp, #4
 8080c82:	4611      	mov	r1, r2
 8080c84:	f7ff fe23 	bl	80808ce <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
    if (error != Error::NONE) {
 8080c88:	b1a4      	cbz	r4, 8080cb4 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x3c>
        p.setError(Error((Error::Type)error, (const char*)data));
 8080c8a:	b224      	sxth	r4, r4
        msg_(msg ? (const char*)strdup(msg) : nullptr),
 8080c8c:	b11d      	cbz	r5, 8080c96 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x1e>
 8080c8e:	4628      	mov	r0, r5
 8080c90:	f000 fc56 	bl	8081540 <strdup>
 8080c94:	4605      	mov	r5, r0
 8080c96:	a801      	add	r0, sp, #4
 8080c98:	a903      	add	r1, sp, #12
        type_(type) {
 8080c9a:	9503      	str	r5, [sp, #12]
 8080c9c:	f8ad 4010 	strh.w	r4, [sp, #16]
 8080ca0:	f7ff fe78 	bl	8080994 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
 8080ca4:	a803      	add	r0, sp, #12
 8080ca6:	f7ff fde8 	bl	808087a <_ZN8particle5ErrorD1Ev>
 8080caa:	a802      	add	r0, sp, #8
 8080cac:	f7ff fcb6 	bl	808061c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
 8080cb0:	b009      	add	sp, #36	; 0x24
 8080cb2:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return __atomic_compare_exchange(std::__addressof(_M_i),
 8080cb4:	2301      	movs	r3, #1
      { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
 8080cb6:	9d01      	ldr	r5, [sp, #4]
 8080cb8:	e8d5 2f4f 	ldrexb	r2, [r5]
 8080cbc:	2a00      	cmp	r2, #0
 8080cbe:	d103      	bne.n	8080cc8 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x50>
 8080cc0:	e8c5 3f41 	strexb	r1, r3, [r5]
 8080cc4:	2900      	cmp	r1, #0
 8080cc6:	d1f7      	bne.n	8080cb8 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x40>
        if (this->changeState(State::SUCCEEDED)) {
 8080cc8:	d1ef      	bne.n	8080caa <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
            new(&result_) ResultT(std::move(result));
 8080cca:	732b      	strb	r3, [r5, #12]
	__atomic_store_n(&_M_i, __i, int(__m));
 8080ccc:	f3bf 8f5b 	dmb	ish
 8080cd0:	706b      	strb	r3, [r5, #1]
	return __atomic_exchange_n(&_M_p, __p, int(__m));
 8080cd2:	f3bf 8f5b 	dmb	ish
 8080cd6:	1d2b      	adds	r3, r5, #4
 8080cd8:	e853 6f00 	ldrex	r6, [r3]
 8080cdc:	e843 4200 	strex	r2, r4, [r3]
 8080ce0:	2a00      	cmp	r2, #0
 8080ce2:	d1f9      	bne.n	8080cd8 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x60>
 8080ce4:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
 8080ce8:	2e00      	cmp	r6, #0
 8080cea:	d0de      	beq.n	8080caa <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
        return (application_thread_current(nullptr) != 0);
 8080cec:	4620      	mov	r0, r4
 8080cee:	f7ff fb49 	bl	8080384 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
 8080cf2:	4607      	mov	r7, r0
 8080cf4:	b160      	cbz	r0, 8080d10 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x98>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
 8080cf6:	4630      	mov	r0, r6
 8080cf8:	f105 010c 	add.w	r1, r5, #12
 8080cfc:	f7ff fe16 	bl	808092c <_ZNKSt8functionIFvRKbEEclES1_>
    class function<_Res(_ArgTypes...)>
 8080d00:	4630      	mov	r0, r6
 8080d02:	f7ff fcbe 	bl	8080682 <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
 8080d06:	2110      	movs	r1, #16
 8080d08:	4630      	mov	r0, r6
 8080d0a:	f000 fbca 	bl	80814a2 <_ZdlPvj>
 8080d0e:	e7cc      	b.n	8080caa <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
 8080d10:	4631      	mov	r1, r6
 8080d12:	a803      	add	r0, sp, #12
 8080d14:	f7ff ff7c 	bl	8080c10 <_ZNSt8functionIFvRKbEEC1ERKS3_>
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 8080d18:	7b2b      	ldrb	r3, [r5, #12]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
 8080d1a:	2010      	movs	r0, #16
 8080d1c:	f88d 301c 	strb.w	r3, [sp, #28]
 8080d20:	f7ff f9b9 	bl	8080096 <_Znwj>
 8080d24:	4605      	mov	r5, r0
 8080d26:	b1d0      	cbz	r0, 8080d5e <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xe6>
    _Function_base() : _M_manager(nullptr) { }
 8080d28:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 8080d2a:	2014      	movs	r0, #20
 8080d2c:	f7ff f9b3 	bl	8080096 <_Znwj>
 8080d30:	4604      	mov	r4, r0
 8080d32:	b178      	cbz	r0, 8080d54 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xdc>
	std::swap(_M_functor, __x._M_functor);
 8080d34:	4601      	mov	r1, r0
    _Function_base() : _M_manager(nullptr) { }
 8080d36:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
 8080d38:	a803      	add	r0, sp, #12
 8080d3a:	f7ff fcb1 	bl	80806a0 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8080d3e:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
 8080d40:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
 8080d42:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8080d44:	9b06      	ldr	r3, [sp, #24]
      __a = _GLIBCXX_MOVE(__b);
 8080d46:	9205      	str	r2, [sp, #20]
 8080d48:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
 8080d4a:	60e3      	str	r3, [r4, #12]
 8080d4c:	f89d 301c 	ldrb.w	r3, [sp, #28]
      __a = _GLIBCXX_MOVE(__b);
 8080d50:	9206      	str	r2, [sp, #24]
 8080d52:	7423      	strb	r3, [r4, #16]
	    _M_invoker = &_My_handler::_M_invoke;
 8080d54:	4b06      	ldr	r3, [pc, #24]	; (8080d70 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xf8>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 8080d56:	602c      	str	r4, [r5, #0]
	    _M_invoker = &_My_handler::_M_invoke;
 8080d58:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
 8080d5a:	4b06      	ldr	r3, [pc, #24]	; (8080d74 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xfc>)
 8080d5c:	60ab      	str	r3, [r5, #8]
    class function<_Res(_ArgTypes...)>
 8080d5e:	a803      	add	r0, sp, #12
 8080d60:	f7ff fc8f 	bl	8080682 <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
 8080d64:	2200      	movs	r2, #0
 8080d66:	4629      	mov	r1, r5
 8080d68:	4803      	ldr	r0, [pc, #12]	; (8080d78 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x100>)
 8080d6a:	f7ff fb13 	bl	8080394 <application_thread_invoke>
 8080d6e:	e7c7      	b.n	8080d00 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x88>
 8080d70:	0808093f 	.word	0x0808093f
 8080d74:	08080c2f 	.word	0x08080c2f
 8080d78:	08081185 	.word	0x08081185

08080d7c <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
 8080d7c:	4770      	bx	lr

08080d7e <_ZN9IPAddressD0Ev>:
 8080d7e:	b510      	push	{r4, lr}
 8080d80:	4604      	mov	r4, r0
 8080d82:	2108      	movs	r1, #8
 8080d84:	f000 fb8d 	bl	80814a2 <_ZdlPvj>
 8080d88:	4620      	mov	r0, r4
 8080d8a:	bd10      	pop	{r4, pc}

08080d8c <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
 8080d8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8080d8e:	460e      	mov	r6, r1
 8080d90:	2400      	movs	r4, #0
 8080d92:	f100 0708 	add.w	r7, r0, #8
 8080d96:	1d05      	adds	r5, r0, #4
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
 8080d98:	f817 1d01 	ldrb.w	r1, [r7, #-1]!
 8080d9c:	220a      	movs	r2, #10
 8080d9e:	4630      	mov	r0, r6
 8080da0:	f7ff fc1f 	bl	80805e2 <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 8080da4:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
 8080da6:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
 8080da8:	d101      	bne.n	8080dae <_ZNK9IPAddress7printToER5Print+0x22>
    }
    return n;
}
 8080daa:	4620      	mov	r0, r4
 8080dac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if (n)
 8080dae:	2c00      	cmp	r4, #0
 8080db0:	d0f2      	beq.n	8080d98 <_ZNK9IPAddress7printToER5Print+0xc>
            n += p.print('.');
 8080db2:	212e      	movs	r1, #46	; 0x2e
 8080db4:	4630      	mov	r0, r6
 8080db6:	f7ff fbfb 	bl	80805b0 <_ZN5Print5printEc>
 8080dba:	4404      	add	r4, r0
 8080dbc:	e7ec      	b.n	8080d98 <_ZNK9IPAddress7printToER5Print+0xc>
	...

08080dc0 <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
 8080dc0:	4a02      	ldr	r2, [pc, #8]	; (8080dcc <_ZN9IPAddressC1Ev+0xc>)
 8080dc2:	6002      	str	r2, [r0, #0]
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
 8080dc4:	2200      	movs	r2, #0
 8080dc6:	6042      	str	r2, [r0, #4]
}
 8080dc8:	4770      	bx	lr
 8080dca:	bf00      	nop
 8080dcc:	08081604 	.word	0x08081604

08080dd0 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
 8080dd0:	4a02      	ldr	r2, [pc, #8]	; (8080ddc <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xc>)
 8080dd2:	6002      	str	r2, [r0, #0]
    memcpy(&this->address, &address, sizeof(address));
 8080dd4:	680a      	ldr	r2, [r1, #0]
 8080dd6:	6042      	str	r2, [r0, #4]
}
 8080dd8:	4770      	bx	lr
 8080dda:	bf00      	nop
 8080ddc:	08081604 	.word	0x08081604

08080de0 <_ZN9IPAddressC1Em>:
IPAddress::IPAddress(uint32_t address)
 8080de0:	4a01      	ldr	r2, [pc, #4]	; (8080de8 <_ZN9IPAddressC1Em+0x8>)
    address.ipv4 = ipv4;
 8080de2:	e9c0 2100 	strd	r2, r1, [r0]
}
 8080de6:	4770      	bx	lr
 8080de8:	08081604 	.word	0x08081604

08080dec <_ZN9IPAddress8set_ipv4Ehhhh>:
{
 8080dec:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
 8080dee:	f89d 4008 	ldrb.w	r4, [sp, #8]
 8080df2:	ea44 2403 	orr.w	r4, r4, r3, lsl #8
 8080df6:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8080dfa:	ea44 6401 	orr.w	r4, r4, r1, lsl #24
 8080dfe:	6044      	str	r4, [r0, #4]
}
 8080e00:	bd10      	pop	{r4, pc}
	...

08080e04 <_ZN9IPAddressC1Ehhhh>:
IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
 8080e04:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8080e06:	4d04      	ldr	r5, [pc, #16]	; (8080e18 <_ZN9IPAddressC1Ehhhh+0x14>)
 8080e08:	6005      	str	r5, [r0, #0]
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
 8080e0a:	f89d 5018 	ldrb.w	r5, [sp, #24]
 8080e0e:	9500      	str	r5, [sp, #0]
 8080e10:	f7ff ffec 	bl	8080dec <_ZN9IPAddress8set_ipv4Ehhhh>
}
 8080e14:	b003      	add	sp, #12
 8080e16:	bd30      	pop	{r4, r5, pc}
 8080e18:	08081604 	.word	0x08081604

08080e1c <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 8080e1c:	7441      	strb	r1, [r0, #17]
}
 8080e1e:	4770      	bx	lr

08080e20 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
 8080e20:	4770      	bx	lr

08080e22 <_ZN9USBSerial4readEv>:
{
 8080e22:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
 8080e24:	2100      	movs	r1, #0
 8080e26:	7c00      	ldrb	r0, [r0, #16]
 8080e28:	f7ff fa84 	bl	8080334 <HAL_USB_USART_Receive_Data>
}
 8080e2c:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 8080e30:	bd08      	pop	{r3, pc}

08080e32 <_ZN9USBSerial4peekEv>:

int USBSerial::peek()
{
 8080e32:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
 8080e34:	2101      	movs	r1, #1
 8080e36:	7c00      	ldrb	r0, [r0, #16]
 8080e38:	f7ff fa7c 	bl	8080334 <HAL_USB_USART_Receive_Data>
}
 8080e3c:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 8080e40:	bd08      	pop	{r3, pc}

08080e42 <_ZN9USBSerial17availableForWriteEv>:
{
 8080e42:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
 8080e44:	7c00      	ldrb	r0, [r0, #16]
 8080e46:	f7ff fa6d 	bl	8080324 <HAL_USB_USART_Available_Data_For_Write>
}
 8080e4a:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 8080e4e:	bd08      	pop	{r3, pc}

08080e50 <_ZN9USBSerial9availableEv>:
{
 8080e50:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
 8080e52:	7c00      	ldrb	r0, [r0, #16]
 8080e54:	f7ff fa5e 	bl	8080314 <HAL_USB_USART_Available_Data>
}
 8080e58:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 8080e5c:	bd08      	pop	{r3, pc}

08080e5e <_ZN9USBSerial5writeEh>:
{
 8080e5e:	b538      	push	{r3, r4, r5, lr}
 8080e60:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 8080e62:	7c00      	ldrb	r0, [r0, #16]
{
 8080e64:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 8080e66:	f7ff fa5d 	bl	8080324 <HAL_USB_USART_Available_Data_For_Write>
 8080e6a:	2800      	cmp	r0, #0
 8080e6c:	dc01      	bgt.n	8080e72 <_ZN9USBSerial5writeEh+0x14>
 8080e6e:	7c60      	ldrb	r0, [r4, #17]
 8080e70:	b128      	cbz	r0, 8080e7e <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
 8080e72:	4629      	mov	r1, r5
 8080e74:	7c20      	ldrb	r0, [r4, #16]
 8080e76:	f7ff fa65 	bl	8080344 <HAL_USB_USART_Send_Data>
 8080e7a:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
 8080e7e:	bd38      	pop	{r3, r4, r5, pc}

08080e80 <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
 8080e80:	7c00      	ldrb	r0, [r0, #16]
 8080e82:	f7ff ba67 	b.w	8080354 <HAL_USB_USART_Flush_Data>

08080e86 <_ZN9USBSerialD0Ev>:
 8080e86:	b510      	push	{r4, lr}
 8080e88:	4604      	mov	r4, r0
 8080e8a:	2114      	movs	r1, #20
 8080e8c:	f000 fb09 	bl	80814a2 <_ZdlPvj>
 8080e90:	4620      	mov	r0, r4
 8080e92:	bd10      	pop	{r4, pc}

08080e94 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
 8080e94:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
 8080e96:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8080e9a:	4604      	mov	r4, r0
 8080e9c:	4608      	mov	r0, r1
 8080e9e:	2100      	movs	r1, #0
 8080ea0:	e9c4 1301 	strd	r1, r3, [r4, #4]
 8080ea4:	4b04      	ldr	r3, [pc, #16]	; (8080eb8 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
  _serial = serial;
 8080ea6:	7420      	strb	r0, [r4, #16]
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
 8080ea8:	6023      	str	r3, [r4, #0]
  _blocking = true;
 8080eaa:	2301      	movs	r3, #1
  HAL_USB_USART_Init(_serial, &conf);
 8080eac:	4611      	mov	r1, r2
  _blocking = true;
 8080eae:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
 8080eb0:	f7ff fa20 	bl	80802f4 <HAL_USB_USART_Init>
}
 8080eb4:	4620      	mov	r0, r4
 8080eb6:	bd10      	pop	{r4, pc}
 8080eb8:	08081618 	.word	0x08081618

08080ebc <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
 8080ebc:	2200      	movs	r2, #0
 8080ebe:	7c00      	ldrb	r0, [r0, #16]
 8080ec0:	f7ff ba20 	b.w	8080304 <HAL_USB_USART_Begin>

08080ec4 <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
 8080ec4:	b510      	push	{r4, lr}
 8080ec6:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
 8080ec8:	2214      	movs	r2, #20
 8080eca:	2100      	movs	r1, #0
 8080ecc:	f000 fb0c 	bl	80814e8 <memset>

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t serial_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t serial_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = serial_rx_buffer;
 8080ed0:	4b05      	ldr	r3, [pc, #20]	; (8080ee8 <_Z19acquireSerialBufferv+0x24>)
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
 8080ed2:	4620      	mov	r0, r4
  conf.rx_buffer = serial_rx_buffer;
 8080ed4:	6063      	str	r3, [r4, #4]
  conf.tx_buffer = serial_tx_buffer;
 8080ed6:	4b05      	ldr	r3, [pc, #20]	; (8080eec <_Z19acquireSerialBufferv+0x28>)
 8080ed8:	60e3      	str	r3, [r4, #12]
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
 8080eda:	f240 1301 	movw	r3, #257	; 0x101
 8080ede:	8123      	strh	r3, [r4, #8]
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
 8080ee0:	2381      	movs	r3, #129	; 0x81
 8080ee2:	8223      	strh	r3, [r4, #16]
}
 8080ee4:	bd10      	pop	{r4, pc}
 8080ee6:	bf00      	nop
 8080ee8:	200000d0 	.word	0x200000d0
 8080eec:	200001d1 	.word	0x200001d1

08080ef0 <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
 8080ef0:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 8080ef2:	4d0f      	ldr	r5, [pc, #60]	; (8080f30 <_Z16_fetch_usbserialv+0x40>)
{
 8080ef4:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
 8080ef6:	a801      	add	r0, sp, #4
 8080ef8:	f7ff ffe4 	bl	8080ec4 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 8080efc:	7829      	ldrb	r1, [r5, #0]
 8080efe:	f3bf 8f5b 	dmb	ish
 8080f02:	f011 0401 	ands.w	r4, r1, #1
 8080f06:	d110      	bne.n	8080f2a <_Z16_fetch_usbserialv+0x3a>
 8080f08:	4628      	mov	r0, r5
 8080f0a:	f7ff f8ca 	bl	80800a2 <__cxa_guard_acquire>
 8080f0e:	b160      	cbz	r0, 8080f2a <_Z16_fetch_usbserialv+0x3a>
 8080f10:	4621      	mov	r1, r4
 8080f12:	aa01      	add	r2, sp, #4
 8080f14:	4807      	ldr	r0, [pc, #28]	; (8080f34 <_Z16_fetch_usbserialv+0x44>)
 8080f16:	f7ff ffbd 	bl	8080e94 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 8080f1a:	4628      	mov	r0, r5
 8080f1c:	f7ff f8c6 	bl	80800ac <__cxa_guard_release>
 8080f20:	4a05      	ldr	r2, [pc, #20]	; (8080f38 <_Z16_fetch_usbserialv+0x48>)
 8080f22:	4906      	ldr	r1, [pc, #24]	; (8080f3c <_Z16_fetch_usbserialv+0x4c>)
 8080f24:	4803      	ldr	r0, [pc, #12]	; (8080f34 <_Z16_fetch_usbserialv+0x44>)
 8080f26:	f000 fab7 	bl	8081498 <__aeabi_atexit>
	return _usbserial;
}
 8080f2a:	4802      	ldr	r0, [pc, #8]	; (8080f34 <_Z16_fetch_usbserialv+0x44>)
 8080f2c:	b007      	add	sp, #28
 8080f2e:	bd30      	pop	{r4, r5, pc}
 8080f30:	200000a0 	.word	0x200000a0
 8080f34:	200000a8 	.word	0x200000a8
 8080f38:	20000068 	.word	0x20000068
 8080f3c:	08080e21 	.word	0x08080e21

08080f40 <_Z23acquireUSBSerial1Bufferv>:

#if Wiring_USBSerial1

HAL_USB_USART_Config __attribute__((weak)) acquireUSBSerial1Buffer()
{
 8080f40:	b510      	push	{r4, lr}
 8080f42:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
 8080f44:	2214      	movs	r2, #20
 8080f46:	2100      	movs	r1, #0
 8080f48:	f000 face 	bl	80814e8 <memset>

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t usbserial1_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t usbserial1_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = usbserial1_rx_buffer;
 8080f4c:	4b05      	ldr	r3, [pc, #20]	; (8080f64 <_Z23acquireUSBSerial1Bufferv+0x24>)
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
 8080f4e:	4620      	mov	r0, r4
  conf.rx_buffer = usbserial1_rx_buffer;
 8080f50:	6063      	str	r3, [r4, #4]
  conf.tx_buffer = usbserial1_tx_buffer;
 8080f52:	4b05      	ldr	r3, [pc, #20]	; (8080f68 <_Z23acquireUSBSerial1Bufferv+0x28>)
 8080f54:	60e3      	str	r3, [r4, #12]
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
 8080f56:	f240 1301 	movw	r3, #257	; 0x101
 8080f5a:	8123      	strh	r3, [r4, #8]
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
 8080f5c:	2381      	movs	r3, #129	; 0x81
 8080f5e:	8223      	strh	r3, [r4, #16]
}
 8080f60:	bd10      	pop	{r4, pc}
 8080f62:	bf00      	nop
 8080f64:	20000252 	.word	0x20000252
 8080f68:	20000353 	.word	0x20000353

08080f6c <_Z17_fetch_usbserial1v>:

USBSerial& _fetch_usbserial1()
{
 8080f6c:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 8080f6e:	4c0f      	ldr	r4, [pc, #60]	; (8080fac <_Z17_fetch_usbserial1v+0x40>)
{
 8080f70:	b086      	sub	sp, #24
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
 8080f72:	a801      	add	r0, sp, #4
 8080f74:	f7ff ffe4 	bl	8080f40 <_Z23acquireUSBSerial1Bufferv>
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 8080f78:	7823      	ldrb	r3, [r4, #0]
 8080f7a:	f3bf 8f5b 	dmb	ish
 8080f7e:	07db      	lsls	r3, r3, #31
 8080f80:	d410      	bmi.n	8080fa4 <_Z17_fetch_usbserial1v+0x38>
 8080f82:	4620      	mov	r0, r4
 8080f84:	f7ff f88d 	bl	80800a2 <__cxa_guard_acquire>
 8080f88:	b160      	cbz	r0, 8080fa4 <_Z17_fetch_usbserial1v+0x38>
 8080f8a:	2101      	movs	r1, #1
 8080f8c:	aa01      	add	r2, sp, #4
 8080f8e:	4808      	ldr	r0, [pc, #32]	; (8080fb0 <_Z17_fetch_usbserial1v+0x44>)
 8080f90:	f7ff ff80 	bl	8080e94 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 8080f94:	4620      	mov	r0, r4
 8080f96:	f7ff f889 	bl	80800ac <__cxa_guard_release>
 8080f9a:	4a06      	ldr	r2, [pc, #24]	; (8080fb4 <_Z17_fetch_usbserial1v+0x48>)
 8080f9c:	4906      	ldr	r1, [pc, #24]	; (8080fb8 <_Z17_fetch_usbserial1v+0x4c>)
 8080f9e:	4804      	ldr	r0, [pc, #16]	; (8080fb0 <_Z17_fetch_usbserial1v+0x44>)
 8080fa0:	f000 fa7a 	bl	8081498 <__aeabi_atexit>
  return _usbserial1;
}
 8080fa4:	4802      	ldr	r0, [pc, #8]	; (8080fb0 <_Z17_fetch_usbserial1v+0x44>)
 8080fa6:	b006      	add	sp, #24
 8080fa8:	bd10      	pop	{r4, pc}
 8080faa:	bf00      	nop
 8080fac:	200000a4 	.word	0x200000a4
 8080fb0:	200000bc 	.word	0x200000bc
 8080fb4:	20000068 	.word	0x20000068
 8080fb8:	08080e21 	.word	0x08080e21

08080fbc <_ZN5spark13CellularClass5readyEv>:
        return network_listening(*this, 0, NULL);
    }

    bool ready()
    {
        return network_ready(*this, 0,  NULL);
 8080fbc:	2200      	movs	r2, #0
 8080fbe:	6840      	ldr	r0, [r0, #4]
 8080fc0:	4611      	mov	r1, r2
 8080fc2:	f7ff ba1b 	b.w	80803fc <network_ready>

08080fc6 <_ZN5spark13CellularClass7resolveEPKc>:
    {
        return cellular_command((_CALLBACKPTR_MDM)cb, (void*)param, timeout_ms, format, Fargs...);
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
 8080fc6:	b5f0      	push	{r4, r5, r6, r7, lr}
    {
        HAL_IPAddress ip = {0};
 8080fc8:	2600      	movs	r6, #0
    IPAddress resolve(const char* name)
 8080fca:	b085      	sub	sp, #20
 8080fcc:	4604      	mov	r4, r0
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 8080fce:	4610      	mov	r0, r2
    IPAddress resolve(const char* name)
 8080fd0:	460f      	mov	r7, r1
 8080fd2:	4615      	mov	r5, r2
        HAL_IPAddress ip = {0};
 8080fd4:	9603      	str	r6, [sp, #12]
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 8080fd6:	f000 face 	bl	8081576 <strlen>
 8080fda:	687b      	ldr	r3, [r7, #4]
 8080fdc:	b281      	uxth	r1, r0
 8080fde:	9600      	str	r6, [sp, #0]
 8080fe0:	4628      	mov	r0, r5
 8080fe2:	aa03      	add	r2, sp, #12
 8080fe4:	f7ff f97e 	bl	80802e4 <inet_gethostbyname>
                IPAddress(uint32_t(0)) : IPAddress(ip);
 8080fe8:	b130      	cbz	r0, 8080ff8 <_ZN5spark13CellularClass7resolveEPKc+0x32>
 8080fea:	4631      	mov	r1, r6
 8080fec:	4620      	mov	r0, r4
 8080fee:	f7ff fef7 	bl	8080de0 <_ZN9IPAddressC1Em>
    }
 8080ff2:	4620      	mov	r0, r4
 8080ff4:	b005      	add	sp, #20
 8080ff6:	bdf0      	pop	{r4, r5, r6, r7, pc}
                IPAddress(uint32_t(0)) : IPAddress(ip);
 8080ff8:	4620      	mov	r0, r4
 8080ffa:	a903      	add	r1, sp, #12
 8080ffc:	f7ff fee8 	bl	8080dd0 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
 8081000:	e7f7      	b.n	8080ff2 <_ZN5spark13CellularClass7resolveEPKc+0x2c>

08081002 <_ZN5spark13CellularClass9listeningEv>:
        return network_listening(*this, 0, NULL);
 8081002:	2200      	movs	r2, #0
 8081004:	6840      	ldr	r0, [r0, #4]
 8081006:	4611      	mov	r1, r2
 8081008:	f7ff ba18 	b.w	808043c <network_listening>

0808100c <_ZN5spark13CellularClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
 808100c:	2200      	movs	r2, #0
 808100e:	6840      	ldr	r0, [r0, #4]
 8081010:	4611      	mov	r1, r2
 8081012:	f7ff ba23 	b.w	808045c <network_get_listen_timeout>

08081016 <_ZN5spark13CellularClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
 8081016:	2200      	movs	r2, #0
 8081018:	6840      	ldr	r0, [r0, #4]
 808101a:	f7ff ba17 	b.w	808044c <network_set_listen_timeout>

0808101e <_ZN5spark13CellularClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
 808101e:	2200      	movs	r2, #0
 8081020:	6840      	ldr	r0, [r0, #4]
 8081022:	f081 0101 	eor.w	r1, r1, #1
 8081026:	f7ff ba01 	b.w	808042c <network_listen>

0808102a <_ZN5spark13CellularClass3offEv>:
        network_off(*this, 0, 0, NULL);
 808102a:	2300      	movs	r3, #0
 808102c:	6840      	ldr	r0, [r0, #4]
 808102e:	461a      	mov	r2, r3
 8081030:	4619      	mov	r1, r3
 8081032:	f7ff b9f3 	b.w	808041c <network_off>

08081036 <_ZN5spark13CellularClass2onEv>:
        network_on(*this, 0, 0, NULL);
 8081036:	2300      	movs	r3, #0
 8081038:	6840      	ldr	r0, [r0, #4]
 808103a:	461a      	mov	r2, r3
 808103c:	4619      	mov	r1, r3
 808103e:	f7ff b9e5 	b.w	808040c <network_on>

08081042 <_ZN5spark13CellularClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
 8081042:	2200      	movs	r2, #0
 8081044:	6840      	ldr	r0, [r0, #4]
 8081046:	4611      	mov	r1, r2
 8081048:	f7ff b9c8 	b.w	80803dc <network_connecting>

0808104c <_ZN5spark13CellularClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
 808104c:	2200      	movs	r2, #0
 808104e:	2102      	movs	r1, #2
 8081050:	6840      	ldr	r0, [r0, #4]
 8081052:	f7ff b9cb 	b.w	80803ec <network_disconnect>

08081056 <_ZN5spark13CellularClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
 8081056:	2300      	movs	r3, #0
 8081058:	6840      	ldr	r0, [r0, #4]
 808105a:	461a      	mov	r2, r3
 808105c:	f7ff b9b6 	b.w	80803cc <network_connect>

08081060 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv>:
        return (band_get.ok = true);
    }

    CellularClass Cellular;
    // NetworkClass& Network = Cellular;
}
 8081060:	b510      	push	{r4, lr}
    int tx_total;
    int rx_total;

    CellularDataHal()
    {
        memset(this, 0, sizeof(*this));
 8081062:	2428      	movs	r4, #40	; 0x28
 8081064:	4b07      	ldr	r3, [pc, #28]	; (8081084 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x24>)
 8081066:	4622      	mov	r2, r4
 8081068:	4618      	mov	r0, r3
 808106a:	2100      	movs	r1, #0
 808106c:	f000 fa3c 	bl	80814e8 <memset>
        cid = -1;
 8081070:	f04f 32ff 	mov.w	r2, #4294967295
 8081074:	6042      	str	r2, [r0, #4]
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
 8081076:	2204      	movs	r2, #4
 8081078:	4b03      	ldr	r3, [pc, #12]	; (8081088 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x28>)
        size = sizeof(*this);
 808107a:	8004      	strh	r4, [r0, #0]
 808107c:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_CELLULAR) {
 808107e:	4a03      	ldr	r2, [pc, #12]	; (808108c <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x2c>)
 8081080:	601a      	str	r2, [r3, #0]
 8081082:	bd10      	pop	{r4, pc}
 8081084:	200003dc 	.word	0x200003dc
 8081088:	200003d4 	.word	0x200003d4
 808108c:	08081648 	.word	0x08081648

08081090 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer);
  virtual ~USARTSerial() {};
 8081090:	4770      	bx	lr

08081092 <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 8081092:	7441      	strb	r1, [r0, #17]
}
 8081094:	4770      	bx	lr

08081096 <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
 8081096:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
 8081098:	7c00      	ldrb	r0, [r0, #16]
 808109a:	f7ff f8d3 	bl	8080244 <hal_usart_available_data_for_write>
}
 808109e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80810a2:	bd08      	pop	{r3, pc}

080810a4 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
 80810a4:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
 80810a6:	7c00      	ldrb	r0, [r0, #16]
 80810a8:	f7ff f8a4 	bl	80801f4 <hal_usart_available>
}
 80810ac:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80810b0:	bd08      	pop	{r3, pc}

080810b2 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
 80810b2:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
 80810b4:	7c00      	ldrb	r0, [r0, #16]
 80810b6:	f7ff f8ad 	bl	8080214 <hal_usart_peek>
}
 80810ba:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 80810be:	bd08      	pop	{r3, pc}

080810c0 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
 80810c0:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
 80810c2:	7c00      	ldrb	r0, [r0, #16]
 80810c4:	f7ff f89e 	bl	8080204 <hal_usart_read>
}
 80810c8:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 80810cc:	bd08      	pop	{r3, pc}

080810ce <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
 80810ce:	7c00      	ldrb	r0, [r0, #16]
 80810d0:	f7ff b8a8 	b.w	8080224 <hal_usart_flush>

080810d4 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
 80810d4:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
 80810d6:	7c46      	ldrb	r6, [r0, #17]
{
 80810d8:	4604      	mov	r4, r0
 80810da:	460d      	mov	r5, r1
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
 80810dc:	b12e      	cbz	r6, 80810ea <_ZN11USARTSerial5writeEh+0x16>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
 80810de:	4629      	mov	r1, r5
 80810e0:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
 80810e2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	  return hal_usart_write(_serial, c);
 80810e6:	f7ff b87d 	b.w	80801e4 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
 80810ea:	7c00      	ldrb	r0, [r0, #16]
 80810ec:	f7ff f8aa 	bl	8080244 <hal_usart_available_data_for_write>
 80810f0:	2800      	cmp	r0, #0
 80810f2:	dcf4      	bgt.n	80810de <_ZN11USARTSerial5writeEh+0xa>
}
 80810f4:	4630      	mov	r0, r6
 80810f6:	bd70      	pop	{r4, r5, r6, pc}

080810f8 <_ZN11USARTSerialD0Ev>:
 80810f8:	b510      	push	{r4, lr}
 80810fa:	4604      	mov	r4, r0
 80810fc:	2114      	movs	r1, #20
 80810fe:	f000 f9d0 	bl	80814a2 <_ZdlPvj>
 8081102:	4620      	mov	r0, r4
 8081104:	bd10      	pop	{r4, pc}
	...

08081108 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>:
 8081108:	f04f 0c00 	mov.w	ip, #0
USARTSerial::USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer)
 808110c:	b510      	push	{r4, lr}
 808110e:	4604      	mov	r4, r0
 8081110:	4608      	mov	r0, r1
 8081112:	4611      	mov	r1, r2
 8081114:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8081118:	e9c4 c201 	strd	ip, r2, [r4, #4]
 808111c:	4a04      	ldr	r2, [pc, #16]	; (8081130 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_+0x28>)
  _serial = serial;
 808111e:	7420      	strb	r0, [r4, #16]
USARTSerial::USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer)
 8081120:	6022      	str	r2, [r4, #0]
  _blocking = true;
 8081122:	2201      	movs	r2, #1
 8081124:	7462      	strb	r2, [r4, #17]
  hal_usart_init(serial, rx_buffer, tx_buffer);
 8081126:	461a      	mov	r2, r3
 8081128:	f7ff f854 	bl	80801d4 <hal_usart_init>
}
 808112c:	4620      	mov	r0, r4
 808112e:	bd10      	pop	{r4, pc}
 8081130:	0808167c 	.word	0x0808167c

08081134 <_Z22__fetch_global_Serial1v>:
static hal_usart_ring_buffer_t* serial1_rx_buffer = nullptr;
static hal_usart_ring_buffer_t* serial1_tx_buffer = nullptr;
#endif

USARTSerial& __fetch_global_Serial1()
{
 8081134:	b538      	push	{r3, r4, r5, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
 8081136:	4d0d      	ldr	r5, [pc, #52]	; (808116c <_Z22__fetch_global_Serial1v+0x38>)
 8081138:	7829      	ldrb	r1, [r5, #0]
 808113a:	f3bf 8f5b 	dmb	ish
 808113e:	f011 0401 	ands.w	r4, r1, #1
 8081142:	d111      	bne.n	8081168 <_Z22__fetch_global_Serial1v+0x34>
 8081144:	4628      	mov	r0, r5
 8081146:	f7fe ffac 	bl	80800a2 <__cxa_guard_acquire>
 808114a:	b168      	cbz	r0, 8081168 <_Z22__fetch_global_Serial1v+0x34>
 808114c:	4621      	mov	r1, r4
 808114e:	4a08      	ldr	r2, [pc, #32]	; (8081170 <_Z22__fetch_global_Serial1v+0x3c>)
 8081150:	4b08      	ldr	r3, [pc, #32]	; (8081174 <_Z22__fetch_global_Serial1v+0x40>)
 8081152:	4809      	ldr	r0, [pc, #36]	; (8081178 <_Z22__fetch_global_Serial1v+0x44>)
 8081154:	f7ff ffd8 	bl	8081108 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>
 8081158:	4628      	mov	r0, r5
 808115a:	f7fe ffa7 	bl	80800ac <__cxa_guard_release>
 808115e:	4a07      	ldr	r2, [pc, #28]	; (808117c <_Z22__fetch_global_Serial1v+0x48>)
 8081160:	4907      	ldr	r1, [pc, #28]	; (8081180 <_Z22__fetch_global_Serial1v+0x4c>)
 8081162:	4805      	ldr	r0, [pc, #20]	; (8081178 <_Z22__fetch_global_Serial1v+0x44>)
 8081164:	f000 f998 	bl	8081498 <__aeabi_atexit>
    serial1_tx_buffer = new hal_usart_ring_buffer_t();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
 8081168:	4803      	ldr	r0, [pc, #12]	; (8081178 <_Z22__fetch_global_Serial1v+0x44>)
 808116a:	bd38      	pop	{r3, r4, r5, pc}
 808116c:	20000404 	.word	0x20000404
 8081170:	20000408 	.word	0x20000408
 8081174:	2000048c 	.word	0x2000048c
 8081178:	20000510 	.word	0x20000510
 808117c:	20000068 	.word	0x20000068
 8081180:	08081091 	.word	0x08081091

08081184 <_ZN8particle6detail21futureCallbackWrapperEPv>:
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */

#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
 8081184:	b510      	push	{r4, lr}
      if (_M_empty())
 8081186:	6883      	ldr	r3, [r0, #8]
 8081188:	4604      	mov	r4, r0
 808118a:	b90b      	cbnz	r3, 8081190 <_ZN8particle6detail21futureCallbackWrapperEPv+0xc>
	__throw_bad_function_call();
 808118c:	f000 f98d 	bl	80814aa <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 8081190:	68c3      	ldr	r3, [r0, #12]
 8081192:	4798      	blx	r3
      if (_M_manager)
 8081194:	68a3      	ldr	r3, [r4, #8]
 8081196:	b11b      	cbz	r3, 80811a0 <_ZN8particle6detail21futureCallbackWrapperEPv+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 8081198:	2203      	movs	r2, #3
 808119a:	4621      	mov	r1, r4
 808119c:	4620      	mov	r0, r4
 808119e:	4798      	blx	r3
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
 80811a0:	4620      	mov	r0, r4
}
 80811a2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    delete callbackPtr;
 80811a6:	2110      	movs	r1, #16
 80811a8:	f000 b97b 	b.w	80814a2 <_ZdlPvj>

080811ac <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
 80811ac:	4770      	bx	lr

080811ae <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
 80811ae:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80811b0:	4606      	mov	r6, r0
 80811b2:	4615      	mov	r5, r2
 80811b4:	460c      	mov	r4, r1
 80811b6:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
 80811b8:	42bc      	cmp	r4, r7
 80811ba:	d006      	beq.n	80811ca <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
 80811bc:	6833      	ldr	r3, [r6, #0]
 80811be:	4630      	mov	r0, r6
 80811c0:	689b      	ldr	r3, [r3, #8]
 80811c2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80811c6:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
 80811c8:	e7f6      	b.n	80811b8 <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
 80811ca:	4628      	mov	r0, r5
 80811cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080811ce <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
 80811ce:	2200      	movs	r2, #0
 80811d0:	7c00      	ldrb	r0, [r0, #16]
 80811d2:	f7ff b83f 	b.w	8080254 <hal_i2c_write>

080811d6 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
 80811d6:	2100      	movs	r1, #0
 80811d8:	7c00      	ldrb	r0, [r0, #16]
 80811da:	f7ff b843 	b.w	8080264 <hal_i2c_available>

080811de <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
 80811de:	2100      	movs	r1, #0
 80811e0:	7c00      	ldrb	r0, [r0, #16]
 80811e2:	f7ff b847 	b.w	8080274 <hal_i2c_read>

080811e6 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
 80811e6:	2100      	movs	r1, #0
 80811e8:	7c00      	ldrb	r0, [r0, #16]
 80811ea:	f7ff b84b 	b.w	8080284 <hal_i2c_peek>

080811ee <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
 80811ee:	2100      	movs	r1, #0
 80811f0:	7c00      	ldrb	r0, [r0, #16]
 80811f2:	f7ff b84f 	b.w	8080294 <hal_i2c_flush>

080811f6 <_ZN7TwoWireD0Ev>:
 80811f6:	b510      	push	{r4, lr}
 80811f8:	4604      	mov	r4, r0
 80811fa:	2114      	movs	r1, #20
 80811fc:	f000 f951 	bl	80814a2 <_ZdlPvj>
 8081200:	4620      	mov	r0, r4
 8081202:	bd10      	pop	{r4, pc}

08081204 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
 8081204:	b510      	push	{r4, lr}
 8081206:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 808120a:	4604      	mov	r4, r0
 808120c:	4608      	mov	r0, r1
 808120e:	2100      	movs	r1, #0
 8081210:	e9c4 1301 	strd	r1, r3, [r4, #4]
 8081214:	4b03      	ldr	r3, [pc, #12]	; (8081224 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x20>)
  hal_i2c_init(_i2c, &conf);
 8081216:	4611      	mov	r1, r2
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
 8081218:	6023      	str	r3, [r4, #0]
  _i2c = i2c;
 808121a:	7420      	strb	r0, [r4, #16]
  hal_i2c_init(_i2c, &conf);
 808121c:	f7ff f84a 	bl	80802b4 <hal_i2c_init>
}
 8081220:	4620      	mov	r0, r4
 8081222:	bd10      	pop	{r4, pc}
 8081224:	080816ac 	.word	0x080816ac

08081228 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
 8081228:	2300      	movs	r3, #0
 808122a:	6840      	ldr	r0, [r0, #4]
 808122c:	461a      	mov	r2, r3
 808122e:	f7ff b8cd 	b.w	80803cc <network_connect>

08081232 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
 8081232:	2200      	movs	r2, #0
 8081234:	2102      	movs	r1, #2
 8081236:	6840      	ldr	r0, [r0, #4]
 8081238:	f7ff b8d8 	b.w	80803ec <network_disconnect>

0808123c <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
 808123c:	2200      	movs	r2, #0
 808123e:	6840      	ldr	r0, [r0, #4]
 8081240:	4611      	mov	r1, r2
 8081242:	f7ff b8cb 	b.w	80803dc <network_connecting>

08081246 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
 8081246:	2200      	movs	r2, #0
 8081248:	6840      	ldr	r0, [r0, #4]
 808124a:	4611      	mov	r1, r2
 808124c:	f7ff b8d6 	b.w	80803fc <network_ready>

08081250 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
 8081250:	2300      	movs	r3, #0
 8081252:	6840      	ldr	r0, [r0, #4]
 8081254:	461a      	mov	r2, r3
 8081256:	4619      	mov	r1, r3
 8081258:	f7ff b8d8 	b.w	808040c <network_on>

0808125c <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
 808125c:	2300      	movs	r3, #0
 808125e:	6840      	ldr	r0, [r0, #4]
 8081260:	461a      	mov	r2, r3
 8081262:	4619      	mov	r1, r3
 8081264:	f7ff b8da 	b.w	808041c <network_off>

08081268 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
 8081268:	2200      	movs	r2, #0
 808126a:	6840      	ldr	r0, [r0, #4]
 808126c:	f081 0101 	eor.w	r1, r1, #1
 8081270:	f7ff b8dc 	b.w	808042c <network_listen>

08081274 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
 8081274:	2200      	movs	r2, #0
 8081276:	6840      	ldr	r0, [r0, #4]
 8081278:	f7ff b8e8 	b.w	808044c <network_set_listen_timeout>

0808127c <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
 808127c:	2200      	movs	r2, #0
 808127e:	6840      	ldr	r0, [r0, #4]
 8081280:	4611      	mov	r1, r2
 8081282:	f7ff b8eb 	b.w	808045c <network_get_listen_timeout>

08081286 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
 8081286:	2200      	movs	r2, #0
 8081288:	6840      	ldr	r0, [r0, #4]
 808128a:	4611      	mov	r1, r2
 808128c:	f7ff b8d6 	b.w	808043c <network_listening>

08081290 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
 8081290:	b570      	push	{r4, r5, r6, lr}
 8081292:	4615      	mov	r5, r2
        HAL_IPAddress ip = {0};
 8081294:	2600      	movs	r6, #0
 8081296:	b086      	sub	sp, #24
 8081298:	4604      	mov	r4, r0
    IPAddress addr;
 808129a:	a804      	add	r0, sp, #16
 808129c:	f7ff fd90 	bl	8080dc0 <_ZN9IPAddressC1Ev>
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 80812a0:	4628      	mov	r0, r5
        HAL_IPAddress ip = {0};
 80812a2:	9603      	str	r6, [sp, #12]
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 80812a4:	f000 f967 	bl	8081576 <strlen>
 80812a8:	4b0a      	ldr	r3, [pc, #40]	; (80812d4 <_ZN5spark12NetworkClass7resolveEPKc+0x44>)
 80812aa:	9600      	str	r6, [sp, #0]
 80812ac:	b281      	uxth	r1, r0
 80812ae:	685b      	ldr	r3, [r3, #4]
 80812b0:	4628      	mov	r0, r5
 80812b2:	aa03      	add	r2, sp, #12
 80812b4:	f7ff f816 	bl	80802e4 <inet_gethostbyname>
                IPAddress(uint32_t(0)) : IPAddress(ip);
 80812b8:	b130      	cbz	r0, 80812c8 <_ZN5spark12NetworkClass7resolveEPKc+0x38>
 80812ba:	4631      	mov	r1, r6
 80812bc:	4620      	mov	r0, r4
 80812be:	f7ff fd8f 	bl	8080de0 <_ZN9IPAddressC1Em>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
 80812c2:	4620      	mov	r0, r4
 80812c4:	b006      	add	sp, #24
 80812c6:	bd70      	pop	{r4, r5, r6, pc}
 80812c8:	4620      	mov	r0, r4
 80812ca:	a903      	add	r1, sp, #12
 80812cc:	f7ff fd80 	bl	8080dd0 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
    virtual ~IPAddress() {}
 80812d0:	e7f7      	b.n	80812c2 <_ZN5spark12NetworkClass7resolveEPKc+0x32>
 80812d2:	bf00      	nop
 80812d4:	200003d4 	.word	0x200003d4

080812d8 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
 80812d8:	4b02      	ldr	r3, [pc, #8]	; (80812e4 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
 80812da:	4a03      	ldr	r2, [pc, #12]	; (80812e8 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
 80812dc:	601a      	str	r2, [r3, #0]
 80812de:	2200      	movs	r2, #0
 80812e0:	605a      	str	r2, [r3, #4]

} // spark
 80812e2:	4770      	bx	lr
 80812e4:	20000524 	.word	0x20000524
 80812e8:	080816d4 	.word	0x080816d4

080812ec <_ZN8SPIClassD1Ev>:
  RecursiveMutex _mutex;
#endif

public:
  SPIClass(hal_spi_interface_t spi);
  ~SPIClass() = default;
 80812ec:	b510      	push	{r4, lr}
 80812ee:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (handle_) {
 80812f0:	6880      	ldr	r0, [r0, #8]
 80812f2:	b108      	cbz	r0, 80812f8 <_ZN8SPIClassD1Ev+0xc>
            os_mutex_recursive_destroy(handle_);
 80812f4:	f7fe ff66 	bl	80801c4 <os_mutex_recursive_destroy>
 80812f8:	4620      	mov	r0, r4
 80812fa:	bd10      	pop	{r4, pc}

080812fc <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
 80812fc:	282e      	cmp	r0, #46	; 0x2e
bool pinAvailable(uint16_t pin) {
 80812fe:	b570      	push	{r4, r5, r6, lr}
 8081300:	4604      	mov	r4, r0
  if (pin >= TOTAL_PINS) {
 8081302:	d901      	bls.n	8081308 <pinAvailable+0xc>
    return false;
 8081304:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
 8081306:	bd70      	pop	{r4, r5, r6, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
 8081308:	f1a0 030d 	sub.w	r3, r0, #13
 808130c:	2b02      	cmp	r3, #2
 808130e:	d90b      	bls.n	8081328 <pinAvailable+0x2c>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
 8081310:	2801      	cmp	r0, #1
 8081312:	d826      	bhi.n	8081362 <pinAvailable+0x66>
 8081314:	f000 f898 	bl	8081448 <_Z19__fetch_global_Wirev>
 8081318:	2100      	movs	r1, #0
 808131a:	7c00      	ldrb	r0, [r0, #16]
 808131c:	f7fe ffc2 	bl	80802a4 <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
 8081320:	f080 0001 	eor.w	r0, r0, #1
 8081324:	b2c0      	uxtb	r0, r0
 8081326:	e7ee      	b.n	8081306 <pinAvailable+0xa>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
 8081328:	4e13      	ldr	r6, [pc, #76]	; (8081378 <pinAvailable+0x7c>)
 808132a:	7831      	ldrb	r1, [r6, #0]
 808132c:	f3bf 8f5b 	dmb	ish
 8081330:	f011 0501 	ands.w	r5, r1, #1
 8081334:	d10f      	bne.n	8081356 <pinAvailable+0x5a>
 8081336:	4630      	mov	r0, r6
 8081338:	f7fe feb3 	bl	80800a2 <__cxa_guard_acquire>
 808133c:	b158      	cbz	r0, 8081356 <pinAvailable+0x5a>
 808133e:	4629      	mov	r1, r5
 8081340:	480e      	ldr	r0, [pc, #56]	; (808137c <pinAvailable+0x80>)
 8081342:	f7ff f8d3 	bl	80804ec <_ZN8SPIClassC1E19hal_spi_interface_t>
 8081346:	4630      	mov	r0, r6
 8081348:	f7fe feb0 	bl	80800ac <__cxa_guard_release>
 808134c:	4a0c      	ldr	r2, [pc, #48]	; (8081380 <pinAvailable+0x84>)
 808134e:	490d      	ldr	r1, [pc, #52]	; (8081384 <pinAvailable+0x88>)
 8081350:	480a      	ldr	r0, [pc, #40]	; (808137c <pinAvailable+0x80>)
 8081352:	f000 f8a1 	bl	8081498 <__aeabi_atexit>
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
 8081356:	4b09      	ldr	r3, [pc, #36]	; (808137c <pinAvailable+0x80>)
 8081358:	7818      	ldrb	r0, [r3, #0]
 808135a:	f7fe ffbb 	bl	80802d4 <hal_spi_is_enabled>
 808135e:	2800      	cmp	r0, #0
 8081360:	d1d0      	bne.n	8081304 <pinAvailable+0x8>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
 8081362:	3c12      	subs	r4, #18
 8081364:	2c01      	cmp	r4, #1
 8081366:	d805      	bhi.n	8081374 <pinAvailable+0x78>
 8081368:	f7ff fee4 	bl	8081134 <_Z22__fetch_global_Serial1v>
 808136c:	7c00      	ldrb	r0, [r0, #16]
 808136e:	f7fe ff61 	bl	8080234 <hal_usart_is_enabled>
 8081372:	e7d5      	b.n	8081320 <pinAvailable+0x24>
  return true; // 'pin' is available
 8081374:	2001      	movs	r0, #1
 8081376:	e7c6      	b.n	8081306 <pinAvailable+0xa>
 8081378:	2000052c 	.word	0x2000052c
 808137c:	20000530 	.word	0x20000530
 8081380:	20000068 	.word	0x20000068
 8081384:	080812ed 	.word	0x080812ed

08081388 <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 8081388:	282e      	cmp	r0, #46	; 0x2e
{
 808138a:	b538      	push	{r3, r4, r5, lr}
 808138c:	4604      	mov	r4, r0
 808138e:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 8081390:	d80a      	bhi.n	80813a8 <pinMode+0x20>
 8081392:	29ff      	cmp	r1, #255	; 0xff
 8081394:	d008      	beq.n	80813a8 <pinMode+0x20>
  if( !pinAvailable(pin) ) {
 8081396:	f7ff ffb1 	bl	80812fc <pinAvailable>
 808139a:	b128      	cbz	r0, 80813a8 <pinMode+0x20>
  HAL_Pin_Mode(pin, setMode);
 808139c:	4629      	mov	r1, r5
 808139e:	4620      	mov	r0, r4
}
 80813a0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_Pin_Mode(pin, setMode);
 80813a4:	f7fe bede 	b.w	8080164 <HAL_Pin_Mode>
}
 80813a8:	bd38      	pop	{r3, r4, r5, pc}

080813aa <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
 80813aa:	b538      	push	{r3, r4, r5, lr}
 80813ac:	4604      	mov	r4, r0
 80813ae:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
 80813b0:	f7fe fee0 	bl	8080174 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
 80813b4:	28ff      	cmp	r0, #255	; 0xff
 80813b6:	d010      	beq.n	80813da <digitalWrite+0x30>
            mode == INPUT_PULLDOWN ||
 80813b8:	2806      	cmp	r0, #6
 80813ba:	d804      	bhi.n	80813c6 <digitalWrite+0x1c>
 80813bc:	234d      	movs	r3, #77	; 0x4d
 80813be:	fa23 f000 	lsr.w	r0, r3, r0
 80813c2:	07c3      	lsls	r3, r0, #31
 80813c4:	d409      	bmi.n	80813da <digitalWrite+0x30>
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
 80813c6:	4620      	mov	r0, r4
 80813c8:	f7ff ff98 	bl	80812fc <pinAvailable>
 80813cc:	b128      	cbz	r0, 80813da <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
 80813ce:	4629      	mov	r1, r5
 80813d0:	4620      	mov	r0, r4
}
 80813d2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_GPIO_Write(pin, value);
 80813d6:	f7fe bed5 	b.w	8080184 <HAL_GPIO_Write>
}
 80813da:	bd38      	pop	{r3, r4, r5, pc}

080813dc <_GLOBAL__sub_I_INADDR_NONE>:
#include "spark_wiring_ipaddress.h"

#if !HAL_USE_SOCKET_HAL_POSIX
const IPAddress INADDR_NONE(0, 0, 0, 0);
 80813dc:	2300      	movs	r3, #0
 80813de:	b513      	push	{r0, r1, r4, lr}
 80813e0:	4c07      	ldr	r4, [pc, #28]	; (8081400 <_GLOBAL__sub_I_INADDR_NONE+0x24>)
 80813e2:	461a      	mov	r2, r3
 80813e4:	4619      	mov	r1, r3
 80813e6:	4620      	mov	r0, r4
 80813e8:	9300      	str	r3, [sp, #0]
 80813ea:	f7ff fd0b 	bl	8080e04 <_ZN9IPAddressC1Ehhhh>
 80813ee:	4620      	mov	r0, r4
 80813f0:	4a04      	ldr	r2, [pc, #16]	; (8081404 <_GLOBAL__sub_I_INADDR_NONE+0x28>)
 80813f2:	4905      	ldr	r1, [pc, #20]	; (8081408 <_GLOBAL__sub_I_INADDR_NONE+0x2c>)
 80813f4:	b002      	add	sp, #8
 80813f6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80813fa:	f000 b84d 	b.w	8081498 <__aeabi_atexit>
 80813fe:	bf00      	nop
 8081400:	20000540 	.word	0x20000540
 8081404:	20000068 	.word	0x20000068
 8081408:	08080d7d 	.word	0x08080d7d

0808140c <_ZN12_GLOBAL__N_117defaultWireConfigEv>:
#ifndef SPARK_WIRING_NO_I2C

namespace {

hal_i2c_config_t defaultWireConfig() {
	hal_i2c_config_t config = {
 808140c:	2300      	movs	r3, #0
hal_i2c_config_t defaultWireConfig() {
 808140e:	b570      	push	{r4, r5, r6, lr}
	hal_i2c_config_t config = {
 8081410:	2520      	movs	r5, #32
 8081412:	8043      	strh	r3, [r0, #2]
 8081414:	2314      	movs	r3, #20
		.size = sizeof(hal_i2c_config_t),
		.version = HAL_I2C_CONFIG_VERSION_1,
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 8081416:	4e08      	ldr	r6, [pc, #32]	; (8081438 <_ZN12_GLOBAL__N_117defaultWireConfigEv+0x2c>)
hal_i2c_config_t defaultWireConfig() {
 8081418:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
 808141a:	8003      	strh	r3, [r0, #0]
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 808141c:	4631      	mov	r1, r6
	hal_i2c_config_t config = {
 808141e:	6085      	str	r5, [r0, #8]
 8081420:	6105      	str	r5, [r0, #16]
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 8081422:	4628      	mov	r0, r5
 8081424:	f000 f83f 	bl	80814a6 <_ZnajRKSt9nothrow_t>
		.rx_buffer_size = I2C_BUFFER_LENGTH,
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 8081428:	4631      	mov	r1, r6
		.tx_buffer_size = I2C_BUFFER_LENGTH
	};
 808142a:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 808142c:	4628      	mov	r0, r5
 808142e:	f000 f83a 	bl	80814a6 <_ZnajRKSt9nothrow_t>
	};
 8081432:	60e0      	str	r0, [r4, #12]

	return config;
}
 8081434:	4620      	mov	r0, r4
 8081436:	bd70      	pop	{r4, r5, r6, pc}
 8081438:	08081700 	.word	0x08081700

0808143c <_Z17acquireWireBufferv>:

} // anonymous

hal_i2c_config_t __attribute__((weak)) acquireWireBuffer()
{
 808143c:	b510      	push	{r4, lr}
 808143e:	4604      	mov	r4, r0
	return defaultWireConfig();
 8081440:	f7ff ffe4 	bl	808140c <_ZN12_GLOBAL__N_117defaultWireConfigEv>
}
 8081444:	4620      	mov	r0, r4
 8081446:	bd10      	pop	{r4, pc}

08081448 <_Z19__fetch_global_Wirev>:
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
 8081448:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
 808144a:	4d0f      	ldr	r5, [pc, #60]	; (8081488 <_Z19__fetch_global_Wirev+0x40>)
{
 808144c:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
 808144e:	7829      	ldrb	r1, [r5, #0]
 8081450:	f3bf 8f5b 	dmb	ish
 8081454:	f011 0401 	ands.w	r4, r1, #1
 8081458:	d113      	bne.n	8081482 <_Z19__fetch_global_Wirev+0x3a>
 808145a:	4628      	mov	r0, r5
 808145c:	f7fe fe21 	bl	80800a2 <__cxa_guard_acquire>
 8081460:	b178      	cbz	r0, 8081482 <_Z19__fetch_global_Wirev+0x3a>
 8081462:	a801      	add	r0, sp, #4
 8081464:	f7ff ffea 	bl	808143c <_Z17acquireWireBufferv>
 8081468:	4621      	mov	r1, r4
 808146a:	aa01      	add	r2, sp, #4
 808146c:	4807      	ldr	r0, [pc, #28]	; (808148c <_Z19__fetch_global_Wirev+0x44>)
 808146e:	f7ff fec9 	bl	8081204 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
 8081472:	4628      	mov	r0, r5
 8081474:	f7fe fe1a 	bl	80800ac <__cxa_guard_release>
 8081478:	4a05      	ldr	r2, [pc, #20]	; (8081490 <_Z19__fetch_global_Wirev+0x48>)
 808147a:	4906      	ldr	r1, [pc, #24]	; (8081494 <_Z19__fetch_global_Wirev+0x4c>)
 808147c:	4803      	ldr	r0, [pc, #12]	; (808148c <_Z19__fetch_global_Wirev+0x44>)
 808147e:	f000 f80b 	bl	8081498 <__aeabi_atexit>
	return wire;
}
 8081482:	4802      	ldr	r0, [pc, #8]	; (808148c <_Z19__fetch_global_Wirev+0x44>)
 8081484:	b007      	add	sp, #28
 8081486:	bd30      	pop	{r4, r5, pc}
 8081488:	20000548 	.word	0x20000548
 808148c:	2000054c 	.word	0x2000054c
 8081490:	20000068 	.word	0x20000068
 8081494:	080811ad 	.word	0x080811ad

08081498 <__aeabi_atexit>:
 8081498:	460b      	mov	r3, r1
 808149a:	4601      	mov	r1, r0
 808149c:	4618      	mov	r0, r3
 808149e:	f000 b807 	b.w	80814b0 <__cxa_atexit>

080814a2 <_ZdlPvj>:
 80814a2:	f7fe bdfc 	b.w	808009e <_ZdlPv>

080814a6 <_ZnajRKSt9nothrow_t>:
 80814a6:	f7fe bdf8 	b.w	808009a <_Znaj>

080814aa <_ZSt25__throw_bad_function_callv>:
 80814aa:	b508      	push	{r3, lr}
 80814ac:	f7ff f806 	bl	80804bc <abort>

080814b0 <__cxa_atexit>:
 80814b0:	b510      	push	{r4, lr}
 80814b2:	4604      	mov	r4, r0
 80814b4:	4804      	ldr	r0, [pc, #16]	; (80814c8 <__cxa_atexit+0x18>)
 80814b6:	4613      	mov	r3, r2
 80814b8:	b120      	cbz	r0, 80814c4 <__cxa_atexit+0x14>
 80814ba:	460a      	mov	r2, r1
 80814bc:	2002      	movs	r0, #2
 80814be:	4621      	mov	r1, r4
 80814c0:	f3af 8000 	nop.w
 80814c4:	bd10      	pop	{r4, pc}
 80814c6:	bf00      	nop
 80814c8:	00000000 	.word	0x00000000

080814cc <memcpy>:
 80814cc:	440a      	add	r2, r1
 80814ce:	4291      	cmp	r1, r2
 80814d0:	f100 33ff 	add.w	r3, r0, #4294967295
 80814d4:	d100      	bne.n	80814d8 <memcpy+0xc>
 80814d6:	4770      	bx	lr
 80814d8:	b510      	push	{r4, lr}
 80814da:	f811 4b01 	ldrb.w	r4, [r1], #1
 80814de:	4291      	cmp	r1, r2
 80814e0:	f803 4f01 	strb.w	r4, [r3, #1]!
 80814e4:	d1f9      	bne.n	80814da <memcpy+0xe>
 80814e6:	bd10      	pop	{r4, pc}

080814e8 <memset>:
 80814e8:	4603      	mov	r3, r0
 80814ea:	4402      	add	r2, r0
 80814ec:	4293      	cmp	r3, r2
 80814ee:	d100      	bne.n	80814f2 <memset+0xa>
 80814f0:	4770      	bx	lr
 80814f2:	f803 1b01 	strb.w	r1, [r3], #1
 80814f6:	e7f9      	b.n	80814ec <memset+0x4>

080814f8 <srand>:
 80814f8:	b538      	push	{r3, r4, r5, lr}
 80814fa:	4b0d      	ldr	r3, [pc, #52]	; (8081530 <srand+0x38>)
 80814fc:	4604      	mov	r4, r0
 80814fe:	681d      	ldr	r5, [r3, #0]
 8081500:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8081502:	b97b      	cbnz	r3, 8081524 <srand+0x2c>
 8081504:	2018      	movs	r0, #24
 8081506:	f7fe ffc9 	bl	808049c <malloc>
 808150a:	4a0a      	ldr	r2, [pc, #40]	; (8081534 <srand+0x3c>)
 808150c:	4b0a      	ldr	r3, [pc, #40]	; (8081538 <srand+0x40>)
 808150e:	63a8      	str	r0, [r5, #56]	; 0x38
 8081510:	e9c0 2300 	strd	r2, r3, [r0]
 8081514:	4b09      	ldr	r3, [pc, #36]	; (808153c <srand+0x44>)
 8081516:	2201      	movs	r2, #1
 8081518:	6083      	str	r3, [r0, #8]
 808151a:	230b      	movs	r3, #11
 808151c:	8183      	strh	r3, [r0, #12]
 808151e:	2300      	movs	r3, #0
 8081520:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8081524:	2200      	movs	r2, #0
 8081526:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8081528:	611c      	str	r4, [r3, #16]
 808152a:	615a      	str	r2, [r3, #20]
 808152c:	bd38      	pop	{r3, r4, r5, pc}
 808152e:	bf00      	nop
 8081530:	20000004 	.word	0x20000004
 8081534:	abcd330e 	.word	0xabcd330e
 8081538:	e66d1234 	.word	0xe66d1234
 808153c:	0005deec 	.word	0x0005deec

08081540 <strdup>:
 8081540:	4b02      	ldr	r3, [pc, #8]	; (808154c <strdup+0xc>)
 8081542:	4601      	mov	r1, r0
 8081544:	6818      	ldr	r0, [r3, #0]
 8081546:	f000 b803 	b.w	8081550 <_strdup_r>
 808154a:	bf00      	nop
 808154c:	20000004 	.word	0x20000004

08081550 <_strdup_r>:
 8081550:	b570      	push	{r4, r5, r6, lr}
 8081552:	4604      	mov	r4, r0
 8081554:	4608      	mov	r0, r1
 8081556:	460d      	mov	r5, r1
 8081558:	f000 f80d 	bl	8081576 <strlen>
 808155c:	1c46      	adds	r6, r0, #1
 808155e:	4631      	mov	r1, r6
 8081560:	4620      	mov	r0, r4
 8081562:	f7fe ffb3 	bl	80804cc <_malloc_r>
 8081566:	4604      	mov	r4, r0
 8081568:	b118      	cbz	r0, 8081572 <_strdup_r+0x22>
 808156a:	4632      	mov	r2, r6
 808156c:	4629      	mov	r1, r5
 808156e:	f7ff ffad 	bl	80814cc <memcpy>
 8081572:	4620      	mov	r0, r4
 8081574:	bd70      	pop	{r4, r5, r6, pc}

08081576 <strlen>:
 8081576:	4603      	mov	r3, r0
 8081578:	f813 2b01 	ldrb.w	r2, [r3], #1
 808157c:	2a00      	cmp	r2, #0
 808157e:	d1fb      	bne.n	8081578 <strlen+0x2>
 8081580:	1a18      	subs	r0, r3, r0
 8081582:	3801      	subs	r0, #1
 8081584:	4770      	bx	lr

08081586 <link_code_end>:
	...

08081588 <dynalib_user>:
 8081588:	001d 0808 005d 0808 0085 0808 0089 0808     ....]...........
 8081598:	0000 0000 6548 6c6c 5f6f 6f57 6c72 2164     ....Hello_World!
 80815a8:	6d00 7365 6173 6567 4800 6c65 6f6c 5720     .message.Hello W
 80815b8:	726f 646c 0021 7061 0070 5925 252d 2d6d     orld!.app.%Y-%m-
 80815c8:	6425 2554 3a48 4d25 253a 2553 007a 7361     %dT%H:%M:%S%z.as
 80815d8:	7463 6d69 0065 0000                         ctime...

080815e0 <_ZTVSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE>:
	...
 80815e8:	0845 0808 084b 0808 0889 0808 0859 0808     E...K.......Y...
 80815f8:	0847 0808                                   G...

080815fc <_ZTV9IPAddress>:
	...
 8081604:	0d8d 0808 0d7d 0808 0d7f 0808               ....}.......

08081610 <_ZTV9USBSerial>:
	...
 8081618:	0e21 0808 0e87 0808 0e5f 0808 0565 0808     !......._...e...
 8081628:	0e51 0808 0e23 0808 0e33 0808 0e81 0808     Q...#...3.......
 8081638:	0e43 0808 0e1d 0808                         C.......

08081640 <_ZTVN5spark13CellularClassE>:
	...
 8081648:	1057 0808 104d 0808 1043 0808 0fbd 0808     W...M...C.......
 8081658:	1037 0808 102b 0808 101f 0808 1017 0808     7...+...........
 8081668:	100d 0808 1003 0808 0fc7 0808               ............

08081674 <_ZTV11USARTSerial>:
	...
 808167c:	1091 0808 10f9 0808 10d5 0808 0565 0808     ............e...
 808168c:	10a5 0808 10c1 0808 10b3 0808 10cf 0808     ................
 808169c:	1093 0808 1097 0808                         ........

080816a4 <_ZTV7TwoWire>:
	...
 80816ac:	11ad 0808 11f7 0808 11cf 0808 11af 0808     ................
 80816bc:	11d7 0808 11df 0808 11e7 0808 11ef 0808     ................

080816cc <_ZTVN5spark12NetworkClassE>:
	...
 80816d4:	1229 0808 1233 0808 123d 0808 1247 0808     )...3...=...G...
 80816e4:	1251 0808 125d 0808 1269 0808 1275 0808     Q...]...i...u...
 80816f4:	127d 0808 1287 0808 1291 0808               }...........

08081700 <_ZSt7nothrow>:
	...

08081701 <link_const_variable_data_end>:
 8081701:	00          	.byte	0x00
	...

08081704 <link_constructors_location>:
 8081704:	08080145 	.word	0x08080145
 8081708:	08080529 	.word	0x08080529
 808170c:	08080659 	.word	0x08080659
 8081710:	08080669 	.word	0x08080669
 8081714:	080806c5 	.word	0x080806c5
 8081718:	08081061 	.word	0x08081061
 808171c:	080812d9 	.word	0x080812d9
 8081720:	080813dd 	.word	0x080813dd

08081724 <link_constructors_end>:
	...


c:/Users/tarek/Sustaingineering/ESP32-Pump-Firmware/Particle/target/2.0.0-rc.1/electron/Particle.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  08080000  08080000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  08080018  08080018  00010018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         000026e0  08080020  08080020  00010020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .ARM.exidx    00000008  08082700  08082700  00012700  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .backup       00000004  40024000  08082708  00014000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000068  20000000  0808270c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          0000063c  20000068  20000068  00030068  2**2
                  ALLOC
  7 .module_info_suffix 00000028  08082774  08082774  00022774  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .module_info_crc 00000004  0808279c  0808279c  0002279c  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .debug_info   000d525d  00000000  00000000  000227a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00010bd9  00000000  00000000  000f79fd  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0001573d  00000000  00000000  001085d6  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00001d70  00000000  00000000  0011dd13  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00004378  00000000  00000000  0011fa83  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_macro  00024b7a  00000000  00000000  00123dfb  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   00024cce  00000000  00000000  00148975  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    000adb1d  00000000  00000000  0016d643  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_frame  00004cac  00000000  00000000  0021b160  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08080020 <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 8080020:	4809      	ldr	r0, [pc, #36]	; (8080048 <module_user_pre_init+0x28>)
 8080022:	490a      	ldr	r1, [pc, #40]	; (808004c <module_user_pre_init+0x2c>)
void* module_user_pre_init() {
 8080024:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 8080026:	4288      	cmp	r0, r1
 8080028:	d005      	beq.n	8080036 <module_user_pre_init+0x16>
 808002a:	4a09      	ldr	r2, [pc, #36]	; (8080050 <module_user_pre_init+0x30>)
 808002c:	4282      	cmp	r2, r0
 808002e:	d002      	beq.n	8080036 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
 8080030:	1a12      	subs	r2, r2, r0
 8080032:	f002 fa23 	bl	808247c <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
 8080036:	4807      	ldr	r0, [pc, #28]	; (8080054 <module_user_pre_init+0x34>)
 8080038:	4a07      	ldr	r2, [pc, #28]	; (8080058 <module_user_pre_init+0x38>)
 808003a:	2100      	movs	r1, #0
 808003c:	1a12      	subs	r2, r2, r0
 808003e:	f002 fa2b 	bl	8082498 <memset>
    return &link_heap_start;
}
 8080042:	4806      	ldr	r0, [pc, #24]	; (808005c <module_user_pre_init+0x3c>)
 8080044:	bd08      	pop	{r3, pc}
 8080046:	bf00      	nop
 8080048:	20000000 	.word	0x20000000
 808004c:	0808270c 	.word	0x0808270c
 8080050:	20000068 	.word	0x20000068
 8080054:	20000068 	.word	0x20000068
 8080058:	200006a4 	.word	0x200006a4
 808005c:	200006a4 	.word	0x200006a4

08080060 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
 8080060:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
 8080062:	f000 fec3 	bl	8080dec <module_user_init_hook>

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 8080066:	2500      	movs	r5, #0
 8080068:	4e05      	ldr	r6, [pc, #20]	; (8080080 <module_user_init+0x20>)
 808006a:	4c06      	ldr	r4, [pc, #24]	; (8080084 <module_user_init+0x24>)
 808006c:	1ba4      	subs	r4, r4, r6
 808006e:	08a4      	lsrs	r4, r4, #2
 8080070:	42a5      	cmp	r5, r4
 8080072:	d100      	bne.n	8080076 <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
 8080074:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
 8080076:	f856 3b04 	ldr.w	r3, [r6], #4
 808007a:	4798      	blx	r3
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 808007c:	3501      	adds	r5, #1
 808007e:	e7f7      	b.n	8080070 <module_user_init+0x10>
 8080080:	080826dc 	.word	0x080826dc
 8080084:	080826fc 	.word	0x080826fc

08080088 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
 8080088:	f000 b8e2 	b.w	8080250 <setup>

0808008c <module_user_loop>:
}

void module_user_loop() {
 808008c:	b508      	push	{r3, lr}
    loop();
 808008e:	f000 f8fb 	bl	8080288 <loop>
    _post_loop();
}
 8080092:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
 8080096:	f000 be6b 	b.w	8080d70 <_post_loop>

0808009a <_Znaj>:
 808009a:	f000 bbdd 	b.w	8080858 <malloc>

0808009e <_ZdlPv>:
	return malloc(size);
}

void operator delete(void *p)
{
	free(p);
 808009e:	f000 bbe3 	b.w	8080868 <free>

080800a2 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
 80800a2:	7800      	ldrb	r0, [r0, #0]
 80800a4:	fab0 f080 	clz	r0, r0
 80800a8:	0940      	lsrs	r0, r0, #5
 80800aa:	4770      	bx	lr

080800ac <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
 80800ac:	2301      	movs	r3, #1
 80800ae:	7003      	strb	r3, [r0, #0]
 80800b0:	4770      	bx	lr

080800b2 <_ZN7counter10initializeEv>:
}

void counter::initialize()
{
    /*Nothing to initialize*/
}
 80800b2:	4770      	bx	lr
 80800b4:	0000      	movs	r0, r0
	...

080800b8 <_ZN7counter7readRawEv>:

float counter::readRaw()
{
 80800b8:	b508      	push	{r3, lr}
    return m_data + 0.1;
 80800ba:	6b00      	ldr	r0, [r0, #48]	; 0x30
 80800bc:	f001 fbc6 	bl	808184c <__aeabi_f2d>
 80800c0:	a303      	add	r3, pc, #12	; (adr r3, 80800d0 <_ZN7counter7readRawEv+0x18>)
 80800c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80800c6:	f001 fa63 	bl	8081590 <__adddf3>
 80800ca:	f001 fed1 	bl	8081e70 <__aeabi_d2f>
 80800ce:	bd08      	pop	{r3, pc}
 80800d0:	9999999a 	.word	0x9999999a
 80800d4:	3fb99999 	.word	0x3fb99999

080800d8 <_ZN10farmSensor10initializeEv>:


//template <class T>
void farmSensor::initialize()
{
    pinMode(m_pin, INPUT);
 80800d8:	2100      	movs	r1, #0
 80800da:	8900      	ldrh	r0, [r0, #8]
 80800dc:	f001 b9aa 	b.w	8081434 <pinMode>

080800e0 <_ZN7counterD1Ev>:
class counter : public farmSensor
 80800e0:	b510      	push	{r4, lr}
 80800e2:	4604      	mov	r4, r0
class farmSensor 
 80800e4:	4b05      	ldr	r3, [pc, #20]	; (80800fc <_ZN7counterD1Ev+0x1c>)
 80800e6:	f840 3b1c 	str.w	r3, [r0], #28
 80800ea:	f000 fca7 	bl	8080a3c <_ZN6StringD1Ev>
 80800ee:	f104 000c 	add.w	r0, r4, #12
 80800f2:	f000 fca3 	bl	8080a3c <_ZN6StringD1Ev>
 80800f6:	4620      	mov	r0, r4
 80800f8:	bd10      	pop	{r4, pc}
 80800fa:	bf00      	nop
 80800fc:	0808259c 	.word	0x0808259c

08080100 <_ZN10farmSensor7readRawEv>:
}

//template <class T>
float farmSensor::readRaw()
{   
 8080100:	b508      	push	{r3, lr}
    switch (m_type)
 8080102:	7903      	ldrb	r3, [r0, #4]
 8080104:	b133      	cbz	r3, 8080114 <_ZN10farmSensor7readRawEv+0x14>
 8080106:	2b01      	cmp	r3, #1
 8080108:	d00a      	beq.n	8080120 <_ZN10farmSensor7readRawEv+0x20>
    case analog:
        return (float)analogRead(m_pin);
    default:
        return nanf("Unexpected sensor type");
    }
}
 808010a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        return nanf("Unexpected sensor type");
 808010e:	4806      	ldr	r0, [pc, #24]	; (8080128 <_ZN10farmSensor7readRawEv+0x28>)
 8080110:	f001 ba34 	b.w	808157c <nanf>
        return (float)digitalRead(m_pin);
 8080114:	8900      	ldrh	r0, [r0, #8]
 8080116:	f001 f99e 	bl	8081456 <digitalRead>
        return (float)analogRead(m_pin);
 808011a:	f001 ffb3 	bl	8082084 <__aeabi_i2f>
}
 808011e:	bd08      	pop	{r3, pc}
        return (float)analogRead(m_pin);
 8080120:	8900      	ldrh	r0, [r0, #8]
 8080122:	f001 f9ab 	bl	808147c <analogRead>
 8080126:	e7f8      	b.n	808011a <_ZN10farmSensor7readRawEv+0x1a>
 8080128:	08082524 	.word	0x08082524

0808012c <_ZN10farmSensor4readEv>:

String farmSensor::read()
{
 808012c:	b570      	push	{r4, r5, r6, lr}
    m_data = readRaw();
 808012e:	680b      	ldr	r3, [r1, #0]
{
 8080130:	b098      	sub	sp, #96	; 0x60
    m_data = readRaw();
 8080132:	681b      	ldr	r3, [r3, #0]
{
 8080134:	4605      	mov	r5, r0
    m_data = readRaw();
 8080136:	4608      	mov	r0, r1
{
 8080138:	460c      	mov	r4, r1
    m_data = readRaw();
 808013a:	4798      	blx	r3
};

class StringSumHelper : public String
{
public:
	StringSumHelper(const String &s) : String(s) {}
 808013c:	f104 010c 	add.w	r1, r4, #12
 8080140:	6320      	str	r0, [r4, #48]	; 0x30
 8080142:	a804      	add	r0, sp, #16
 8080144:	f000 fce6 	bl	8080b14 <_ZN6StringC1ERKS_>
    return m_name + String(": ") + String(m_data) + String(" (") + m_unit + String(")") + String(" | ");
 8080148:	4668      	mov	r0, sp
 808014a:	4924      	ldr	r1, [pc, #144]	; (80801dc <_ZN10farmSensor4readEv+0xb0>)
 808014c:	f000 fcc0 	bl	8080ad0 <_ZN6StringC1EPKc>
 8080150:	4669      	mov	r1, sp
 8080152:	a804      	add	r0, sp, #16
 8080154:	f000 fd2c 	bl	8080bb0 <_ZplRK15StringSumHelperRK6String>
 8080158:	4606      	mov	r6, r0
 808015a:	2206      	movs	r2, #6
 808015c:	6b21      	ldr	r1, [r4, #48]	; 0x30
 808015e:	a808      	add	r0, sp, #32
 8080160:	f000 fcf4 	bl	8080b4c <_ZN6StringC1Efi>
 8080164:	a908      	add	r1, sp, #32
 8080166:	4630      	mov	r0, r6
 8080168:	f000 fd22 	bl	8080bb0 <_ZplRK15StringSumHelperRK6String>
 808016c:	4606      	mov	r6, r0
 808016e:	491c      	ldr	r1, [pc, #112]	; (80801e0 <_ZN10farmSensor4readEv+0xb4>)
 8080170:	a80c      	add	r0, sp, #48	; 0x30
 8080172:	f000 fcad 	bl	8080ad0 <_ZN6StringC1EPKc>
 8080176:	a90c      	add	r1, sp, #48	; 0x30
 8080178:	4630      	mov	r0, r6
 808017a:	f000 fd19 	bl	8080bb0 <_ZplRK15StringSumHelperRK6String>
 808017e:	f104 011c 	add.w	r1, r4, #28
 8080182:	f000 fd15 	bl	8080bb0 <_ZplRK15StringSumHelperRK6String>
 8080186:	4604      	mov	r4, r0
 8080188:	4916      	ldr	r1, [pc, #88]	; (80801e4 <_ZN10farmSensor4readEv+0xb8>)
 808018a:	a810      	add	r0, sp, #64	; 0x40
 808018c:	f000 fca0 	bl	8080ad0 <_ZN6StringC1EPKc>
 8080190:	a910      	add	r1, sp, #64	; 0x40
 8080192:	4620      	mov	r0, r4
 8080194:	f000 fd0c 	bl	8080bb0 <_ZplRK15StringSumHelperRK6String>
 8080198:	4604      	mov	r4, r0
 808019a:	4913      	ldr	r1, [pc, #76]	; (80801e8 <_ZN10farmSensor4readEv+0xbc>)
 808019c:	a814      	add	r0, sp, #80	; 0x50
 808019e:	f000 fc97 	bl	8080ad0 <_ZN6StringC1EPKc>
 80801a2:	a914      	add	r1, sp, #80	; 0x50
 80801a4:	4620      	mov	r0, r4
 80801a6:	f000 fd03 	bl	8080bb0 <_ZplRK15StringSumHelperRK6String>
 80801aa:	4601      	mov	r1, r0
 80801ac:	4628      	mov	r0, r5
 80801ae:	f000 fcb1 	bl	8080b14 <_ZN6StringC1ERKS_>
 80801b2:	a814      	add	r0, sp, #80	; 0x50
 80801b4:	f000 fc42 	bl	8080a3c <_ZN6StringD1Ev>
 80801b8:	a810      	add	r0, sp, #64	; 0x40
 80801ba:	f000 fc3f 	bl	8080a3c <_ZN6StringD1Ev>
 80801be:	a80c      	add	r0, sp, #48	; 0x30
 80801c0:	f000 fc3c 	bl	8080a3c <_ZN6StringD1Ev>
 80801c4:	a808      	add	r0, sp, #32
 80801c6:	f000 fc39 	bl	8080a3c <_ZN6StringD1Ev>
 80801ca:	4668      	mov	r0, sp
 80801cc:	f000 fc36 	bl	8080a3c <_ZN6StringD1Ev>
class StringSumHelper : public String
 80801d0:	a804      	add	r0, sp, #16
 80801d2:	f000 fc33 	bl	8080a3c <_ZN6StringD1Ev>
}
 80801d6:	4628      	mov	r0, r5
 80801d8:	b018      	add	sp, #96	; 0x60
 80801da:	bd70      	pop	{r4, r5, r6, pc}
 80801dc:	0808253b 	.word	0x0808253b
 80801e0:	0808253e 	.word	0x0808253e
 80801e4:	08082541 	.word	0x08082541
 80801e8:	08082543 	.word	0x08082543

080801ec <_ZN7counterC1Ei6StringS0_c>:
counter::counter(int pin, String name, String unit, char shortcut)
 80801ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    farmSensor(){}
 80801f0:	4605      	mov	r5, r0
 80801f2:	4604      	mov	r4, r0
 80801f4:	4617      	mov	r7, r2
 80801f6:	4688      	mov	r8, r1
 80801f8:	461e      	mov	r6, r3
 80801fa:	4b12      	ldr	r3, [pc, #72]	; (8080244 <_ZN7counterC1Ei6StringS0_c+0x58>)
 80801fc:	f8df a04c 	ldr.w	sl, [pc, #76]	; 808024c <_ZN7counterC1Ei6StringS0_c+0x60>
 8080200:	f845 3b0c 	str.w	r3, [r5], #12
 8080204:	4651      	mov	r1, sl
 8080206:	f104 091c 	add.w	r9, r4, #28
 808020a:	4628      	mov	r0, r5
 808020c:	f000 fc60 	bl	8080ad0 <_ZN6StringC1EPKc>
 8080210:	4651      	mov	r1, sl
 8080212:	4648      	mov	r0, r9
 8080214:	f000 fc5c 	bl	8080ad0 <_ZN6StringC1EPKc>
 8080218:	4b0b      	ldr	r3, [pc, #44]	; (8080248 <_ZN7counterC1Ei6StringS0_c+0x5c>)
    m_name = name;
 808021a:	4639      	mov	r1, r7
counter::counter(int pin, String name, String unit, char shortcut)
 808021c:	6023      	str	r3, [r4, #0]
    m_name = name;
 808021e:	4628      	mov	r0, r5
    m_pin = pin;
 8080220:	f8c4 8008 	str.w	r8, [r4, #8]
    m_name = name;
 8080224:	f000 fc67 	bl	8080af6 <_ZN6StringaSERKS_>
    m_unit = unit;
 8080228:	4631      	mov	r1, r6
 808022a:	4648      	mov	r0, r9
 808022c:	f000 fc63 	bl	8080af6 <_ZN6StringaSERKS_>
    m_shortcut = shortcut;
 8080230:	f89d 3020 	ldrb.w	r3, [sp, #32]
}
 8080234:	4620      	mov	r0, r4
    m_shortcut = shortcut;
 8080236:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
    m_data = 0.0;
 808023a:	2300      	movs	r3, #0
 808023c:	6323      	str	r3, [r4, #48]	; 0x30
}
 808023e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8080242:	bf00      	nop
 8080244:	0808259c 	.word	0x0808259c
 8080248:	080825ac 	.word	0x080825ac
 808024c:	0808256d 	.word	0x0808256d

08080250 <setup>:
counter counter5(0, "Counter4", "T", 'g');
counter counter6(0, "Counter4", "T", 'h');
#endif

void setup()
{
 8080250:	b508      	push	{r3, lr}
  pinMode(BUILTIN_LED, OUTPUT);
 8080252:	2101      	movs	r1, #1
 8080254:	2007      	movs	r0, #7
 8080256:	f001 f8ed 	bl	8081434 <pinMode>
  Serial.begin(115200);
 808025a:	f000 feb3 	bl	8080fc4 <_Z16_fetch_usbserialv>
 808025e:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
 8080262:	f000 fe95 	bl	8080f90 <_ZN9USBSerial5beginEl>
  Serial.println("\nHello Sustaingineering!\n");
 8080266:	f000 fead 	bl	8080fc4 <_Z16_fetch_usbserialv>
 808026a:	4905      	ldr	r1, [pc, #20]	; (8080280 <setup+0x30>)
 808026c:	f000 fce5 	bl	8080c3a <_ZN5Print7printlnEPKc>
  Serial.println("LoRa Initialized.\n");
#endif // LORA

  //Sensors Initializers go here.
  
  Serial.println("Setup Done!\n");
 8080270:	f000 fea8 	bl	8080fc4 <_Z16_fetch_usbserialv>
}
 8080274:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  Serial.println("Setup Done!\n");
 8080278:	4902      	ldr	r1, [pc, #8]	; (8080284 <setup+0x34>)
 808027a:	f000 bcde 	b.w	8080c3a <_ZN5Print7printlnEPKc>
 808027e:	bf00      	nop
 8080280:	08082547 	.word	0x08082547
 8080284:	08082561 	.word	0x08082561

08080288 <loop>:

void loop()
{
 8080288:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  message = "";
 808028a:	4c30      	ldr	r4, [pc, #192]	; (808034c <loop+0xc4>)
 808028c:	4930      	ldr	r1, [pc, #192]	; (8080350 <loop+0xc8>)
 808028e:	4620      	mov	r0, r4
 8080290:	f000 fc4b 	bl	8080b2a <_ZN6StringaSEPKc>
  //Sampling Sensors
#if COUNTERS
  message += counter1.read();
 8080294:	4668      	mov	r0, sp
 8080296:	492f      	ldr	r1, [pc, #188]	; (8080354 <loop+0xcc>)
 8080298:	f7ff ff48 	bl	808012c <_ZN10farmSensor4readEv>
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
 808029c:	4669      	mov	r1, sp
 808029e:	4620      	mov	r0, r4
 80802a0:	f000 fc82 	bl	8080ba8 <_ZN6String6concatERKS_>
 80802a4:	4668      	mov	r0, sp
 80802a6:	f000 fbc9 	bl	8080a3c <_ZN6StringD1Ev>
  message += counter2.read();
 80802aa:	4668      	mov	r0, sp
 80802ac:	492a      	ldr	r1, [pc, #168]	; (8080358 <loop+0xd0>)
 80802ae:	f7ff ff3d 	bl	808012c <_ZN10farmSensor4readEv>
 80802b2:	4669      	mov	r1, sp
 80802b4:	4620      	mov	r0, r4
 80802b6:	f000 fc77 	bl	8080ba8 <_ZN6String6concatERKS_>
 80802ba:	4668      	mov	r0, sp
 80802bc:	f000 fbbe 	bl	8080a3c <_ZN6StringD1Ev>
  message += counter3.read();
 80802c0:	4668      	mov	r0, sp
 80802c2:	4926      	ldr	r1, [pc, #152]	; (808035c <loop+0xd4>)
 80802c4:	f7ff ff32 	bl	808012c <_ZN10farmSensor4readEv>
 80802c8:	4669      	mov	r1, sp
 80802ca:	4620      	mov	r0, r4
 80802cc:	f000 fc6c 	bl	8080ba8 <_ZN6String6concatERKS_>
 80802d0:	4668      	mov	r0, sp
 80802d2:	f000 fbb3 	bl	8080a3c <_ZN6StringD1Ev>
  message += counter4.read();
 80802d6:	4668      	mov	r0, sp
 80802d8:	4921      	ldr	r1, [pc, #132]	; (8080360 <loop+0xd8>)
 80802da:	f7ff ff27 	bl	808012c <_ZN10farmSensor4readEv>
 80802de:	4669      	mov	r1, sp
 80802e0:	4620      	mov	r0, r4
 80802e2:	f000 fc61 	bl	8080ba8 <_ZN6String6concatERKS_>
 80802e6:	4668      	mov	r0, sp
 80802e8:	f000 fba8 	bl	8080a3c <_ZN6StringD1Ev>
  message += counter5.read();
 80802ec:	4668      	mov	r0, sp
 80802ee:	491d      	ldr	r1, [pc, #116]	; (8080364 <loop+0xdc>)
 80802f0:	f7ff ff1c 	bl	808012c <_ZN10farmSensor4readEv>
 80802f4:	4669      	mov	r1, sp
 80802f6:	4620      	mov	r0, r4
 80802f8:	f000 fc56 	bl	8080ba8 <_ZN6String6concatERKS_>
 80802fc:	4668      	mov	r0, sp
 80802fe:	f000 fb9d 	bl	8080a3c <_ZN6StringD1Ev>
  message += counter6.read();
 8080302:	4668      	mov	r0, sp
 8080304:	4918      	ldr	r1, [pc, #96]	; (8080368 <loop+0xe0>)
 8080306:	f7ff ff11 	bl	808012c <_ZN10farmSensor4readEv>
 808030a:	4669      	mov	r1, sp
 808030c:	4620      	mov	r0, r4
 808030e:	f000 fc4b 	bl	8080ba8 <_ZN6String6concatERKS_>
 8080312:	4668      	mov	r0, sp
 8080314:	f000 fb92 	bl	8080a3c <_ZN6StringD1Ev>

#if ERTC
  message += rtc.getTimeStamp();
#endif

  message += String("\n");
 8080318:	4668      	mov	r0, sp
 808031a:	4914      	ldr	r1, [pc, #80]	; (808036c <loop+0xe4>)
 808031c:	f000 fbd8 	bl	8080ad0 <_ZN6StringC1EPKc>
 8080320:	4669      	mov	r1, sp
 8080322:	4620      	mov	r0, r4
 8080324:	f000 fc40 	bl	8080ba8 <_ZN6String6concatERKS_>
 8080328:	4668      	mov	r0, sp
 808032a:	f000 fb87 	bl	8080a3c <_ZN6StringD1Ev>
  Serial.print(message);
 808032e:	f000 fe49 	bl	8080fc4 <_Z16_fetch_usbserialv>
 8080332:	6821      	ldr	r1, [r4, #0]
 8080334:	f000 fc6e 	bl	8080c14 <_ZN5Print5printEPKc>
  packets[4] = counter5.pack();
  packets[5] = counter6.pack();
  LoRaStatus = responder.respond(packets, NUMBER_OF_PACKETS);
#endif //GSM
#else //LORA
  delay(1000);
 8080338:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 808033c:	f000 fcb6 	bl	8080cac <delay>
#endif //LORA

  //restarter.takeAction(LoRaStatus);
  Serial.println();
 8080340:	f000 fe40 	bl	8080fc4 <_Z16_fetch_usbserialv>
 8080344:	f000 fc6d 	bl	8080c22 <_ZN5Print7printlnEv>
}
 8080348:	b004      	add	sp, #16
 808034a:	bd10      	pop	{r4, pc}
 808034c:	200001a4 	.word	0x200001a4
 8080350:	0808256d 	.word	0x0808256d
 8080354:	2000006c 	.word	0x2000006c
 8080358:	200000a0 	.word	0x200000a0
 808035c:	200000d4 	.word	0x200000d4
 8080360:	20000108 	.word	0x20000108
 8080364:	2000013c 	.word	0x2000013c
 8080368:	20000170 	.word	0x20000170
 808036c:	0808256c 	.word	0x0808256c

08080370 <_GLOBAL__sub_I__ZN10farmSensorC2Ei10sensorType6StringS1_c>:
 8080370:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
String message;
 8080374:	4d5e      	ldr	r5, [pc, #376]	; (80804f0 <_GLOBAL__sub_I__ZN10farmSensorC2Ei10sensorType6StringS1_c+0x180>)
}
 8080376:	b08a      	sub	sp, #40	; 0x28
String message;
 8080378:	4c5e      	ldr	r4, [pc, #376]	; (80804f4 <_GLOBAL__sub_I__ZN10farmSensorC2Ei10sensorType6StringS1_c+0x184>)
inline int32_t pinReadFast(pin_t _pin)
{
    return ((PIN_MAP[_pin].gpio_peripheral->IDR & PIN_MAP[_pin].gpio_pin) == 0 ? LOW : HIGH);
}
#elif defined(STM32F2XX)
static Hal_Pin_Info* PIN_MAP = HAL_Pin_Map();
 808037a:	f000 f8d9 	bl	8080530 <HAL_Pin_Map>
 808037e:	4628      	mov	r0, r5
 8080380:	495d      	ldr	r1, [pc, #372]	; (80804f8 <_GLOBAL__sub_I__ZN10farmSensorC2Ei10sensorType6StringS1_c+0x188>)
 8080382:	f000 fba5 	bl	8080ad0 <_ZN6StringC1EPKc>
counter counter1(0, "Counter1", "T", 'c');
 8080386:	4e5d      	ldr	r6, [pc, #372]	; (80804fc <_GLOBAL__sub_I__ZN10farmSensorC2Ei10sensorType6StringS1_c+0x18c>)
String message;
 8080388:	4622      	mov	r2, r4
 808038a:	4628      	mov	r0, r5
 808038c:	495c      	ldr	r1, [pc, #368]	; (8080500 <_GLOBAL__sub_I__ZN10farmSensorC2Ei10sensorType6StringS1_c+0x190>)
 808038e:	f001 f8eb 	bl	8081568 <__aeabi_atexit>
counter counter1(0, "Counter1", "T", 'c');
 8080392:	495c      	ldr	r1, [pc, #368]	; (8080504 <_GLOBAL__sub_I__ZN10farmSensorC2Ei10sensorType6StringS1_c+0x194>)
 8080394:	a802      	add	r0, sp, #8
 8080396:	f000 fb9b 	bl	8080ad0 <_ZN6StringC1EPKc>
 808039a:	4631      	mov	r1, r6
 808039c:	a806      	add	r0, sp, #24
 808039e:	f000 fb97 	bl	8080ad0 <_ZN6StringC1EPKc>
 80803a2:	2363      	movs	r3, #99	; 0x63
 80803a4:	4f58      	ldr	r7, [pc, #352]	; (8080508 <_GLOBAL__sub_I__ZN10farmSensorC2Ei10sensorType6StringS1_c+0x198>)
 80803a6:	aa02      	add	r2, sp, #8
 80803a8:	2100      	movs	r1, #0
 80803aa:	9300      	str	r3, [sp, #0]
 80803ac:	4638      	mov	r0, r7
 80803ae:	ab06      	add	r3, sp, #24
 80803b0:	f7ff ff1c 	bl	80801ec <_ZN7counterC1Ei6StringS0_c>
 80803b4:	4d55      	ldr	r5, [pc, #340]	; (808050c <_GLOBAL__sub_I__ZN10farmSensorC2Ei10sensorType6StringS1_c+0x19c>)
 80803b6:	a806      	add	r0, sp, #24
 80803b8:	f000 fb40 	bl	8080a3c <_ZN6StringD1Ev>
 80803bc:	a802      	add	r0, sp, #8
 80803be:	f000 fb3d 	bl	8080a3c <_ZN6StringD1Ev>
 80803c2:	4622      	mov	r2, r4
 80803c4:	4629      	mov	r1, r5
 80803c6:	4638      	mov	r0, r7
 80803c8:	f001 f8ce 	bl	8081568 <__aeabi_atexit>
counter counter2(0, "Counter2", "T", 'd');
 80803cc:	4950      	ldr	r1, [pc, #320]	; (8080510 <_GLOBAL__sub_I__ZN10farmSensorC2Ei10sensorType6StringS1_c+0x1a0>)
 80803ce:	a802      	add	r0, sp, #8
 80803d0:	f000 fb7e 	bl	8080ad0 <_ZN6StringC1EPKc>
 80803d4:	4631      	mov	r1, r6
 80803d6:	a806      	add	r0, sp, #24
 80803d8:	f000 fb7a 	bl	8080ad0 <_ZN6StringC1EPKc>
 80803dc:	2364      	movs	r3, #100	; 0x64
 80803de:	4f4d      	ldr	r7, [pc, #308]	; (8080514 <_GLOBAL__sub_I__ZN10farmSensorC2Ei10sensorType6StringS1_c+0x1a4>)
 80803e0:	aa02      	add	r2, sp, #8
 80803e2:	2100      	movs	r1, #0
 80803e4:	9300      	str	r3, [sp, #0]
 80803e6:	4638      	mov	r0, r7
 80803e8:	ab06      	add	r3, sp, #24
 80803ea:	f7ff feff 	bl	80801ec <_ZN7counterC1Ei6StringS0_c>
 80803ee:	a806      	add	r0, sp, #24
 80803f0:	f000 fb24 	bl	8080a3c <_ZN6StringD1Ev>
 80803f4:	a802      	add	r0, sp, #8
 80803f6:	f000 fb21 	bl	8080a3c <_ZN6StringD1Ev>
 80803fa:	4622      	mov	r2, r4
 80803fc:	4629      	mov	r1, r5
 80803fe:	4638      	mov	r0, r7
 8080400:	f001 f8b2 	bl	8081568 <__aeabi_atexit>
counter counter3(0, "Counter3", "T", 'e');
 8080404:	4944      	ldr	r1, [pc, #272]	; (8080518 <_GLOBAL__sub_I__ZN10farmSensorC2Ei10sensorType6StringS1_c+0x1a8>)
 8080406:	a802      	add	r0, sp, #8
 8080408:	f000 fb62 	bl	8080ad0 <_ZN6StringC1EPKc>
 808040c:	4631      	mov	r1, r6
 808040e:	a806      	add	r0, sp, #24
 8080410:	f000 fb5e 	bl	8080ad0 <_ZN6StringC1EPKc>
 8080414:	2365      	movs	r3, #101	; 0x65
 8080416:	4f41      	ldr	r7, [pc, #260]	; (808051c <_GLOBAL__sub_I__ZN10farmSensorC2Ei10sensorType6StringS1_c+0x1ac>)
 8080418:	aa02      	add	r2, sp, #8
 808041a:	2100      	movs	r1, #0
 808041c:	9300      	str	r3, [sp, #0]
 808041e:	4638      	mov	r0, r7
 8080420:	ab06      	add	r3, sp, #24
 8080422:	f7ff fee3 	bl	80801ec <_ZN7counterC1Ei6StringS0_c>
 8080426:	a806      	add	r0, sp, #24
 8080428:	f000 fb08 	bl	8080a3c <_ZN6StringD1Ev>
 808042c:	a802      	add	r0, sp, #8
 808042e:	f000 fb05 	bl	8080a3c <_ZN6StringD1Ev>
 8080432:	4638      	mov	r0, r7
counter counter4(0, "Counter4", "T", 'f');
 8080434:	4f3a      	ldr	r7, [pc, #232]	; (8080520 <_GLOBAL__sub_I__ZN10farmSensorC2Ei10sensorType6StringS1_c+0x1b0>)
counter counter3(0, "Counter3", "T", 'e');
 8080436:	4622      	mov	r2, r4
 8080438:	4629      	mov	r1, r5
 808043a:	f001 f895 	bl	8081568 <__aeabi_atexit>
counter counter4(0, "Counter4", "T", 'f');
 808043e:	4639      	mov	r1, r7
 8080440:	a802      	add	r0, sp, #8
 8080442:	f000 fb45 	bl	8080ad0 <_ZN6StringC1EPKc>
 8080446:	4631      	mov	r1, r6
 8080448:	a806      	add	r0, sp, #24
 808044a:	f000 fb41 	bl	8080ad0 <_ZN6StringC1EPKc>
 808044e:	2366      	movs	r3, #102	; 0x66
 8080450:	f8df 80d4 	ldr.w	r8, [pc, #212]	; 8080528 <_GLOBAL__sub_I__ZN10farmSensorC2Ei10sensorType6StringS1_c+0x1b8>
 8080454:	aa02      	add	r2, sp, #8
 8080456:	2100      	movs	r1, #0
 8080458:	9300      	str	r3, [sp, #0]
 808045a:	4640      	mov	r0, r8
 808045c:	ab06      	add	r3, sp, #24
 808045e:	f7ff fec5 	bl	80801ec <_ZN7counterC1Ei6StringS0_c>
 8080462:	a806      	add	r0, sp, #24
 8080464:	f000 faea 	bl	8080a3c <_ZN6StringD1Ev>
 8080468:	a802      	add	r0, sp, #8
 808046a:	f000 fae7 	bl	8080a3c <_ZN6StringD1Ev>
 808046e:	4622      	mov	r2, r4
 8080470:	4629      	mov	r1, r5
 8080472:	4640      	mov	r0, r8
 8080474:	f001 f878 	bl	8081568 <__aeabi_atexit>
counter counter5(0, "Counter4", "T", 'g');
 8080478:	4639      	mov	r1, r7
 808047a:	a802      	add	r0, sp, #8
 808047c:	f000 fb28 	bl	8080ad0 <_ZN6StringC1EPKc>
 8080480:	4631      	mov	r1, r6
 8080482:	a806      	add	r0, sp, #24
 8080484:	f000 fb24 	bl	8080ad0 <_ZN6StringC1EPKc>
 8080488:	2367      	movs	r3, #103	; 0x67
 808048a:	f8df 80a0 	ldr.w	r8, [pc, #160]	; 808052c <_GLOBAL__sub_I__ZN10farmSensorC2Ei10sensorType6StringS1_c+0x1bc>
 808048e:	aa02      	add	r2, sp, #8
 8080490:	2100      	movs	r1, #0
 8080492:	9300      	str	r3, [sp, #0]
 8080494:	4640      	mov	r0, r8
 8080496:	ab06      	add	r3, sp, #24
 8080498:	f7ff fea8 	bl	80801ec <_ZN7counterC1Ei6StringS0_c>
 808049c:	a806      	add	r0, sp, #24
 808049e:	f000 facd 	bl	8080a3c <_ZN6StringD1Ev>
 80804a2:	a802      	add	r0, sp, #8
 80804a4:	f000 faca 	bl	8080a3c <_ZN6StringD1Ev>
 80804a8:	4622      	mov	r2, r4
 80804aa:	4629      	mov	r1, r5
 80804ac:	4640      	mov	r0, r8
 80804ae:	f001 f85b 	bl	8081568 <__aeabi_atexit>
counter counter6(0, "Counter4", "T", 'h');
 80804b2:	4639      	mov	r1, r7
 80804b4:	a802      	add	r0, sp, #8
 80804b6:	f000 fb0b 	bl	8080ad0 <_ZN6StringC1EPKc>
 80804ba:	4631      	mov	r1, r6
 80804bc:	a806      	add	r0, sp, #24
 80804be:	f000 fb07 	bl	8080ad0 <_ZN6StringC1EPKc>
 80804c2:	2368      	movs	r3, #104	; 0x68
 80804c4:	4e17      	ldr	r6, [pc, #92]	; (8080524 <_GLOBAL__sub_I__ZN10farmSensorC2Ei10sensorType6StringS1_c+0x1b4>)
 80804c6:	aa02      	add	r2, sp, #8
 80804c8:	2100      	movs	r1, #0
 80804ca:	9300      	str	r3, [sp, #0]
 80804cc:	4630      	mov	r0, r6
 80804ce:	ab06      	add	r3, sp, #24
 80804d0:	f7ff fe8c 	bl	80801ec <_ZN7counterC1Ei6StringS0_c>
 80804d4:	a806      	add	r0, sp, #24
 80804d6:	f000 fab1 	bl	8080a3c <_ZN6StringD1Ev>
 80804da:	a802      	add	r0, sp, #8
 80804dc:	f000 faae 	bl	8080a3c <_ZN6StringD1Ev>
 80804e0:	4622      	mov	r2, r4
 80804e2:	4629      	mov	r1, r5
 80804e4:	4630      	mov	r0, r6
 80804e6:	f001 f83f 	bl	8081568 <__aeabi_atexit>
}
 80804ea:	b00a      	add	sp, #40	; 0x28
 80804ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80804f0:	200001a4 	.word	0x200001a4
 80804f4:	20000068 	.word	0x20000068
 80804f8:	0808256d 	.word	0x0808256d
 80804fc:	08082577 	.word	0x08082577
 8080500:	08080a3d 	.word	0x08080a3d
 8080504:	0808256e 	.word	0x0808256e
 8080508:	2000006c 	.word	0x2000006c
 808050c:	080800e1 	.word	0x080800e1
 8080510:	08082579 	.word	0x08082579
 8080514:	200000a0 	.word	0x200000a0
 8080518:	08082582 	.word	0x08082582
 808051c:	200000d4 	.word	0x200000d4
 8080520:	0808258b 	.word	0x0808258b
 8080524:	20000170 	.word	0x20000170
 8080528:	20000108 	.word	0x20000108
 808052c:	2000013c 	.word	0x2000013c

08080530 <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
 8080530:	b508      	push	{r3, lr}
 8080532:	4b02      	ldr	r3, [pc, #8]	; (808053c <HAL_Pin_Map+0xc>)
 8080534:	681b      	ldr	r3, [r3, #0]
 8080536:	681b      	ldr	r3, [r3, #0]
 8080538:	9301      	str	r3, [sp, #4]
 808053a:	bd08      	pop	{r3, pc}
 808053c:	080401b0 	.word	0x080401b0

08080540 <HAL_Validate_Pin_Function>:
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
 8080540:	b508      	push	{r3, lr}
 8080542:	4b02      	ldr	r3, [pc, #8]	; (808054c <HAL_Validate_Pin_Function+0xc>)
 8080544:	681b      	ldr	r3, [r3, #0]
 8080546:	685b      	ldr	r3, [r3, #4]
 8080548:	9301      	str	r3, [sp, #4]
 808054a:	bd08      	pop	{r3, pc}
 808054c:	080401b0 	.word	0x080401b0

08080550 <HAL_Pin_Mode>:
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
 8080550:	b508      	push	{r3, lr}
 8080552:	4b02      	ldr	r3, [pc, #8]	; (808055c <HAL_Pin_Mode+0xc>)
 8080554:	681b      	ldr	r3, [r3, #0]
 8080556:	689b      	ldr	r3, [r3, #8]
 8080558:	9301      	str	r3, [sp, #4]
 808055a:	bd08      	pop	{r3, pc}
 808055c:	080401b0 	.word	0x080401b0

08080560 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
 8080560:	b508      	push	{r3, lr}
 8080562:	4b02      	ldr	r3, [pc, #8]	; (808056c <HAL_Get_Pin_Mode+0xc>)
 8080564:	681b      	ldr	r3, [r3, #0]
 8080566:	68db      	ldr	r3, [r3, #12]
 8080568:	9301      	str	r3, [sp, #4]
 808056a:	bd08      	pop	{r3, pc}
 808056c:	080401b0 	.word	0x080401b0

08080570 <HAL_GPIO_Read>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
 8080570:	b508      	push	{r3, lr}
 8080572:	4b02      	ldr	r3, [pc, #8]	; (808057c <HAL_GPIO_Read+0xc>)
 8080574:	681b      	ldr	r3, [r3, #0]
 8080576:	695b      	ldr	r3, [r3, #20]
 8080578:	9301      	str	r3, [sp, #4]
 808057a:	bd08      	pop	{r3, pc}
 808057c:	080401b0 	.word	0x080401b0

08080580 <hal_adc_read>:
DYNALIB_FN(8, hal_gpio, HAL_Interrupts_Enable_All, void(void))
DYNALIB_FN(9, hal_gpio, HAL_Interrupts_Disable_All, void(void))

DYNALIB_FN(10, hal_gpio, HAL_DAC_Write, void(pin_t, uint16_t))
DYNALIB_FN(11, hal_gpio, hal_adc_set_sample_time, void(uint8_t))
DYNALIB_FN(12, hal_gpio, hal_adc_read, int32_t(uint16_t))
 8080580:	b508      	push	{r3, lr}
 8080582:	4b02      	ldr	r3, [pc, #8]	; (808058c <hal_adc_read+0xc>)
 8080584:	681b      	ldr	r3, [r3, #0]
 8080586:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8080588:	9301      	str	r3, [sp, #4]
 808058a:	bd08      	pop	{r3, pc}
 808058c:	080401b0 	.word	0x080401b0

08080590 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
 8080590:	b508      	push	{r3, lr}
 8080592:	4b02      	ldr	r3, [pc, #8]	; (808059c <HAL_RNG_GetRandomNumber+0xc>)
 8080594:	681b      	ldr	r3, [r3, #0]
 8080596:	685b      	ldr	r3, [r3, #4]
 8080598:	9301      	str	r3, [sp, #4]
 808059a:	bd08      	pop	{r3, pc}
 808059c:	0804019c 	.word	0x0804019c

080805a0 <HAL_Timer_Get_Milli_Seconds>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
 80805a0:	b508      	push	{r3, lr}
 80805a2:	4b02      	ldr	r3, [pc, #8]	; (80805ac <HAL_Timer_Get_Milli_Seconds+0xc>)
 80805a4:	681b      	ldr	r3, [r3, #0]
 80805a6:	695b      	ldr	r3, [r3, #20]
 80805a8:	9301      	str	r3, [sp, #4]
 80805aa:	bd08      	pop	{r3, pc}
 80805ac:	0804019c 	.word	0x0804019c

080805b0 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
 80805b0:	b508      	push	{r3, lr}
 80805b2:	4b02      	ldr	r3, [pc, #8]	; (80805bc <os_mutex_recursive_create+0xc>)
 80805b4:	681b      	ldr	r3, [r3, #0]
 80805b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80805b8:	9301      	str	r3, [sp, #4]
 80805ba:	bd08      	pop	{r3, pc}
 80805bc:	080401d0 	.word	0x080401d0

080805c0 <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
 80805c0:	b508      	push	{r3, lr}
 80805c2:	4b02      	ldr	r3, [pc, #8]	; (80805cc <os_mutex_recursive_destroy+0xc>)
 80805c4:	681b      	ldr	r3, [r3, #0]
 80805c6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80805c8:	9301      	str	r3, [sp, #4]
 80805ca:	bd08      	pop	{r3, pc}
 80805cc:	080401d0 	.word	0x080401d0

080805d0 <hal_usart_init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
 80805d0:	b508      	push	{r3, lr}
 80805d2:	4b02      	ldr	r3, [pc, #8]	; (80805dc <hal_usart_init+0xc>)
 80805d4:	681b      	ldr	r3, [r3, #0]
 80805d6:	699b      	ldr	r3, [r3, #24]
 80805d8:	9301      	str	r3, [sp, #4]
 80805da:	bd08      	pop	{r3, pc}
 80805dc:	080401c4 	.word	0x080401c4

080805e0 <hal_usart_write>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
 80805e0:	b508      	push	{r3, lr}
 80805e2:	4b02      	ldr	r3, [pc, #8]	; (80805ec <hal_usart_write+0xc>)
 80805e4:	681b      	ldr	r3, [r3, #0]
 80805e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80805e8:	9301      	str	r3, [sp, #4]
 80805ea:	bd08      	pop	{r3, pc}
 80805ec:	080401c4 	.word	0x080401c4

080805f0 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
 80805f0:	b508      	push	{r3, lr}
 80805f2:	4b02      	ldr	r3, [pc, #8]	; (80805fc <hal_usart_available+0xc>)
 80805f4:	681b      	ldr	r3, [r3, #0]
 80805f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80805f8:	9301      	str	r3, [sp, #4]
 80805fa:	bd08      	pop	{r3, pc}
 80805fc:	080401c4 	.word	0x080401c4

08080600 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
 8080600:	b508      	push	{r3, lr}
 8080602:	4b02      	ldr	r3, [pc, #8]	; (808060c <hal_usart_read+0xc>)
 8080604:	681b      	ldr	r3, [r3, #0]
 8080606:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8080608:	9301      	str	r3, [sp, #4]
 808060a:	bd08      	pop	{r3, pc}
 808060c:	080401c4 	.word	0x080401c4

08080610 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
 8080610:	b508      	push	{r3, lr}
 8080612:	4b02      	ldr	r3, [pc, #8]	; (808061c <hal_usart_peek+0xc>)
 8080614:	681b      	ldr	r3, [r3, #0]
 8080616:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8080618:	9301      	str	r3, [sp, #4]
 808061a:	bd08      	pop	{r3, pc}
 808061c:	080401c4 	.word	0x080401c4

08080620 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
 8080620:	b508      	push	{r3, lr}
 8080622:	4b02      	ldr	r3, [pc, #8]	; (808062c <hal_usart_flush+0xc>)
 8080624:	681b      	ldr	r3, [r3, #0]
 8080626:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8080628:	9301      	str	r3, [sp, #4]
 808062a:	bd08      	pop	{r3, pc}
 808062c:	080401c4 	.word	0x080401c4

08080630 <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
 8080630:	b508      	push	{r3, lr}
 8080632:	4b02      	ldr	r3, [pc, #8]	; (808063c <hal_usart_is_enabled+0xc>)
 8080634:	681b      	ldr	r3, [r3, #0]
 8080636:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8080638:	9301      	str	r3, [sp, #4]
 808063a:	bd08      	pop	{r3, pc}
 808063c:	080401c4 	.word	0x080401c4

08080640 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
 8080640:	b508      	push	{r3, lr}
 8080642:	4b02      	ldr	r3, [pc, #8]	; (808064c <hal_usart_available_data_for_write+0xc>)
 8080644:	681b      	ldr	r3, [r3, #0]
 8080646:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8080648:	9301      	str	r3, [sp, #4]
 808064a:	bd08      	pop	{r3, pc}
 808064c:	080401c4 	.word	0x080401c4

08080650 <hal_i2c_write>:
DYNALIB_FN(BASE_IDX + 3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
DYNALIB_FN(BASE_IDX + 7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
 8080650:	b508      	push	{r3, lr}
 8080652:	4b02      	ldr	r3, [pc, #8]	; (808065c <hal_i2c_write+0xc>)
 8080654:	681b      	ldr	r3, [r3, #0]
 8080656:	6a1b      	ldr	r3, [r3, #32]
 8080658:	9301      	str	r3, [sp, #4]
 808065a:	bd08      	pop	{r3, pc}
 808065c:	080401ac 	.word	0x080401ac

08080660 <hal_i2c_available>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
 8080660:	b508      	push	{r3, lr}
 8080662:	4b02      	ldr	r3, [pc, #8]	; (808066c <hal_i2c_available+0xc>)
 8080664:	681b      	ldr	r3, [r3, #0]
 8080666:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8080668:	9301      	str	r3, [sp, #4]
 808066a:	bd08      	pop	{r3, pc}
 808066c:	080401ac 	.word	0x080401ac

08080670 <hal_i2c_read>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
 8080670:	b508      	push	{r3, lr}
 8080672:	4b02      	ldr	r3, [pc, #8]	; (808067c <hal_i2c_read+0xc>)
 8080674:	681b      	ldr	r3, [r3, #0]
 8080676:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8080678:	9301      	str	r3, [sp, #4]
 808067a:	bd08      	pop	{r3, pc}
 808067c:	080401ac 	.word	0x080401ac

08080680 <hal_i2c_peek>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
 8080680:	b508      	push	{r3, lr}
 8080682:	4b02      	ldr	r3, [pc, #8]	; (808068c <hal_i2c_peek+0xc>)
 8080684:	681b      	ldr	r3, [r3, #0]
 8080686:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8080688:	9301      	str	r3, [sp, #4]
 808068a:	bd08      	pop	{r3, pc}
 808068c:	080401ac 	.word	0x080401ac

08080690 <hal_i2c_flush>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
 8080690:	b508      	push	{r3, lr}
 8080692:	4b02      	ldr	r3, [pc, #8]	; (808069c <hal_i2c_flush+0xc>)
 8080694:	681b      	ldr	r3, [r3, #0]
 8080696:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8080698:	9301      	str	r3, [sp, #4]
 808069a:	bd08      	pop	{r3, pc}
 808069c:	080401ac 	.word	0x080401ac

080806a0 <hal_i2c_is_enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
 80806a0:	b508      	push	{r3, lr}
 80806a2:	4b02      	ldr	r3, [pc, #8]	; (80806ac <hal_i2c_is_enabled+0xc>)
 80806a4:	681b      	ldr	r3, [r3, #0]
 80806a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80806a8:	9301      	str	r3, [sp, #4]
 80806aa:	bd08      	pop	{r3, pc}
 80806ac:	080401ac 	.word	0x080401ac

080806b0 <hal_i2c_init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
 80806b0:	b508      	push	{r3, lr}
 80806b2:	4b02      	ldr	r3, [pc, #8]	; (80806bc <hal_i2c_init+0xc>)
 80806b4:	681b      	ldr	r3, [r3, #0]
 80806b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80806b8:	9301      	str	r3, [sp, #4]
 80806ba:	bd08      	pop	{r3, pc}
 80806bc:	080401ac 	.word	0x080401ac

080806c0 <hal_spi_init>:
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
 80806c0:	b508      	push	{r3, lr}
 80806c2:	4b02      	ldr	r3, [pc, #8]	; (80806cc <hal_spi_init+0xc>)
 80806c4:	681b      	ldr	r3, [r3, #0]
 80806c6:	69db      	ldr	r3, [r3, #28]
 80806c8:	9301      	str	r3, [sp, #4]
 80806ca:	bd08      	pop	{r3, pc}
 80806cc:	080401b4 	.word	0x080401b4

080806d0 <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
 80806d0:	b508      	push	{r3, lr}
 80806d2:	4b02      	ldr	r3, [pc, #8]	; (80806dc <hal_spi_is_enabled+0xc>)
 80806d4:	681b      	ldr	r3, [r3, #0]
 80806d6:	6a1b      	ldr	r3, [r3, #32]
 80806d8:	9301      	str	r3, [sp, #4]
 80806da:	bd08      	pop	{r3, pc}
 80806dc:	080401b4 	.word	0x080401b4

080806e0 <inet_gethostbyname>:
DYNALIB_FN(10, hal_cellular, cellular_credentials_set, cellular_result_t(const char*, const char*, const char*, void*))
DYNALIB_FN(11, hal_cellular, cellular_credentials_get, CellularCredentials*(void*))
DYNALIB_FN(12, hal_cellular, cellular_sim_ready, bool(void*))
DYNALIB_FN(13, hal_cellular, cellular_cancel, void(bool, bool, void*))
DYNALIB_FN(14, hal_cellular, HAL_NET_SetNetWatchDog, uint32_t(uint32_t))
DYNALIB_FN(15, hal_cellular, inet_gethostbyname, int(const char*, uint16_t, HAL_IPAddress*, network_interface_t, void*))
 80806e0:	b508      	push	{r3, lr}
 80806e2:	4b02      	ldr	r3, [pc, #8]	; (80806ec <inet_gethostbyname+0xc>)
 80806e4:	681b      	ldr	r3, [r3, #0]
 80806e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80806e8:	9301      	str	r3, [sp, #4]
 80806ea:	bd08      	pop	{r3, pc}
 80806ec:	08060020 	.word	0x08060020

080806f0 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
 80806f0:	b508      	push	{r3, lr}
 80806f2:	4b02      	ldr	r3, [pc, #8]	; (80806fc <HAL_USB_USART_Init+0xc>)
 80806f4:	681b      	ldr	r3, [r3, #0]
 80806f6:	681b      	ldr	r3, [r3, #0]
 80806f8:	9301      	str	r3, [sp, #4]
 80806fa:	bd08      	pop	{r3, pc}
 80806fc:	0806001c 	.word	0x0806001c

08080700 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
 8080700:	b508      	push	{r3, lr}
 8080702:	4b02      	ldr	r3, [pc, #8]	; (808070c <HAL_USB_USART_Begin+0xc>)
 8080704:	681b      	ldr	r3, [r3, #0]
 8080706:	685b      	ldr	r3, [r3, #4]
 8080708:	9301      	str	r3, [sp, #4]
 808070a:	bd08      	pop	{r3, pc}
 808070c:	0806001c 	.word	0x0806001c

08080710 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
 8080710:	b508      	push	{r3, lr}
 8080712:	4b02      	ldr	r3, [pc, #8]	; (808071c <HAL_USB_USART_Available_Data+0xc>)
 8080714:	681b      	ldr	r3, [r3, #0]
 8080716:	691b      	ldr	r3, [r3, #16]
 8080718:	9301      	str	r3, [sp, #4]
 808071a:	bd08      	pop	{r3, pc}
 808071c:	0806001c 	.word	0x0806001c

08080720 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
 8080720:	b508      	push	{r3, lr}
 8080722:	4b02      	ldr	r3, [pc, #8]	; (808072c <HAL_USB_USART_Available_Data_For_Write+0xc>)
 8080724:	681b      	ldr	r3, [r3, #0]
 8080726:	695b      	ldr	r3, [r3, #20]
 8080728:	9301      	str	r3, [sp, #4]
 808072a:	bd08      	pop	{r3, pc}
 808072c:	0806001c 	.word	0x0806001c

08080730 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 8080730:	b508      	push	{r3, lr}
 8080732:	4b02      	ldr	r3, [pc, #8]	; (808073c <HAL_USB_USART_Receive_Data+0xc>)
 8080734:	681b      	ldr	r3, [r3, #0]
 8080736:	699b      	ldr	r3, [r3, #24]
 8080738:	9301      	str	r3, [sp, #4]
 808073a:	bd08      	pop	{r3, pc}
 808073c:	0806001c 	.word	0x0806001c

08080740 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 8080740:	b508      	push	{r3, lr}
 8080742:	4b02      	ldr	r3, [pc, #8]	; (808074c <HAL_USB_USART_Send_Data+0xc>)
 8080744:	681b      	ldr	r3, [r3, #0]
 8080746:	69db      	ldr	r3, [r3, #28]
 8080748:	9301      	str	r3, [sp, #4]
 808074a:	bd08      	pop	{r3, pc}
 808074c:	0806001c 	.word	0x0806001c

08080750 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
 8080750:	b508      	push	{r3, lr}
 8080752:	4b02      	ldr	r3, [pc, #8]	; (808075c <HAL_USB_USART_Flush_Data+0xc>)
 8080754:	681b      	ldr	r3, [r3, #0]
 8080756:	6a1b      	ldr	r3, [r3, #32]
 8080758:	9301      	str	r3, [sp, #4]
 808075a:	bd08      	pop	{r3, pc}
 808075c:	0806001c 	.word	0x0806001c

08080760 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
 8080760:	b508      	push	{r3, lr}
 8080762:	4b02      	ldr	r3, [pc, #8]	; (808076c <set_system_mode+0xc>)
 8080764:	681b      	ldr	r3, [r3, #0]
 8080766:	685b      	ldr	r3, [r3, #4]
 8080768:	9301      	str	r3, [sp, #4]
 808076a:	bd08      	pop	{r3, pc}
 808076c:	080401a4 	.word	0x080401a4

08080770 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
 8080770:	b508      	push	{r3, lr}
 8080772:	4b02      	ldr	r3, [pc, #8]	; (808077c <system_delay_ms+0xc>)
 8080774:	681b      	ldr	r3, [r3, #0]
 8080776:	695b      	ldr	r3, [r3, #20]
 8080778:	9301      	str	r3, [sp, #4]
 808077a:	bd08      	pop	{r3, pc}
 808077c:	080401a4 	.word	0x080401a4

08080780 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
 8080780:	b508      	push	{r3, lr}
 8080782:	4b03      	ldr	r3, [pc, #12]	; (8080790 <system_ctrl_set_app_request_handler+0x10>)
 8080784:	681b      	ldr	r3, [r3, #0]
 8080786:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 808078a:	9301      	str	r3, [sp, #4]
 808078c:	bd08      	pop	{r3, pc}
 808078e:	0000      	.short	0x0000
 8080790:	080401a4 	.word	0x080401a4

08080794 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
 8080794:	b508      	push	{r3, lr}
 8080796:	4b03      	ldr	r3, [pc, #12]	; (80807a4 <system_ctrl_set_result+0x10>)
 8080798:	681b      	ldr	r3, [r3, #0]
 808079a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 808079e:	9301      	str	r3, [sp, #4]
 80807a0:	bd08      	pop	{r3, pc}
 80807a2:	0000      	.short	0x0000
 80807a4:	080401a4 	.word	0x080401a4

080807a8 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
 80807a8:	b508      	push	{r3, lr}
 80807aa:	4b02      	ldr	r3, [pc, #8]	; (80807b4 <network_connect+0xc>)
 80807ac:	681b      	ldr	r3, [r3, #0]
 80807ae:	685b      	ldr	r3, [r3, #4]
 80807b0:	9301      	str	r3, [sp, #4]
 80807b2:	bd08      	pop	{r3, pc}
 80807b4:	080401c8 	.word	0x080401c8

080807b8 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
 80807b8:	b508      	push	{r3, lr}
 80807ba:	4b02      	ldr	r3, [pc, #8]	; (80807c4 <network_connecting+0xc>)
 80807bc:	681b      	ldr	r3, [r3, #0]
 80807be:	689b      	ldr	r3, [r3, #8]
 80807c0:	9301      	str	r3, [sp, #4]
 80807c2:	bd08      	pop	{r3, pc}
 80807c4:	080401c8 	.word	0x080401c8

080807c8 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
 80807c8:	b508      	push	{r3, lr}
 80807ca:	4b02      	ldr	r3, [pc, #8]	; (80807d4 <network_disconnect+0xc>)
 80807cc:	681b      	ldr	r3, [r3, #0]
 80807ce:	68db      	ldr	r3, [r3, #12]
 80807d0:	9301      	str	r3, [sp, #4]
 80807d2:	bd08      	pop	{r3, pc}
 80807d4:	080401c8 	.word	0x080401c8

080807d8 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
 80807d8:	b508      	push	{r3, lr}
 80807da:	4b02      	ldr	r3, [pc, #8]	; (80807e4 <network_ready+0xc>)
 80807dc:	681b      	ldr	r3, [r3, #0]
 80807de:	691b      	ldr	r3, [r3, #16]
 80807e0:	9301      	str	r3, [sp, #4]
 80807e2:	bd08      	pop	{r3, pc}
 80807e4:	080401c8 	.word	0x080401c8

080807e8 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
 80807e8:	b508      	push	{r3, lr}
 80807ea:	4b02      	ldr	r3, [pc, #8]	; (80807f4 <network_on+0xc>)
 80807ec:	681b      	ldr	r3, [r3, #0]
 80807ee:	695b      	ldr	r3, [r3, #20]
 80807f0:	9301      	str	r3, [sp, #4]
 80807f2:	bd08      	pop	{r3, pc}
 80807f4:	080401c8 	.word	0x080401c8

080807f8 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
 80807f8:	b508      	push	{r3, lr}
 80807fa:	4b02      	ldr	r3, [pc, #8]	; (8080804 <network_off+0xc>)
 80807fc:	681b      	ldr	r3, [r3, #0]
 80807fe:	699b      	ldr	r3, [r3, #24]
 8080800:	9301      	str	r3, [sp, #4]
 8080802:	bd08      	pop	{r3, pc}
 8080804:	080401c8 	.word	0x080401c8

08080808 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
 8080808:	b508      	push	{r3, lr}
 808080a:	4b02      	ldr	r3, [pc, #8]	; (8080814 <network_listen+0xc>)
 808080c:	681b      	ldr	r3, [r3, #0]
 808080e:	69db      	ldr	r3, [r3, #28]
 8080810:	9301      	str	r3, [sp, #4]
 8080812:	bd08      	pop	{r3, pc}
 8080814:	080401c8 	.word	0x080401c8

08080818 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
 8080818:	b508      	push	{r3, lr}
 808081a:	4b02      	ldr	r3, [pc, #8]	; (8080824 <network_listening+0xc>)
 808081c:	681b      	ldr	r3, [r3, #0]
 808081e:	6a1b      	ldr	r3, [r3, #32]
 8080820:	9301      	str	r3, [sp, #4]
 8080822:	bd08      	pop	{r3, pc}
 8080824:	080401c8 	.word	0x080401c8

08080828 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
 8080828:	b508      	push	{r3, lr}
 808082a:	4b02      	ldr	r3, [pc, #8]	; (8080834 <network_set_listen_timeout+0xc>)
 808082c:	681b      	ldr	r3, [r3, #0]
 808082e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8080830:	9301      	str	r3, [sp, #4]
 8080832:	bd08      	pop	{r3, pc}
 8080834:	080401c8 	.word	0x080401c8

08080838 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
 8080838:	b508      	push	{r3, lr}
 808083a:	4b02      	ldr	r3, [pc, #8]	; (8080844 <network_get_listen_timeout+0xc>)
 808083c:	681b      	ldr	r3, [r3, #0]
 808083e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8080840:	9301      	str	r3, [sp, #4]
 8080842:	bd08      	pop	{r3, pc}
 8080844:	080401c8 	.word	0x080401c8

08080848 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
 8080848:	b508      	push	{r3, lr}
 808084a:	4b02      	ldr	r3, [pc, #8]	; (8080854 <spark_set_random_seed_from_cloud_handler+0xc>)
 808084c:	681b      	ldr	r3, [r3, #0]
 808084e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8080850:	9301      	str	r3, [sp, #4]
 8080852:	bd08      	pop	{r3, pc}
 8080854:	080401cc 	.word	0x080401cc

08080858 <malloc>:
#include "newlib_impure.h"
#endif

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
 8080858:	b508      	push	{r3, lr}
 808085a:	4b02      	ldr	r3, [pc, #8]	; (8080864 <malloc+0xc>)
 808085c:	681b      	ldr	r3, [r3, #0]
 808085e:	681b      	ldr	r3, [r3, #0]
 8080860:	9301      	str	r3, [sp, #4]
 8080862:	bd08      	pop	{r3, pc}
 8080864:	080401a0 	.word	0x080401a0

08080868 <free>:
DYNALIB_FN(1, rt, free, void(void*))
 8080868:	b508      	push	{r3, lr}
 808086a:	4b02      	ldr	r3, [pc, #8]	; (8080874 <free+0xc>)
 808086c:	681b      	ldr	r3, [r3, #0]
 808086e:	685b      	ldr	r3, [r3, #4]
 8080870:	9301      	str	r3, [sp, #4]
 8080872:	bd08      	pop	{r3, pc}
 8080874:	080401a0 	.word	0x080401a0

08080878 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
 8080878:	b508      	push	{r3, lr}
 808087a:	4b02      	ldr	r3, [pc, #8]	; (8080884 <realloc+0xc>)
 808087c:	681b      	ldr	r3, [r3, #0]
 808087e:	689b      	ldr	r3, [r3, #8]
 8080880:	9301      	str	r3, [sp, #4]
 8080882:	bd08      	pop	{r3, pc}
 8080884:	080401a0 	.word	0x080401a0

08080888 <newlib_impure_ptr_callback>:
// RT is currently being imported into system-part1 from system-part2,
// which is the reverse direction.

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
 8080888:	b508      	push	{r3, lr}
 808088a:	4b02      	ldr	r3, [pc, #8]	; (8080894 <newlib_impure_ptr_callback+0xc>)
 808088c:	681b      	ldr	r3, [r3, #0]
 808088e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8080890:	9301      	str	r3, [sp, #4]
 8080892:	bd08      	pop	{r3, pc}
 8080894:	080401a0 	.word	0x080401a0

08080898 <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
 8080898:	b570      	push	{r4, r5, r6, lr}
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
 808089a:	2600      	movs	r6, #0
 808089c:	4604      	mov	r4, r0
 808089e:	460d      	mov	r5, r1
 80808a0:	f840 6f08 	str.w	r6, [r0, #8]!
    {
        os_mutex_recursive_create(&handle_);
 80808a4:	f7ff fe84 	bl	80805b0 <os_mutex_recursive_create>
{
    _spi = spi;
    hal_spi_init(_spi);
 80808a8:	4628      	mov	r0, r5
    _spi = spi;
 80808aa:	7025      	strb	r5, [r4, #0]
    hal_spi_init(_spi);
 80808ac:	f7ff ff08 	bl	80806c0 <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
}
 80808b0:	4620      	mov	r0, r4
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
 80808b2:	6066      	str	r6, [r4, #4]
}
 80808b4:	bd70      	pop	{r4, r5, r6, pc}

080808b6 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0>:
    operator SleepResult() {
        return toSleepResult();
    }

private:
    void freeWakeupSourceMemory() {
 80808b6:	b510      	push	{r4, lr}
 80808b8:	4604      	mov	r4, r0
        if (wakeupSource_) {
 80808ba:	6800      	ldr	r0, [r0, #0]
 80808bc:	b118      	cbz	r0, 80808c6 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0+0x10>
            free(wakeupSource_);
 80808be:	f7ff ffd3 	bl	8080868 <free>
            wakeupSource_ = nullptr;
 80808c2:	2300      	movs	r3, #0
 80808c4:	6023      	str	r3, [r4, #0]
        }
    }
 80808c6:	bd10      	pop	{r4, pc}

080808c8 <_ZN11SystemClassD1Ev>:
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
 80808c8:	b510      	push	{r4, lr}
 80808ca:	4604      	mov	r4, r0
        freeWakeupSourceMemory();
 80808cc:	f7ff fff3 	bl	80808b6 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0>
class SystemClass {
 80808d0:	4620      	mov	r0, r4
 80808d2:	bd10      	pop	{r4, pc}

080808d4 <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
 80808d4:	2202      	movs	r2, #2
              error_(SYSTEM_ERROR_NONE) {
 80808d6:	2000      	movs	r0, #0
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
 80808d8:	b510      	push	{r4, lr}
 80808da:	4b08      	ldr	r3, [pc, #32]	; (80808fc <_GLOBAL__sub_I_System+0x28>)
 80808dc:	4c08      	ldr	r4, [pc, #32]	; (8080900 <_GLOBAL__sub_I_System+0x2c>)
 80808de:	601a      	str	r2, [r3, #0]
    SleepResult() {}
 80808e0:	4b08      	ldr	r3, [pc, #32]	; (8080904 <_GLOBAL__sub_I_System+0x30>)
              error_(SYSTEM_ERROR_NONE) {
 80808e2:	6020      	str	r0, [r4, #0]
 80808e4:	80a0      	strh	r0, [r4, #4]
    SleepResult() {}
 80808e6:	71a0      	strb	r0, [r4, #6]
 80808e8:	60a3      	str	r3, [r4, #8]
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
 80808ea:	f7ff ff39 	bl	8080760 <set_system_mode>
SystemClass System;
 80808ee:	4620      	mov	r0, r4
 80808f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
SystemClass System;
 80808f4:	4a04      	ldr	r2, [pc, #16]	; (8080908 <_GLOBAL__sub_I_System+0x34>)
 80808f6:	4905      	ldr	r1, [pc, #20]	; (808090c <_GLOBAL__sub_I_System+0x38>)
 80808f8:	f000 be36 	b.w	8081568 <__aeabi_atexit>
 80808fc:	200001c0 	.word	0x200001c0
 8080900:	200001b4 	.word	0x200001b4
 8080904:	ffff0000 	.word	0xffff0000
 8080908:	20000068 	.word	0x20000068
 808090c:	080808c9 	.word	0x080808c9

08080910 <_Z11str_reversePc>:

//------------------------------------------------------------------------------------------
#define BUFSIZE (sizeof(long) * 8 + 1)

//utility function used by ultoa()
__attribute__((weak)) void str_reverse(char* buffer){
 8080910:	b510      	push	{r4, lr}
 8080912:	4604      	mov	r4, r0
	char *i, *j;
	char c;
	i=buffer;
	j=buffer + strlen(buffer)-1;
 8080914:	f001 fdf4 	bl	8082500 <strlen>
 8080918:	1e43      	subs	r3, r0, #1
 808091a:	4620      	mov	r0, r4
 808091c:	4423      	add	r3, r4
	while(i<j){
 808091e:	4283      	cmp	r3, r0
 8080920:	d906      	bls.n	8080930 <_Z11str_reversePc+0x20>
		c = *i;
 8080922:	7802      	ldrb	r2, [r0, #0]
		*i = *j;
 8080924:	7819      	ldrb	r1, [r3, #0]
 8080926:	f800 1b01 	strb.w	r1, [r0], #1
		*j = c;
 808092a:	f803 2901 	strb.w	r2, [r3], #-1
	while(i<j){
 808092e:	e7f6      	b.n	808091e <_Z11str_reversePc+0xe>
		++i;
		--j;
	}
}
 8080930:	bd10      	pop	{r4, pc}

08080932 <ultoa>:
      memcpy(head, ++tail, i);
      return str;
}

//convert unsigned long to string
__attribute__((weak)) char* ultoa(unsigned long a, char* buffer, int radix, char pad){
 8080932:	b570      	push	{r4, r5, r6, lr}
 8080934:	460c      	mov	r4, r1
	if(radix<2 || radix>36){
 8080936:	1e91      	subs	r1, r2, #2
 8080938:	2922      	cmp	r1, #34	; 0x22
 808093a:	d822      	bhi.n	8080982 <ultoa+0x50>
		return NULL;
	}
	char* ptr=buffer;
 808093c:	4625      	mov	r5, r4

	div_t result;
	while(a){
 808093e:	b168      	cbz	r0, 808095c <ultoa+0x2a>
            /* toolchain bug??
            result = div(a, radix);
            */
            result.quot = a/radix;
 8080940:	fbb0 f6f2 	udiv	r6, r0, r2
            result.rem = a%radix;
 8080944:	fb02 0016 	mls	r0, r2, r6, r0
            *ptr = result.rem;
 8080948:	b2c1      	uxtb	r1, r0
            if(result.rem<10){
 808094a:	2809      	cmp	r0, #9
                *ptr += '0';
 808094c:	bf94      	ite	ls
 808094e:	3130      	addls	r1, #48	; 0x30
            }else{
                *ptr += 'a'-10;
 8080950:	3157      	addhi	r1, #87	; 0x57
 8080952:	b2c9      	uxtb	r1, r1
            }
            ++ptr;
            a = result.quot;
 8080954:	4630      	mov	r0, r6
 8080956:	f805 1b01 	strb.w	r1, [r5], #1
	while(a){
 808095a:	e7f0      	b.n	808093e <ultoa+0xc>
 808095c:	462a      	mov	r2, r5
	}
        while (ptr < buffer+pad)
            *ptr++ = '0';
 808095e:	2130      	movs	r1, #48	; 0x30
        while (ptr < buffer+pad)
 8080960:	4423      	add	r3, r4
 8080962:	4293      	cmp	r3, r2
 8080964:	d902      	bls.n	808096c <ultoa+0x3a>
            *ptr++ = '0';
 8080966:	f802 1b01 	strb.w	r1, [r2], #1
        while (ptr < buffer+pad)
 808096a:	e7fa      	b.n	8080962 <ultoa+0x30>
 808096c:	1b5a      	subs	r2, r3, r5
 808096e:	42ab      	cmp	r3, r5
 8080970:	bf38      	it	cc
 8080972:	2200      	movcc	r2, #0

	*ptr = '\0';
 8080974:	2300      	movs	r3, #0
	str_reverse(buffer);
 8080976:	4620      	mov	r0, r4
	*ptr = '\0';
 8080978:	54ab      	strb	r3, [r5, r2]
	str_reverse(buffer);
 808097a:	f7ff ffc9 	bl	8080910 <_Z11str_reversePc>
	return buffer;
 808097e:	4620      	mov	r0, r4
}
 8080980:	bd70      	pop	{r4, r5, r6, pc}
		return NULL;
 8080982:	2000      	movs	r0, #0
 8080984:	e7fc      	b.n	8080980 <ultoa+0x4e>
	...

08080988 <_Z4dtoadhPc>:
#include "string_convert.h"

//These are very crude implementations - will refine later
//------------------------------------------------------------------------------------------

void dtoa (double val, unsigned char prec, char *sout) {
 8080988:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 808098c:	4607      	mov	r7, r0
 808098e:	460d      	mov	r5, r1
 8080990:	4616      	mov	r6, r2
 8080992:	461c      	mov	r4, r3
    bool negative = val<0;
    if (negative) {
 8080994:	2200      	movs	r2, #0
 8080996:	2300      	movs	r3, #0
 8080998:	4638      	mov	r0, r7
 808099a:	4629      	mov	r1, r5
 808099c:	f001 fa20 	bl	8081de0 <__aeabi_dcmplt>
 80809a0:	b120      	cbz	r0, 80809ac <_Z4dtoadhPc+0x24>
        val = -val;
        *sout++ = '-';
 80809a2:	232d      	movs	r3, #45	; 0x2d
        val = -val;
 80809a4:	f105 4500 	add.w	r5, r5, #2147483648	; 0x80000000
        *sout++ = '-';
 80809a8:	f804 3b01 	strb.w	r3, [r4], #1
 80809ac:	2300      	movs	r3, #0
    }
    long scale = 1;
 80809ae:	f04f 0a01 	mov.w	sl, #1
    for (uint8_t i=0; i<prec; i++)
        scale *= 10;
 80809b2:	220a      	movs	r2, #10
    for (uint8_t i=0; i<prec; i++)
 80809b4:	b2d9      	uxtb	r1, r3
 80809b6:	428e      	cmp	r6, r1
 80809b8:	d903      	bls.n	80809c2 <_Z4dtoadhPc+0x3a>
        scale *= 10;
 80809ba:	fb02 fa0a 	mul.w	sl, r2, sl
    for (uint8_t i=0; i<prec; i++)
 80809be:	3301      	adds	r3, #1
 80809c0:	e7f8      	b.n	80809b4 <_Z4dtoadhPc+0x2c>
    val *= scale;   // capture all the significant digits
 80809c2:	4650      	mov	r0, sl
 80809c4:	f000 ff30 	bl	8081828 <__aeabi_i2d>
 80809c8:	463a      	mov	r2, r7
 80809ca:	462b      	mov	r3, r5
 80809cc:	f000 ff96 	bl	80818fc <__aeabi_dmul>
 80809d0:	4680      	mov	r8, r0
 80809d2:	4689      	mov	r9, r1
    uint64_t fixed = uint64_t(val);
 80809d4:	f001 fbc2 	bl	808215c <__aeabi_d2ulz>
 80809d8:	4605      	mov	r5, r0
 80809da:	460f      	mov	r7, r1
    if ((val-fixed)>=0.5)    // round last digit
 80809dc:	f000 ff58 	bl	8081890 <__aeabi_ul2d>
 80809e0:	4602      	mov	r2, r0
 80809e2:	460b      	mov	r3, r1
 80809e4:	4640      	mov	r0, r8
 80809e6:	4649      	mov	r1, r9
 80809e8:	f000 fdd0 	bl	808158c <__aeabi_dsub>
 80809ec:	2200      	movs	r2, #0
 80809ee:	4b12      	ldr	r3, [pc, #72]	; (8080a38 <_Z4dtoadhPc+0xb0>)
 80809f0:	f001 fa0a 	bl	8081e08 <__aeabi_dcmpge>
 80809f4:	b110      	cbz	r0, 80809fc <_Z4dtoadhPc+0x74>
        fixed++;
 80809f6:	3501      	adds	r5, #1
 80809f8:	f147 0700 	adc.w	r7, r7, #0

    unsigned long first = (unsigned long)(fixed / scale);
 80809fc:	4652      	mov	r2, sl
 80809fe:	4628      	mov	r0, r5
 8080a00:	4639      	mov	r1, r7
 8080a02:	17d3      	asrs	r3, r2, #31
 8080a04:	f001 fb92 	bl	808212c <__aeabi_uldivmod>
    unsigned long second = (unsigned long)(fixed % scale);

    ultoa(first, sout, 10, 1);
 8080a08:	2301      	movs	r3, #1
 8080a0a:	4615      	mov	r5, r2
 8080a0c:	4621      	mov	r1, r4
 8080a0e:	220a      	movs	r2, #10
 8080a10:	f7ff ff8f 	bl	8080932 <ultoa>
    if (prec) {
 8080a14:	b16e      	cbz	r6, 8080a32 <_Z4dtoadhPc+0xaa>
        sout += strlen(sout);
 8080a16:	4620      	mov	r0, r4
 8080a18:	f001 fd72 	bl	8082500 <strlen>
        *sout++ = '.';
 8080a1c:	232e      	movs	r3, #46	; 0x2e
        sout += strlen(sout);
 8080a1e:	1821      	adds	r1, r4, r0
        *sout++ = '.';
 8080a20:	5423      	strb	r3, [r4, r0]
        ultoa(second, sout, 10, prec);
 8080a22:	220a      	movs	r2, #10
 8080a24:	4633      	mov	r3, r6
 8080a26:	4628      	mov	r0, r5
    }
}
 8080a28:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
        ultoa(second, sout, 10, prec);
 8080a2c:	3101      	adds	r1, #1
 8080a2e:	f7ff bf80 	b.w	8080932 <ultoa>
}
 8080a32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8080a36:	bf00      	nop
 8080a38:	3fe00000 	.word	0x3fe00000

08080a3c <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
 8080a3c:	b510      	push	{r4, lr}
 8080a3e:	4604      	mov	r4, r0
{
	free(buffer);
 8080a40:	6800      	ldr	r0, [r0, #0]
 8080a42:	f7ff ff11 	bl	8080868 <free>
}
 8080a46:	4620      	mov	r0, r4
 8080a48:	bd10      	pop	{r4, pc}

08080a4a <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
 8080a4a:	b510      	push	{r4, lr}
 8080a4c:	4604      	mov	r4, r0
	if (buffer) free(buffer);
 8080a4e:	6800      	ldr	r0, [r0, #0]
 8080a50:	b108      	cbz	r0, 8080a56 <_ZN6String10invalidateEv+0xc>
 8080a52:	f7ff ff09 	bl	8080868 <free>
	buffer = NULL;
 8080a56:	2300      	movs	r3, #0
	capacity = len = 0;
 8080a58:	e9c4 3301 	strd	r3, r3, [r4, #4]
	buffer = NULL;
 8080a5c:	6023      	str	r3, [r4, #0]
}
 8080a5e:	bd10      	pop	{r4, pc}

08080a60 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
 8080a60:	b538      	push	{r3, r4, r5, lr}
 8080a62:	4604      	mov	r4, r0
 8080a64:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
 8080a66:	6800      	ldr	r0, [r0, #0]
 8080a68:	3101      	adds	r1, #1
 8080a6a:	f7ff ff05 	bl	8080878 <realloc>
	if (newbuffer) {
 8080a6e:	b110      	cbz	r0, 8080a76 <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
 8080a70:	e9c4 0500 	strd	r0, r5, [r4]
		return 1;
 8080a74:	2001      	movs	r0, #1
	}
	return 0;
}
 8080a76:	bd38      	pop	{r3, r4, r5, pc}

08080a78 <_ZN6String7reserveEj>:
{
 8080a78:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
 8080a7a:	6803      	ldr	r3, [r0, #0]
{
 8080a7c:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
 8080a7e:	b123      	cbz	r3, 8080a8a <_ZN6String7reserveEj+0x12>
 8080a80:	6843      	ldr	r3, [r0, #4]
 8080a82:	428b      	cmp	r3, r1
 8080a84:	d301      	bcc.n	8080a8a <_ZN6String7reserveEj+0x12>
 8080a86:	2001      	movs	r0, #1
}
 8080a88:	bd10      	pop	{r4, pc}
	if (changeBuffer(size)) {
 8080a8a:	4620      	mov	r0, r4
 8080a8c:	f7ff ffe8 	bl	8080a60 <_ZN6String12changeBufferEj>
 8080a90:	2800      	cmp	r0, #0
 8080a92:	d0f9      	beq.n	8080a88 <_ZN6String7reserveEj+0x10>
		if (len == 0) buffer[0] = 0;
 8080a94:	68a3      	ldr	r3, [r4, #8]
 8080a96:	2b00      	cmp	r3, #0
 8080a98:	d1f5      	bne.n	8080a86 <_ZN6String7reserveEj+0xe>
 8080a9a:	6822      	ldr	r2, [r4, #0]
 8080a9c:	7013      	strb	r3, [r2, #0]
 8080a9e:	e7f2      	b.n	8080a86 <_ZN6String7reserveEj+0xe>

08080aa0 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
 8080aa0:	b570      	push	{r4, r5, r6, lr}
 8080aa2:	460e      	mov	r6, r1
	if (!reserve(length)) {
 8080aa4:	4611      	mov	r1, r2
{
 8080aa6:	4604      	mov	r4, r0
 8080aa8:	4615      	mov	r5, r2
	if (!reserve(length)) {
 8080aaa:	f7ff ffe5 	bl	8080a78 <_ZN6String7reserveEj>
 8080aae:	b920      	cbnz	r0, 8080aba <_ZN6String4copyEPKcj+0x1a>
		invalidate();
 8080ab0:	4620      	mov	r0, r4
 8080ab2:	f7ff ffca 	bl	8080a4a <_ZN6String10invalidateEv>
	}
	len = length;
	memcpy(buffer, cstr, length);
	buffer[len] = 0;
	return *this;
}
 8080ab6:	4620      	mov	r0, r4
 8080ab8:	bd70      	pop	{r4, r5, r6, pc}
	memcpy(buffer, cstr, length);
 8080aba:	462a      	mov	r2, r5
 8080abc:	4631      	mov	r1, r6
 8080abe:	6820      	ldr	r0, [r4, #0]
	len = length;
 8080ac0:	60a5      	str	r5, [r4, #8]
	memcpy(buffer, cstr, length);
 8080ac2:	f001 fcdb 	bl	808247c <memcpy>
	buffer[len] = 0;
 8080ac6:	2100      	movs	r1, #0
 8080ac8:	6822      	ldr	r2, [r4, #0]
 8080aca:	68a3      	ldr	r3, [r4, #8]
 8080acc:	54d1      	strb	r1, [r2, r3]
	return *this;
 8080ace:	e7f2      	b.n	8080ab6 <_ZN6String4copyEPKcj+0x16>

08080ad0 <_ZN6StringC1EPKc>:
String::String(const char *cstr)
 8080ad0:	b538      	push	{r3, r4, r5, lr}
	buffer = NULL;
 8080ad2:	2300      	movs	r3, #0
String::String(const char *cstr)
 8080ad4:	4604      	mov	r4, r0
	if (cstr) copy(cstr, strlen(cstr));
 8080ad6:	460d      	mov	r5, r1
	capacity = 0;
 8080ad8:	e9c0 3300 	strd	r3, r3, [r0]
	len = 0;
 8080adc:	6083      	str	r3, [r0, #8]
	flags = 0;
 8080ade:	7303      	strb	r3, [r0, #12]
	if (cstr) copy(cstr, strlen(cstr));
 8080ae0:	b139      	cbz	r1, 8080af2 <_ZN6StringC1EPKc+0x22>
 8080ae2:	4608      	mov	r0, r1
 8080ae4:	f001 fd0c 	bl	8082500 <strlen>
 8080ae8:	4629      	mov	r1, r5
 8080aea:	4602      	mov	r2, r0
 8080aec:	4620      	mov	r0, r4
 8080aee:	f7ff ffd7 	bl	8080aa0 <_ZN6String4copyEPKcj>
}
 8080af2:	4620      	mov	r0, r4
 8080af4:	bd38      	pop	{r3, r4, r5, pc}

08080af6 <_ZN6StringaSERKS_>:
}
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
 8080af6:	4288      	cmp	r0, r1
{
 8080af8:	b510      	push	{r4, lr}
 8080afa:	460b      	mov	r3, r1
 8080afc:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
 8080afe:	d004      	beq.n	8080b0a <_ZN6StringaSERKS_+0x14>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
 8080b00:	6809      	ldr	r1, [r1, #0]
 8080b02:	b121      	cbz	r1, 8080b0e <_ZN6StringaSERKS_+0x18>
 8080b04:	689a      	ldr	r2, [r3, #8]
 8080b06:	f7ff ffcb 	bl	8080aa0 <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
 8080b0a:	4620      	mov	r0, r4
 8080b0c:	bd10      	pop	{r4, pc}
	else invalidate();
 8080b0e:	f7ff ff9c 	bl	8080a4a <_ZN6String10invalidateEv>
 8080b12:	e7fa      	b.n	8080b0a <_ZN6StringaSERKS_+0x14>

08080b14 <_ZN6StringC1ERKS_>:
	buffer = NULL;
 8080b14:	2300      	movs	r3, #0
String::String(const String &value)
 8080b16:	b510      	push	{r4, lr}
 8080b18:	4604      	mov	r4, r0
	capacity = 0;
 8080b1a:	e9c0 3300 	strd	r3, r3, [r0]
	len = 0;
 8080b1e:	6083      	str	r3, [r0, #8]
	flags = 0;
 8080b20:	7303      	strb	r3, [r0, #12]
	*this = value;
 8080b22:	f7ff ffe8 	bl	8080af6 <_ZN6StringaSERKS_>
}
 8080b26:	4620      	mov	r0, r4
 8080b28:	bd10      	pop	{r4, pc}

08080b2a <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
 8080b2a:	b538      	push	{r3, r4, r5, lr}
 8080b2c:	4605      	mov	r5, r0
	if (cstr) copy(cstr, strlen(cstr));
 8080b2e:	460c      	mov	r4, r1
 8080b30:	b149      	cbz	r1, 8080b46 <_ZN6StringaSEPKc+0x1c>
 8080b32:	4608      	mov	r0, r1
 8080b34:	f001 fce4 	bl	8082500 <strlen>
 8080b38:	4621      	mov	r1, r4
 8080b3a:	4602      	mov	r2, r0
 8080b3c:	4628      	mov	r0, r5
 8080b3e:	f7ff ffaf 	bl	8080aa0 <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
 8080b42:	4628      	mov	r0, r5
 8080b44:	bd38      	pop	{r3, r4, r5, pc}
	else invalidate();
 8080b46:	f7ff ff80 	bl	8080a4a <_ZN6String10invalidateEv>
 8080b4a:	e7fa      	b.n	8080b42 <_ZN6StringaSEPKc+0x18>

08080b4c <_ZN6StringC1Efi>:
	buffer = NULL;
 8080b4c:	2300      	movs	r3, #0
String::String(float value, int decimalPlaces)
 8080b4e:	b530      	push	{r4, r5, lr}
 8080b50:	4604      	mov	r4, r0
 8080b52:	b08b      	sub	sp, #44	; 0x2c
	capacity = 0;
 8080b54:	e9c0 3300 	strd	r3, r3, [r0]
	len = 0;
 8080b58:	6083      	str	r3, [r0, #8]
	flags = 0;
 8080b5a:	7303      	strb	r3, [r0, #12]
	dtoa(value, decimalPlaces, buf);
 8080b5c:	b2d5      	uxtb	r5, r2
 8080b5e:	4608      	mov	r0, r1
 8080b60:	f000 fe74 	bl	808184c <__aeabi_f2d>
 8080b64:	462a      	mov	r2, r5
 8080b66:	ab01      	add	r3, sp, #4
 8080b68:	f7ff ff0e 	bl	8080988 <_Z4dtoadhPc>
        *this = buf;
 8080b6c:	4620      	mov	r0, r4
 8080b6e:	a901      	add	r1, sp, #4
 8080b70:	f7ff ffdb 	bl	8080b2a <_ZN6StringaSEPKc>
}
 8080b74:	4620      	mov	r0, r4
 8080b76:	b00b      	add	sp, #44	; 0x2c
 8080b78:	bd30      	pop	{r4, r5, pc}

08080b7a <_ZN6String6concatEPKcj>:
{
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
 8080b7a:	b570      	push	{r4, r5, r6, lr}
 8080b7c:	4605      	mov	r5, r0
	unsigned int newlen = len + length;
	if (!cstr) return 0;
 8080b7e:	460e      	mov	r6, r1
 8080b80:	b909      	cbnz	r1, 8080b86 <_ZN6String6concatEPKcj+0xc>
 8080b82:	2000      	movs	r0, #0
	if (length == 0) return 1;
	if (!reserve(newlen)) return 0;
	strcpy(buffer + len, cstr);
	len = newlen;
	return 1;
}
 8080b84:	bd70      	pop	{r4, r5, r6, pc}
	if (length == 0) return 1;
 8080b86:	b16a      	cbz	r2, 8080ba4 <_ZN6String6concatEPKcj+0x2a>
	unsigned int newlen = len + length;
 8080b88:	6884      	ldr	r4, [r0, #8]
 8080b8a:	4414      	add	r4, r2
	if (!reserve(newlen)) return 0;
 8080b8c:	4621      	mov	r1, r4
 8080b8e:	f7ff ff73 	bl	8080a78 <_ZN6String7reserveEj>
 8080b92:	2800      	cmp	r0, #0
 8080b94:	d0f5      	beq.n	8080b82 <_ZN6String6concatEPKcj+0x8>
	strcpy(buffer + len, cstr);
 8080b96:	6828      	ldr	r0, [r5, #0]
 8080b98:	68ab      	ldr	r3, [r5, #8]
 8080b9a:	4631      	mov	r1, r6
 8080b9c:	4418      	add	r0, r3
 8080b9e:	f001 fca7 	bl	80824f0 <strcpy>
	len = newlen;
 8080ba2:	60ac      	str	r4, [r5, #8]
	if (length == 0) return 1;
 8080ba4:	2001      	movs	r0, #1
 8080ba6:	e7ed      	b.n	8080b84 <_ZN6String6concatEPKcj+0xa>

08080ba8 <_ZN6String6concatERKS_>:
	return concat(s.buffer, s.len);
 8080ba8:	688a      	ldr	r2, [r1, #8]
 8080baa:	6809      	ldr	r1, [r1, #0]
 8080bac:	f7ff bfe5 	b.w	8080b7a <_ZN6String6concatEPKcj>

08080bb0 <_ZplRK15StringSumHelperRK6String>:
/*********************************************/
/*  Concatenate                              */
/*********************************************/

StringSumHelper & operator + (const StringSumHelper &lhs, const String &rhs)
{
 8080bb0:	b510      	push	{r4, lr}
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
 8080bb2:	688a      	ldr	r2, [r1, #8]
 8080bb4:	6809      	ldr	r1, [r1, #0]
{
 8080bb6:	4604      	mov	r4, r0
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
 8080bb8:	f7ff ffdf 	bl	8080b7a <_ZN6String6concatEPKcj>
 8080bbc:	b910      	cbnz	r0, 8080bc4 <_ZplRK15StringSumHelperRK6String+0x14>
 8080bbe:	4620      	mov	r0, r4
 8080bc0:	f7ff ff43 	bl	8080a4a <_ZN6String10invalidateEv>
	return a;
}
 8080bc4:	4620      	mov	r0, r4
 8080bc6:	bd10      	pop	{r4, pc}

08080bc8 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
 8080bc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8080bca:	4606      	mov	r6, r0
 8080bcc:	460d      	mov	r5, r1
  size_t n = 0;
 8080bce:	2400      	movs	r4, #0
 8080bd0:	188f      	adds	r7, r1, r2
  while (size--) {
 8080bd2:	42bd      	cmp	r5, r7
 8080bd4:	d00c      	beq.n	8080bf0 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
 8080bd6:	6833      	ldr	r3, [r6, #0]
 8080bd8:	4630      	mov	r0, r6
 8080bda:	689b      	ldr	r3, [r3, #8]
 8080bdc:	f815 1b01 	ldrb.w	r1, [r5], #1
 8080be0:	4798      	blx	r3
     if (chunk>=0)
 8080be2:	1e03      	subs	r3, r0, #0
 8080be4:	db01      	blt.n	8080bea <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
 8080be6:	441c      	add	r4, r3
  while (size--) {
 8080be8:	e7f3      	b.n	8080bd2 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
 8080bea:	2c00      	cmp	r4, #0
 8080bec:	bf08      	it	eq
 8080bee:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
 8080bf0:	4620      	mov	r0, r4
 8080bf2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08080bf4 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
 8080bf4:	b570      	push	{r4, r5, r6, lr}
 8080bf6:	4605      	mov	r5, r0
      if (str == NULL) return 0;
 8080bf8:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
 8080bfa:	4608      	mov	r0, r1
      if (str == NULL) return 0;
 8080bfc:	b149      	cbz	r1, 8080c12 <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
 8080bfe:	f001 fc7f 	bl	8082500 <strlen>
 8080c02:	682b      	ldr	r3, [r5, #0]
 8080c04:	4602      	mov	r2, r0
 8080c06:	4621      	mov	r1, r4
 8080c08:	4628      	mov	r0, r5
    }
 8080c0a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      return write((const uint8_t *)str, strlen(str));
 8080c0e:	68db      	ldr	r3, [r3, #12]
 8080c10:	4718      	bx	r3
    }
 8080c12:	bd70      	pop	{r4, r5, r6, pc}

08080c14 <_ZN5Print5printEPKc>:

size_t Print::print(const char str[])
{
 8080c14:	b508      	push	{r3, lr}
  return write(str);
 8080c16:	f7ff ffed 	bl	8080bf4 <_ZN5Print5writeEPKc>
}
 8080c1a:	bd08      	pop	{r3, pc}

08080c1c <_ZN5Print5printEc>:

size_t Print::print(char c)
{
  return write(c);
 8080c1c:	6803      	ldr	r3, [r0, #0]
 8080c1e:	689b      	ldr	r3, [r3, #8]
 8080c20:	4718      	bx	r3

08080c22 <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
 8080c22:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
 8080c24:	210d      	movs	r1, #13
{
 8080c26:	4605      	mov	r5, r0
  size_t n = print('\r');
 8080c28:	f7ff fff8 	bl	8080c1c <_ZN5Print5printEc>
  n += print('\n');
 8080c2c:	210a      	movs	r1, #10
  size_t n = print('\r');
 8080c2e:	4604      	mov	r4, r0
  n += print('\n');
 8080c30:	4628      	mov	r0, r5
 8080c32:	f7ff fff3 	bl	8080c1c <_ZN5Print5printEc>
  return n;
}
 8080c36:	4420      	add	r0, r4
 8080c38:	bd38      	pop	{r3, r4, r5, pc}

08080c3a <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
 8080c3a:	b538      	push	{r3, r4, r5, lr}
 8080c3c:	4605      	mov	r5, r0
  return write(str);
 8080c3e:	f7ff ffd9 	bl	8080bf4 <_ZN5Print5writeEPKc>
 8080c42:	4604      	mov	r4, r0
  size_t n = print(c);
  n += println();
 8080c44:	4628      	mov	r0, r5
 8080c46:	f7ff ffec 	bl	8080c22 <_ZN5Print7printlnEv>
  return n;
}
 8080c4a:	4420      	add	r0, r4
 8080c4c:	bd38      	pop	{r3, r4, r5, pc}

08080c4e <_ZN5Print11printNumberEmh>:

size_t Print::printNumber(unsigned long n, uint8_t base) {
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
 8080c4e:	2300      	movs	r3, #0

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
 8080c50:	2a01      	cmp	r2, #1
 8080c52:	bf98      	it	ls
 8080c54:	220a      	movls	r2, #10
size_t Print::printNumber(unsigned long n, uint8_t base) {
 8080c56:	b530      	push	{r4, r5, lr}
 8080c58:	b08b      	sub	sp, #44	; 0x2c
 8080c5a:	460c      	mov	r4, r1
  *str = '\0';
 8080c5c:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  if (base < 2) base = 10;
 8080c60:	a909      	add	r1, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
 8080c62:	4625      	mov	r5, r4
 8080c64:	fbb4 f4f2 	udiv	r4, r4, r2
   char c = m - base * n;
 8080c68:	fb04 5312 	mls	r3, r4, r2, r5
 8080c6c:	b2db      	uxtb	r3, r3
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
 8080c6e:	2b09      	cmp	r3, #9
 8080c70:	bf94      	ite	ls
 8080c72:	3330      	addls	r3, #48	; 0x30
 8080c74:	3337      	addhi	r3, #55	; 0x37
 8080c76:	b2db      	uxtb	r3, r3
  } while(n);
 8080c78:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
 8080c7a:	f801 3d01 	strb.w	r3, [r1, #-1]!
  } while(n);
 8080c7e:	d9f0      	bls.n	8080c62 <_ZN5Print11printNumberEmh+0x14>

  return write(str);
 8080c80:	f7ff ffb8 	bl	8080bf4 <_ZN5Print5writeEPKc>
}
 8080c84:	b00b      	add	sp, #44	; 0x2c
 8080c86:	bd30      	pop	{r4, r5, pc}

08080c88 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
 8080c88:	4b01      	ldr	r3, [pc, #4]	; (8080c90 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
 8080c8a:	4a02      	ldr	r2, [pc, #8]	; (8080c94 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
 8080c8c:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
 8080c8e:	4770      	bx	lr
 8080c90:	200001c4 	.word	0x200001c4
 8080c94:	080825b4 	.word	0x080825b4

08080c98 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
 8080c98:	4b02      	ldr	r3, [pc, #8]	; (8080ca4 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
 8080c9a:	681a      	ldr	r2, [r3, #0]
 8080c9c:	4b02      	ldr	r3, [pc, #8]	; (8080ca8 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
 8080c9e:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
 8080ca0:	4770      	bx	lr
 8080ca2:	bf00      	nop
 8080ca4:	20000000 	.word	0x20000000
 8080ca8:	200001c8 	.word	0x200001c8

08080cac <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
 8080cac:	2100      	movs	r1, #0
 8080cae:	f7ff bd5f 	b.w	8080770 <system_delay_ms>

08080cb2 <_ZNSt14_Function_baseD1Ev>:
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
 8080cb2:	b510      	push	{r4, lr}
    {
      if (_M_manager)
 8080cb4:	6883      	ldr	r3, [r0, #8]
    ~_Function_base()
 8080cb6:	4604      	mov	r4, r0
      if (_M_manager)
 8080cb8:	b113      	cbz	r3, 8080cc0 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 8080cba:	2203      	movs	r2, #3
 8080cbc:	4601      	mov	r1, r0
 8080cbe:	4798      	blx	r3
    }
 8080cc0:	4620      	mov	r0, r4
 8080cc2:	bd10      	pop	{r4, pc}

08080cc4 <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
 8080cc4:	b510      	push	{r4, lr}
 8080cc6:	4604      	mov	r4, r0
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 8080cc8:	f7ff fff3 	bl	8080cb2 <_ZNSt14_Function_baseD1Ev>
 8080ccc:	4620      	mov	r0, r4
 8080cce:	bd10      	pop	{r4, pc}

08080cd0 <_GLOBAL__sub_I_RGB>:
    _Function_base() : _M_manager(nullptr) { }
 8080cd0:	2300      	movs	r3, #0
 8080cd2:	4803      	ldr	r0, [pc, #12]	; (8080ce0 <_GLOBAL__sub_I_RGB+0x10>)
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
 8080cd4:	4a03      	ldr	r2, [pc, #12]	; (8080ce4 <_GLOBAL__sub_I_RGB+0x14>)
 8080cd6:	4904      	ldr	r1, [pc, #16]	; (8080ce8 <_GLOBAL__sub_I_RGB+0x18>)
 8080cd8:	6083      	str	r3, [r0, #8]
 8080cda:	f000 bc45 	b.w	8081568 <__aeabi_atexit>
 8080cde:	bf00      	nop
 8080ce0:	200001cc 	.word	0x200001cc
 8080ce4:	20000068 	.word	0x20000068
 8080ce8:	08080cc5 	.word	0x08080cc5

08080cec <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
 8080cec:	4b01      	ldr	r3, [pc, #4]	; (8080cf4 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
 8080cee:	6018      	str	r0, [r3, #0]
    }, nullptr);
 8080cf0:	4770      	bx	lr
 8080cf2:	bf00      	nop
 8080cf4:	20000004 	.word	0x20000004

08080cf8 <serialEventRun>:
{
 8080cf8:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
 8080cfa:	4b17      	ldr	r3, [pc, #92]	; (8080d58 <serialEventRun+0x60>)
 8080cfc:	b143      	cbz	r3, 8080d10 <serialEventRun+0x18>
 8080cfe:	f000 f961 	bl	8080fc4 <_Z16_fetch_usbserialv>
 8080d02:	6803      	ldr	r3, [r0, #0]
 8080d04:	691b      	ldr	r3, [r3, #16]
 8080d06:	4798      	blx	r3
 8080d08:	2800      	cmp	r0, #0
 8080d0a:	dd01      	ble.n	8080d10 <serialEventRun+0x18>
        serialEvent();
 8080d0c:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
 8080d10:	4b12      	ldr	r3, [pc, #72]	; (8080d5c <serialEventRun+0x64>)
 8080d12:	b143      	cbz	r3, 8080d26 <serialEventRun+0x2e>
 8080d14:	f000 fa78 	bl	8081208 <_Z22__fetch_global_Serial1v>
 8080d18:	6803      	ldr	r3, [r0, #0]
 8080d1a:	691b      	ldr	r3, [r3, #16]
 8080d1c:	4798      	blx	r3
 8080d1e:	2800      	cmp	r0, #0
 8080d20:	dd01      	ble.n	8080d26 <serialEventRun+0x2e>
        serialEvent1();
 8080d22:	f3af 8000 	nop.w
    if (serialEventRun2) serialEventRun2();
 8080d26:	4b0e      	ldr	r3, [pc, #56]	; (8080d60 <serialEventRun+0x68>)
 8080d28:	b10b      	cbz	r3, 8080d2e <serialEventRun+0x36>
 8080d2a:	f3af 8000 	nop.w
    if (serialEventRun4) serialEventRun4();
 8080d2e:	4b0d      	ldr	r3, [pc, #52]	; (8080d64 <serialEventRun+0x6c>)
 8080d30:	b10b      	cbz	r3, 8080d36 <serialEventRun+0x3e>
 8080d32:	f3af 8000 	nop.w
    if (serialEventRun5) serialEventRun5();
 8080d36:	4b0c      	ldr	r3, [pc, #48]	; (8080d68 <serialEventRun+0x70>)
 8080d38:	b10b      	cbz	r3, 8080d3e <serialEventRun+0x46>
 8080d3a:	f3af 8000 	nop.w
    if (usbSerialEvent1 && USBSerial1.available()>0)
 8080d3e:	4b0b      	ldr	r3, [pc, #44]	; (8080d6c <serialEventRun+0x74>)
 8080d40:	b143      	cbz	r3, 8080d54 <serialEventRun+0x5c>
 8080d42:	f000 f97d 	bl	8081040 <_Z17_fetch_usbserial1v>
 8080d46:	6803      	ldr	r3, [r0, #0]
 8080d48:	691b      	ldr	r3, [r3, #16]
 8080d4a:	4798      	blx	r3
 8080d4c:	2800      	cmp	r0, #0
 8080d4e:	dd01      	ble.n	8080d54 <serialEventRun+0x5c>
        usbSerialEvent1();
 8080d50:	f3af 8000 	nop.w
}
 8080d54:	bd08      	pop	{r3, pc}
 8080d56:	bf00      	nop
	...

08080d70 <_post_loop>:
{
 8080d70:	b508      	push	{r3, lr}
	serialEventRun();
 8080d72:	f7ff ffc1 	bl	8080cf8 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
 8080d76:	f7ff fc13 	bl	80805a0 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
 8080d7a:	4b01      	ldr	r3, [pc, #4]	; (8080d80 <_post_loop+0x10>)
 8080d7c:	6018      	str	r0, [r3, #0]
}
 8080d7e:	bd08      	pop	{r3, pc}
 8080d80:	20000680 	.word	0x20000680

08080d84 <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
 8080d84:	4802      	ldr	r0, [pc, #8]	; (8080d90 <_Z33system_initialize_user_backup_ramv+0xc>)
 8080d86:	4a03      	ldr	r2, [pc, #12]	; (8080d94 <_Z33system_initialize_user_backup_ramv+0x10>)
 8080d88:	4903      	ldr	r1, [pc, #12]	; (8080d98 <_Z33system_initialize_user_backup_ramv+0x14>)
 8080d8a:	1a12      	subs	r2, r2, r0
 8080d8c:	f001 bb76 	b.w	808247c <memcpy>
 8080d90:	40024000 	.word	0x40024000
 8080d94:	40024004 	.word	0x40024004
 8080d98:	08082708 	.word	0x08082708

08080d9c <_Z27ctrl_request_custom_handlerP12ctrl_request>:
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 8080d9c:	2300      	movs	r3, #0
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
 8080d9e:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 8080da0:	461a      	mov	r2, r3
 8080da2:	f06f 0177 	mvn.w	r1, #119	; 0x77
 8080da6:	9300      	str	r3, [sp, #0]
 8080da8:	f7ff fcf4 	bl	8080794 <system_ctrl_set_result>
}
 8080dac:	b003      	add	sp, #12
 8080dae:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08080db4 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
 8080db4:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
 8080db6:	8843      	ldrh	r3, [r0, #2]
 8080db8:	2b0a      	cmp	r3, #10
 8080dba:	d008      	beq.n	8080dce <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
 8080dbc:	2b50      	cmp	r3, #80	; 0x50
 8080dbe:	d10b      	bne.n	8080dd8 <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
 8080dc0:	4b09      	ldr	r3, [pc, #36]	; (8080de8 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
 8080dc2:	681b      	ldr	r3, [r3, #0]
 8080dc4:	b14b      	cbz	r3, 8080dda <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
 8080dc6:	b003      	add	sp, #12
 8080dc8:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
 8080dcc:	4718      	bx	r3
        ctrl_request_custom_handler(req);
 8080dce:	f7ff ffe5 	bl	8080d9c <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
 8080dd2:	b003      	add	sp, #12
 8080dd4:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 8080dd8:	2300      	movs	r3, #0
 8080dda:	461a      	mov	r2, r3
 8080ddc:	f06f 0177 	mvn.w	r1, #119	; 0x77
 8080de0:	9300      	str	r3, [sp, #0]
 8080de2:	f7ff fcd7 	bl	8080794 <system_ctrl_set_result>
}
 8080de6:	e7f4      	b.n	8080dd2 <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
 8080de8:	200001e0 	.word	0x200001e0

08080dec <module_user_init_hook>:
{
 8080dec:	b538      	push	{r3, r4, r5, lr}
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
 8080dee:	4c12      	ldr	r4, [pc, #72]	; (8080e38 <module_user_init_hook+0x4c>)
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
 8080df0:	2100      	movs	r1, #0
 8080df2:	4812      	ldr	r0, [pc, #72]	; (8080e3c <module_user_init_hook+0x50>)
 8080df4:	f7ff fd48 	bl	8080888 <newlib_impure_ptr_callback>
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
 8080df8:	4d11      	ldr	r5, [pc, #68]	; (8080e40 <module_user_init_hook+0x54>)
 8080dfa:	6823      	ldr	r3, [r4, #0]
 8080dfc:	42ab      	cmp	r3, r5
 8080dfe:	bf0c      	ite	eq
 8080e00:	2201      	moveq	r2, #1
 8080e02:	2200      	movne	r2, #0
 8080e04:	4b0f      	ldr	r3, [pc, #60]	; (8080e44 <module_user_init_hook+0x58>)
 8080e06:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
 8080e08:	d002      	beq.n	8080e10 <module_user_init_hook+0x24>
        system_initialize_user_backup_ram();
 8080e0a:	f7ff ffbb 	bl	8080d84 <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
 8080e0e:	6025      	str	r5, [r4, #0]
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
 8080e10:	f7ff fbbe 	bl	8080590 <HAL_RNG_GetRandomNumber>
 8080e14:	4604      	mov	r4, r0
    srand(seed);
 8080e16:	f001 fb47 	bl	80824a8 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
 8080e1a:	4b0b      	ldr	r3, [pc, #44]	; (8080e48 <module_user_init_hook+0x5c>)
 8080e1c:	b113      	cbz	r3, 8080e24 <module_user_init_hook+0x38>
        random_seed_from_cloud(seed);
 8080e1e:	4620      	mov	r0, r4
 8080e20:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
 8080e24:	2100      	movs	r1, #0
 8080e26:	4808      	ldr	r0, [pc, #32]	; (8080e48 <module_user_init_hook+0x5c>)
 8080e28:	f7ff fd0e 	bl	8080848 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
 8080e2c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
 8080e30:	2100      	movs	r1, #0
 8080e32:	4806      	ldr	r0, [pc, #24]	; (8080e4c <module_user_init_hook+0x60>)
 8080e34:	f7ff bca4 	b.w	8080780 <system_ctrl_set_app_request_handler>
 8080e38:	40024000 	.word	0x40024000
 8080e3c:	08080ced 	.word	0x08080ced
 8080e40:	9a271c1e 	.word	0x9a271c1e
 8080e44:	200001dc 	.word	0x200001dc
 8080e48:	00000000 	.word	0x00000000
 8080e4c:	08080db5 	.word	0x08080db5

08080e50 <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
 8080e50:	4770      	bx	lr

08080e52 <_ZN9IPAddressD0Ev>:
 8080e52:	b510      	push	{r4, lr}
 8080e54:	4604      	mov	r4, r0
 8080e56:	2108      	movs	r1, #8
 8080e58:	f000 fb8b 	bl	8081572 <_ZdlPvj>
 8080e5c:	4620      	mov	r0, r4
 8080e5e:	bd10      	pop	{r4, pc}

08080e60 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
 8080e60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8080e62:	460e      	mov	r6, r1
 8080e64:	2400      	movs	r4, #0
 8080e66:	f100 0708 	add.w	r7, r0, #8
 8080e6a:	1d05      	adds	r5, r0, #4
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
 8080e6c:	f817 1d01 	ldrb.w	r1, [r7, #-1]!
 8080e70:	220a      	movs	r2, #10
 8080e72:	4630      	mov	r0, r6
 8080e74:	f7ff feeb 	bl	8080c4e <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 8080e78:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
 8080e7a:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
 8080e7c:	d101      	bne.n	8080e82 <_ZNK9IPAddress7printToER5Print+0x22>
    }
    return n;
}
 8080e7e:	4620      	mov	r0, r4
 8080e80:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if (n)
 8080e82:	2c00      	cmp	r4, #0
 8080e84:	d0f2      	beq.n	8080e6c <_ZNK9IPAddress7printToER5Print+0xc>
            n += p.print('.');
 8080e86:	212e      	movs	r1, #46	; 0x2e
 8080e88:	4630      	mov	r0, r6
 8080e8a:	f7ff fec7 	bl	8080c1c <_ZN5Print5printEc>
 8080e8e:	4404      	add	r4, r0
 8080e90:	e7ec      	b.n	8080e6c <_ZNK9IPAddress7printToER5Print+0xc>
	...

08080e94 <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
 8080e94:	4a02      	ldr	r2, [pc, #8]	; (8080ea0 <_ZN9IPAddressC1Ev+0xc>)
 8080e96:	6002      	str	r2, [r0, #0]
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
 8080e98:	2200      	movs	r2, #0
 8080e9a:	6042      	str	r2, [r0, #4]
}
 8080e9c:	4770      	bx	lr
 8080e9e:	bf00      	nop
 8080ea0:	080825dc 	.word	0x080825dc

08080ea4 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
 8080ea4:	4a02      	ldr	r2, [pc, #8]	; (8080eb0 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xc>)
 8080ea6:	6002      	str	r2, [r0, #0]
    memcpy(&this->address, &address, sizeof(address));
 8080ea8:	680a      	ldr	r2, [r1, #0]
 8080eaa:	6042      	str	r2, [r0, #4]
}
 8080eac:	4770      	bx	lr
 8080eae:	bf00      	nop
 8080eb0:	080825dc 	.word	0x080825dc

08080eb4 <_ZN9IPAddressC1Em>:
IPAddress::IPAddress(uint32_t address)
 8080eb4:	4a01      	ldr	r2, [pc, #4]	; (8080ebc <_ZN9IPAddressC1Em+0x8>)
    address.ipv4 = ipv4;
 8080eb6:	e9c0 2100 	strd	r2, r1, [r0]
}
 8080eba:	4770      	bx	lr
 8080ebc:	080825dc 	.word	0x080825dc

08080ec0 <_ZN9IPAddress8set_ipv4Ehhhh>:
{
 8080ec0:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
 8080ec2:	f89d 4008 	ldrb.w	r4, [sp, #8]
 8080ec6:	ea44 2403 	orr.w	r4, r4, r3, lsl #8
 8080eca:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8080ece:	ea44 6401 	orr.w	r4, r4, r1, lsl #24
 8080ed2:	6044      	str	r4, [r0, #4]
}
 8080ed4:	bd10      	pop	{r4, pc}
	...

08080ed8 <_ZN9IPAddressC1Ehhhh>:
IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
 8080ed8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8080eda:	4d04      	ldr	r5, [pc, #16]	; (8080eec <_ZN9IPAddressC1Ehhhh+0x14>)
 8080edc:	6005      	str	r5, [r0, #0]
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
 8080ede:	f89d 5018 	ldrb.w	r5, [sp, #24]
 8080ee2:	9500      	str	r5, [sp, #0]
 8080ee4:	f7ff ffec 	bl	8080ec0 <_ZN9IPAddress8set_ipv4Ehhhh>
}
 8080ee8:	b003      	add	sp, #12
 8080eea:	bd30      	pop	{r4, r5, pc}
 8080eec:	080825dc 	.word	0x080825dc

08080ef0 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 8080ef0:	7441      	strb	r1, [r0, #17]
}
 8080ef2:	4770      	bx	lr

08080ef4 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
 8080ef4:	4770      	bx	lr

08080ef6 <_ZN9USBSerial4readEv>:
{
 8080ef6:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
 8080ef8:	2100      	movs	r1, #0
 8080efa:	7c00      	ldrb	r0, [r0, #16]
 8080efc:	f7ff fc18 	bl	8080730 <HAL_USB_USART_Receive_Data>
}
 8080f00:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 8080f04:	bd08      	pop	{r3, pc}

08080f06 <_ZN9USBSerial4peekEv>:

int USBSerial::peek()
{
 8080f06:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
 8080f08:	2101      	movs	r1, #1
 8080f0a:	7c00      	ldrb	r0, [r0, #16]
 8080f0c:	f7ff fc10 	bl	8080730 <HAL_USB_USART_Receive_Data>
}
 8080f10:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 8080f14:	bd08      	pop	{r3, pc}

08080f16 <_ZN9USBSerial17availableForWriteEv>:
{
 8080f16:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
 8080f18:	7c00      	ldrb	r0, [r0, #16]
 8080f1a:	f7ff fc01 	bl	8080720 <HAL_USB_USART_Available_Data_For_Write>
}
 8080f1e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 8080f22:	bd08      	pop	{r3, pc}

08080f24 <_ZN9USBSerial9availableEv>:
{
 8080f24:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
 8080f26:	7c00      	ldrb	r0, [r0, #16]
 8080f28:	f7ff fbf2 	bl	8080710 <HAL_USB_USART_Available_Data>
}
 8080f2c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 8080f30:	bd08      	pop	{r3, pc}

08080f32 <_ZN9USBSerial5writeEh>:
{
 8080f32:	b538      	push	{r3, r4, r5, lr}
 8080f34:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 8080f36:	7c00      	ldrb	r0, [r0, #16]
{
 8080f38:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 8080f3a:	f7ff fbf1 	bl	8080720 <HAL_USB_USART_Available_Data_For_Write>
 8080f3e:	2800      	cmp	r0, #0
 8080f40:	dc01      	bgt.n	8080f46 <_ZN9USBSerial5writeEh+0x14>
 8080f42:	7c60      	ldrb	r0, [r4, #17]
 8080f44:	b128      	cbz	r0, 8080f52 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
 8080f46:	4629      	mov	r1, r5
 8080f48:	7c20      	ldrb	r0, [r4, #16]
 8080f4a:	f7ff fbf9 	bl	8080740 <HAL_USB_USART_Send_Data>
 8080f4e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
 8080f52:	bd38      	pop	{r3, r4, r5, pc}

08080f54 <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
 8080f54:	7c00      	ldrb	r0, [r0, #16]
 8080f56:	f7ff bbfb 	b.w	8080750 <HAL_USB_USART_Flush_Data>

08080f5a <_ZN9USBSerialD0Ev>:
 8080f5a:	b510      	push	{r4, lr}
 8080f5c:	4604      	mov	r4, r0
 8080f5e:	2114      	movs	r1, #20
 8080f60:	f000 fb07 	bl	8081572 <_ZdlPvj>
 8080f64:	4620      	mov	r0, r4
 8080f66:	bd10      	pop	{r4, pc}

08080f68 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
 8080f68:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
 8080f6a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8080f6e:	4604      	mov	r4, r0
 8080f70:	4608      	mov	r0, r1
 8080f72:	2100      	movs	r1, #0
 8080f74:	e9c4 1301 	strd	r1, r3, [r4, #4]
 8080f78:	4b04      	ldr	r3, [pc, #16]	; (8080f8c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
  _serial = serial;
 8080f7a:	7420      	strb	r0, [r4, #16]
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
 8080f7c:	6023      	str	r3, [r4, #0]
  _blocking = true;
 8080f7e:	2301      	movs	r3, #1
  HAL_USB_USART_Init(_serial, &conf);
 8080f80:	4611      	mov	r1, r2
  _blocking = true;
 8080f82:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
 8080f84:	f7ff fbb4 	bl	80806f0 <HAL_USB_USART_Init>
}
 8080f88:	4620      	mov	r0, r4
 8080f8a:	bd10      	pop	{r4, pc}
 8080f8c:	080825f0 	.word	0x080825f0

08080f90 <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
 8080f90:	2200      	movs	r2, #0
 8080f92:	7c00      	ldrb	r0, [r0, #16]
 8080f94:	f7ff bbb4 	b.w	8080700 <HAL_USB_USART_Begin>

08080f98 <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
 8080f98:	b510      	push	{r4, lr}
 8080f9a:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
 8080f9c:	2214      	movs	r2, #20
 8080f9e:	2100      	movs	r1, #0
 8080fa0:	f001 fa7a 	bl	8082498 <memset>

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t serial_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t serial_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = serial_rx_buffer;
 8080fa4:	4b05      	ldr	r3, [pc, #20]	; (8080fbc <_Z19acquireSerialBufferv+0x24>)
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
 8080fa6:	4620      	mov	r0, r4
  conf.rx_buffer = serial_rx_buffer;
 8080fa8:	6063      	str	r3, [r4, #4]
  conf.tx_buffer = serial_tx_buffer;
 8080faa:	4b05      	ldr	r3, [pc, #20]	; (8080fc0 <_Z19acquireSerialBufferv+0x28>)
 8080fac:	60e3      	str	r3, [r4, #12]
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
 8080fae:	f240 1301 	movw	r3, #257	; 0x101
 8080fb2:	8123      	strh	r3, [r4, #8]
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
 8080fb4:	2381      	movs	r3, #129	; 0x81
 8080fb6:	8223      	strh	r3, [r4, #16]
}
 8080fb8:	bd10      	pop	{r4, pc}
 8080fba:	bf00      	nop
 8080fbc:	20000214 	.word	0x20000214
 8080fc0:	20000315 	.word	0x20000315

08080fc4 <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
 8080fc4:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 8080fc6:	4d0f      	ldr	r5, [pc, #60]	; (8081004 <_Z16_fetch_usbserialv+0x40>)
{
 8080fc8:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
 8080fca:	a801      	add	r0, sp, #4
 8080fcc:	f7ff ffe4 	bl	8080f98 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 8080fd0:	7829      	ldrb	r1, [r5, #0]
 8080fd2:	f3bf 8f5b 	dmb	ish
 8080fd6:	f011 0401 	ands.w	r4, r1, #1
 8080fda:	d110      	bne.n	8080ffe <_Z16_fetch_usbserialv+0x3a>
 8080fdc:	4628      	mov	r0, r5
 8080fde:	f7ff f860 	bl	80800a2 <__cxa_guard_acquire>
 8080fe2:	b160      	cbz	r0, 8080ffe <_Z16_fetch_usbserialv+0x3a>
 8080fe4:	4621      	mov	r1, r4
 8080fe6:	aa01      	add	r2, sp, #4
 8080fe8:	4807      	ldr	r0, [pc, #28]	; (8081008 <_Z16_fetch_usbserialv+0x44>)
 8080fea:	f7ff ffbd 	bl	8080f68 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 8080fee:	4628      	mov	r0, r5
 8080ff0:	f7ff f85c 	bl	80800ac <__cxa_guard_release>
 8080ff4:	4a05      	ldr	r2, [pc, #20]	; (808100c <_Z16_fetch_usbserialv+0x48>)
 8080ff6:	4906      	ldr	r1, [pc, #24]	; (8081010 <_Z16_fetch_usbserialv+0x4c>)
 8080ff8:	4803      	ldr	r0, [pc, #12]	; (8081008 <_Z16_fetch_usbserialv+0x44>)
 8080ffa:	f000 fab5 	bl	8081568 <__aeabi_atexit>
	return _usbserial;
}
 8080ffe:	4802      	ldr	r0, [pc, #8]	; (8081008 <_Z16_fetch_usbserialv+0x44>)
 8081000:	b007      	add	sp, #28
 8081002:	bd30      	pop	{r4, r5, pc}
 8081004:	200001e4 	.word	0x200001e4
 8081008:	200001ec 	.word	0x200001ec
 808100c:	20000068 	.word	0x20000068
 8081010:	08080ef5 	.word	0x08080ef5

08081014 <_Z23acquireUSBSerial1Bufferv>:

#if Wiring_USBSerial1

HAL_USB_USART_Config __attribute__((weak)) acquireUSBSerial1Buffer()
{
 8081014:	b510      	push	{r4, lr}
 8081016:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
 8081018:	2214      	movs	r2, #20
 808101a:	2100      	movs	r1, #0
 808101c:	f001 fa3c 	bl	8082498 <memset>

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t usbserial1_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t usbserial1_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = usbserial1_rx_buffer;
 8081020:	4b05      	ldr	r3, [pc, #20]	; (8081038 <_Z23acquireUSBSerial1Bufferv+0x24>)
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
 8081022:	4620      	mov	r0, r4
  conf.rx_buffer = usbserial1_rx_buffer;
 8081024:	6063      	str	r3, [r4, #4]
  conf.tx_buffer = usbserial1_tx_buffer;
 8081026:	4b05      	ldr	r3, [pc, #20]	; (808103c <_Z23acquireUSBSerial1Bufferv+0x28>)
 8081028:	60e3      	str	r3, [r4, #12]
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
 808102a:	f240 1301 	movw	r3, #257	; 0x101
 808102e:	8123      	strh	r3, [r4, #8]
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
 8081030:	2381      	movs	r3, #129	; 0x81
 8081032:	8223      	strh	r3, [r4, #16]
}
 8081034:	bd10      	pop	{r4, pc}
 8081036:	bf00      	nop
 8081038:	20000396 	.word	0x20000396
 808103c:	20000497 	.word	0x20000497

08081040 <_Z17_fetch_usbserial1v>:

USBSerial& _fetch_usbserial1()
{
 8081040:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 8081042:	4c0f      	ldr	r4, [pc, #60]	; (8081080 <_Z17_fetch_usbserial1v+0x40>)
{
 8081044:	b086      	sub	sp, #24
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
 8081046:	a801      	add	r0, sp, #4
 8081048:	f7ff ffe4 	bl	8081014 <_Z23acquireUSBSerial1Bufferv>
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 808104c:	7823      	ldrb	r3, [r4, #0]
 808104e:	f3bf 8f5b 	dmb	ish
 8081052:	07db      	lsls	r3, r3, #31
 8081054:	d410      	bmi.n	8081078 <_Z17_fetch_usbserial1v+0x38>
 8081056:	4620      	mov	r0, r4
 8081058:	f7ff f823 	bl	80800a2 <__cxa_guard_acquire>
 808105c:	b160      	cbz	r0, 8081078 <_Z17_fetch_usbserial1v+0x38>
 808105e:	2101      	movs	r1, #1
 8081060:	aa01      	add	r2, sp, #4
 8081062:	4808      	ldr	r0, [pc, #32]	; (8081084 <_Z17_fetch_usbserial1v+0x44>)
 8081064:	f7ff ff80 	bl	8080f68 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 8081068:	4620      	mov	r0, r4
 808106a:	f7ff f81f 	bl	80800ac <__cxa_guard_release>
 808106e:	4a06      	ldr	r2, [pc, #24]	; (8081088 <_Z17_fetch_usbserial1v+0x48>)
 8081070:	4906      	ldr	r1, [pc, #24]	; (808108c <_Z17_fetch_usbserial1v+0x4c>)
 8081072:	4804      	ldr	r0, [pc, #16]	; (8081084 <_Z17_fetch_usbserial1v+0x44>)
 8081074:	f000 fa78 	bl	8081568 <__aeabi_atexit>
  return _usbserial1;
}
 8081078:	4802      	ldr	r0, [pc, #8]	; (8081084 <_Z17_fetch_usbserial1v+0x44>)
 808107a:	b006      	add	sp, #24
 808107c:	bd10      	pop	{r4, pc}
 808107e:	bf00      	nop
 8081080:	200001e8 	.word	0x200001e8
 8081084:	20000200 	.word	0x20000200
 8081088:	20000068 	.word	0x20000068
 808108c:	08080ef5 	.word	0x08080ef5

08081090 <_ZN5spark13CellularClass5readyEv>:
        return network_listening(*this, 0, NULL);
    }

    bool ready()
    {
        return network_ready(*this, 0,  NULL);
 8081090:	2200      	movs	r2, #0
 8081092:	6840      	ldr	r0, [r0, #4]
 8081094:	4611      	mov	r1, r2
 8081096:	f7ff bb9f 	b.w	80807d8 <network_ready>

0808109a <_ZN5spark13CellularClass7resolveEPKc>:
    {
        return cellular_command((_CALLBACKPTR_MDM)cb, (void*)param, timeout_ms, format, Fargs...);
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
 808109a:	b5f0      	push	{r4, r5, r6, r7, lr}
    {
        HAL_IPAddress ip = {0};
 808109c:	2600      	movs	r6, #0
    IPAddress resolve(const char* name)
 808109e:	b085      	sub	sp, #20
 80810a0:	4604      	mov	r4, r0
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 80810a2:	4610      	mov	r0, r2
    IPAddress resolve(const char* name)
 80810a4:	460f      	mov	r7, r1
 80810a6:	4615      	mov	r5, r2
        HAL_IPAddress ip = {0};
 80810a8:	9603      	str	r6, [sp, #12]
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 80810aa:	f001 fa29 	bl	8082500 <strlen>
 80810ae:	687b      	ldr	r3, [r7, #4]
 80810b0:	b281      	uxth	r1, r0
 80810b2:	9600      	str	r6, [sp, #0]
 80810b4:	4628      	mov	r0, r5
 80810b6:	aa03      	add	r2, sp, #12
 80810b8:	f7ff fb12 	bl	80806e0 <inet_gethostbyname>
                IPAddress(uint32_t(0)) : IPAddress(ip);
 80810bc:	b130      	cbz	r0, 80810cc <_ZN5spark13CellularClass7resolveEPKc+0x32>
 80810be:	4631      	mov	r1, r6
 80810c0:	4620      	mov	r0, r4
 80810c2:	f7ff fef7 	bl	8080eb4 <_ZN9IPAddressC1Em>
    }
 80810c6:	4620      	mov	r0, r4
 80810c8:	b005      	add	sp, #20
 80810ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
                IPAddress(uint32_t(0)) : IPAddress(ip);
 80810cc:	4620      	mov	r0, r4
 80810ce:	a903      	add	r1, sp, #12
 80810d0:	f7ff fee8 	bl	8080ea4 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
 80810d4:	e7f7      	b.n	80810c6 <_ZN5spark13CellularClass7resolveEPKc+0x2c>

080810d6 <_ZN5spark13CellularClass9listeningEv>:
        return network_listening(*this, 0, NULL);
 80810d6:	2200      	movs	r2, #0
 80810d8:	6840      	ldr	r0, [r0, #4]
 80810da:	4611      	mov	r1, r2
 80810dc:	f7ff bb9c 	b.w	8080818 <network_listening>

080810e0 <_ZN5spark13CellularClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
 80810e0:	2200      	movs	r2, #0
 80810e2:	6840      	ldr	r0, [r0, #4]
 80810e4:	4611      	mov	r1, r2
 80810e6:	f7ff bba7 	b.w	8080838 <network_get_listen_timeout>

080810ea <_ZN5spark13CellularClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
 80810ea:	2200      	movs	r2, #0
 80810ec:	6840      	ldr	r0, [r0, #4]
 80810ee:	f7ff bb9b 	b.w	8080828 <network_set_listen_timeout>

080810f2 <_ZN5spark13CellularClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
 80810f2:	2200      	movs	r2, #0
 80810f4:	6840      	ldr	r0, [r0, #4]
 80810f6:	f081 0101 	eor.w	r1, r1, #1
 80810fa:	f7ff bb85 	b.w	8080808 <network_listen>

080810fe <_ZN5spark13CellularClass3offEv>:
        network_off(*this, 0, 0, NULL);
 80810fe:	2300      	movs	r3, #0
 8081100:	6840      	ldr	r0, [r0, #4]
 8081102:	461a      	mov	r2, r3
 8081104:	4619      	mov	r1, r3
 8081106:	f7ff bb77 	b.w	80807f8 <network_off>

0808110a <_ZN5spark13CellularClass2onEv>:
        network_on(*this, 0, 0, NULL);
 808110a:	2300      	movs	r3, #0
 808110c:	6840      	ldr	r0, [r0, #4]
 808110e:	461a      	mov	r2, r3
 8081110:	4619      	mov	r1, r3
 8081112:	f7ff bb69 	b.w	80807e8 <network_on>

08081116 <_ZN5spark13CellularClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
 8081116:	2200      	movs	r2, #0
 8081118:	6840      	ldr	r0, [r0, #4]
 808111a:	4611      	mov	r1, r2
 808111c:	f7ff bb4c 	b.w	80807b8 <network_connecting>

08081120 <_ZN5spark13CellularClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
 8081120:	2200      	movs	r2, #0
 8081122:	2102      	movs	r1, #2
 8081124:	6840      	ldr	r0, [r0, #4]
 8081126:	f7ff bb4f 	b.w	80807c8 <network_disconnect>

0808112a <_ZN5spark13CellularClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
 808112a:	2300      	movs	r3, #0
 808112c:	6840      	ldr	r0, [r0, #4]
 808112e:	461a      	mov	r2, r3
 8081130:	f7ff bb3a 	b.w	80807a8 <network_connect>

08081134 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv>:
        return (band_get.ok = true);
    }

    CellularClass Cellular;
    // NetworkClass& Network = Cellular;
}
 8081134:	b510      	push	{r4, lr}
    int tx_total;
    int rx_total;

    CellularDataHal()
    {
        memset(this, 0, sizeof(*this));
 8081136:	2428      	movs	r4, #40	; 0x28
 8081138:	4b07      	ldr	r3, [pc, #28]	; (8081158 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x24>)
 808113a:	4622      	mov	r2, r4
 808113c:	4618      	mov	r0, r3
 808113e:	2100      	movs	r1, #0
 8081140:	f001 f9aa 	bl	8082498 <memset>
        cid = -1;
 8081144:	f04f 32ff 	mov.w	r2, #4294967295
 8081148:	6042      	str	r2, [r0, #4]
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
 808114a:	2204      	movs	r2, #4
 808114c:	4b03      	ldr	r3, [pc, #12]	; (808115c <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x28>)
        size = sizeof(*this);
 808114e:	8004      	strh	r4, [r0, #0]
 8081150:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_CELLULAR) {
 8081152:	4a03      	ldr	r2, [pc, #12]	; (8081160 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x2c>)
 8081154:	601a      	str	r2, [r3, #0]
 8081156:	bd10      	pop	{r4, pc}
 8081158:	20000520 	.word	0x20000520
 808115c:	20000518 	.word	0x20000518
 8081160:	08082620 	.word	0x08082620

08081164 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer);
  virtual ~USARTSerial() {};
 8081164:	4770      	bx	lr

08081166 <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 8081166:	7441      	strb	r1, [r0, #17]
}
 8081168:	4770      	bx	lr

0808116a <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
 808116a:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
 808116c:	7c00      	ldrb	r0, [r0, #16]
 808116e:	f7ff fa67 	bl	8080640 <hal_usart_available_data_for_write>
}
 8081172:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 8081176:	bd08      	pop	{r3, pc}

08081178 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
 8081178:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
 808117a:	7c00      	ldrb	r0, [r0, #16]
 808117c:	f7ff fa38 	bl	80805f0 <hal_usart_available>
}
 8081180:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 8081184:	bd08      	pop	{r3, pc}

08081186 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
 8081186:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
 8081188:	7c00      	ldrb	r0, [r0, #16]
 808118a:	f7ff fa41 	bl	8080610 <hal_usart_peek>
}
 808118e:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 8081192:	bd08      	pop	{r3, pc}

08081194 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
 8081194:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
 8081196:	7c00      	ldrb	r0, [r0, #16]
 8081198:	f7ff fa32 	bl	8080600 <hal_usart_read>
}
 808119c:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 80811a0:	bd08      	pop	{r3, pc}

080811a2 <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
 80811a2:	7c00      	ldrb	r0, [r0, #16]
 80811a4:	f7ff ba3c 	b.w	8080620 <hal_usart_flush>

080811a8 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
 80811a8:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
 80811aa:	7c46      	ldrb	r6, [r0, #17]
{
 80811ac:	4604      	mov	r4, r0
 80811ae:	460d      	mov	r5, r1
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
 80811b0:	b12e      	cbz	r6, 80811be <_ZN11USARTSerial5writeEh+0x16>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
 80811b2:	4629      	mov	r1, r5
 80811b4:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
 80811b6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	  return hal_usart_write(_serial, c);
 80811ba:	f7ff ba11 	b.w	80805e0 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
 80811be:	7c00      	ldrb	r0, [r0, #16]
 80811c0:	f7ff fa3e 	bl	8080640 <hal_usart_available_data_for_write>
 80811c4:	2800      	cmp	r0, #0
 80811c6:	dcf4      	bgt.n	80811b2 <_ZN11USARTSerial5writeEh+0xa>
}
 80811c8:	4630      	mov	r0, r6
 80811ca:	bd70      	pop	{r4, r5, r6, pc}

080811cc <_ZN11USARTSerialD0Ev>:
 80811cc:	b510      	push	{r4, lr}
 80811ce:	4604      	mov	r4, r0
 80811d0:	2114      	movs	r1, #20
 80811d2:	f000 f9ce 	bl	8081572 <_ZdlPvj>
 80811d6:	4620      	mov	r0, r4
 80811d8:	bd10      	pop	{r4, pc}
	...

080811dc <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>:
 80811dc:	f04f 0c00 	mov.w	ip, #0
USARTSerial::USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer)
 80811e0:	b510      	push	{r4, lr}
 80811e2:	4604      	mov	r4, r0
 80811e4:	4608      	mov	r0, r1
 80811e6:	4611      	mov	r1, r2
 80811e8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80811ec:	e9c4 c201 	strd	ip, r2, [r4, #4]
 80811f0:	4a04      	ldr	r2, [pc, #16]	; (8081204 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_+0x28>)
  _serial = serial;
 80811f2:	7420      	strb	r0, [r4, #16]
USARTSerial::USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer)
 80811f4:	6022      	str	r2, [r4, #0]
  _blocking = true;
 80811f6:	2201      	movs	r2, #1
 80811f8:	7462      	strb	r2, [r4, #17]
  hal_usart_init(serial, rx_buffer, tx_buffer);
 80811fa:	461a      	mov	r2, r3
 80811fc:	f7ff f9e8 	bl	80805d0 <hal_usart_init>
}
 8081200:	4620      	mov	r0, r4
 8081202:	bd10      	pop	{r4, pc}
 8081204:	08082654 	.word	0x08082654

08081208 <_Z22__fetch_global_Serial1v>:
static hal_usart_ring_buffer_t* serial1_rx_buffer = nullptr;
static hal_usart_ring_buffer_t* serial1_tx_buffer = nullptr;
#endif

USARTSerial& __fetch_global_Serial1()
{
 8081208:	b538      	push	{r3, r4, r5, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
 808120a:	4d0d      	ldr	r5, [pc, #52]	; (8081240 <_Z22__fetch_global_Serial1v+0x38>)
 808120c:	7829      	ldrb	r1, [r5, #0]
 808120e:	f3bf 8f5b 	dmb	ish
 8081212:	f011 0401 	ands.w	r4, r1, #1
 8081216:	d111      	bne.n	808123c <_Z22__fetch_global_Serial1v+0x34>
 8081218:	4628      	mov	r0, r5
 808121a:	f7fe ff42 	bl	80800a2 <__cxa_guard_acquire>
 808121e:	b168      	cbz	r0, 808123c <_Z22__fetch_global_Serial1v+0x34>
 8081220:	4621      	mov	r1, r4
 8081222:	4a08      	ldr	r2, [pc, #32]	; (8081244 <_Z22__fetch_global_Serial1v+0x3c>)
 8081224:	4b08      	ldr	r3, [pc, #32]	; (8081248 <_Z22__fetch_global_Serial1v+0x40>)
 8081226:	4809      	ldr	r0, [pc, #36]	; (808124c <_Z22__fetch_global_Serial1v+0x44>)
 8081228:	f7ff ffd8 	bl	80811dc <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>
 808122c:	4628      	mov	r0, r5
 808122e:	f7fe ff3d 	bl	80800ac <__cxa_guard_release>
 8081232:	4a07      	ldr	r2, [pc, #28]	; (8081250 <_Z22__fetch_global_Serial1v+0x48>)
 8081234:	4907      	ldr	r1, [pc, #28]	; (8081254 <_Z22__fetch_global_Serial1v+0x4c>)
 8081236:	4805      	ldr	r0, [pc, #20]	; (808124c <_Z22__fetch_global_Serial1v+0x44>)
 8081238:	f000 f996 	bl	8081568 <__aeabi_atexit>
    serial1_tx_buffer = new hal_usart_ring_buffer_t();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
 808123c:	4803      	ldr	r0, [pc, #12]	; (808124c <_Z22__fetch_global_Serial1v+0x44>)
 808123e:	bd38      	pop	{r3, r4, r5, pc}
 8081240:	20000548 	.word	0x20000548
 8081244:	2000054c 	.word	0x2000054c
 8081248:	200005d0 	.word	0x200005d0
 808124c:	20000654 	.word	0x20000654
 8081250:	20000068 	.word	0x20000068
 8081254:	08081165 	.word	0x08081165

08081258 <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
 8081258:	4770      	bx	lr

0808125a <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
 808125a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 808125c:	4606      	mov	r6, r0
 808125e:	4615      	mov	r5, r2
 8081260:	460c      	mov	r4, r1
 8081262:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
 8081264:	42bc      	cmp	r4, r7
 8081266:	d006      	beq.n	8081276 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
 8081268:	6833      	ldr	r3, [r6, #0]
 808126a:	4630      	mov	r0, r6
 808126c:	689b      	ldr	r3, [r3, #8]
 808126e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8081272:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
 8081274:	e7f6      	b.n	8081264 <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
 8081276:	4628      	mov	r0, r5
 8081278:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0808127a <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
 808127a:	2200      	movs	r2, #0
 808127c:	7c00      	ldrb	r0, [r0, #16]
 808127e:	f7ff b9e7 	b.w	8080650 <hal_i2c_write>

08081282 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
 8081282:	2100      	movs	r1, #0
 8081284:	7c00      	ldrb	r0, [r0, #16]
 8081286:	f7ff b9eb 	b.w	8080660 <hal_i2c_available>

0808128a <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
 808128a:	2100      	movs	r1, #0
 808128c:	7c00      	ldrb	r0, [r0, #16]
 808128e:	f7ff b9ef 	b.w	8080670 <hal_i2c_read>

08081292 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
 8081292:	2100      	movs	r1, #0
 8081294:	7c00      	ldrb	r0, [r0, #16]
 8081296:	f7ff b9f3 	b.w	8080680 <hal_i2c_peek>

0808129a <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
 808129a:	2100      	movs	r1, #0
 808129c:	7c00      	ldrb	r0, [r0, #16]
 808129e:	f7ff b9f7 	b.w	8080690 <hal_i2c_flush>

080812a2 <_ZN7TwoWireD0Ev>:
 80812a2:	b510      	push	{r4, lr}
 80812a4:	4604      	mov	r4, r0
 80812a6:	2114      	movs	r1, #20
 80812a8:	f000 f963 	bl	8081572 <_ZdlPvj>
 80812ac:	4620      	mov	r0, r4
 80812ae:	bd10      	pop	{r4, pc}

080812b0 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
 80812b0:	b510      	push	{r4, lr}
 80812b2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80812b6:	4604      	mov	r4, r0
 80812b8:	4608      	mov	r0, r1
 80812ba:	2100      	movs	r1, #0
 80812bc:	e9c4 1301 	strd	r1, r3, [r4, #4]
 80812c0:	4b03      	ldr	r3, [pc, #12]	; (80812d0 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x20>)
  hal_i2c_init(_i2c, &conf);
 80812c2:	4611      	mov	r1, r2
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
 80812c4:	6023      	str	r3, [r4, #0]
  _i2c = i2c;
 80812c6:	7420      	strb	r0, [r4, #16]
  hal_i2c_init(_i2c, &conf);
 80812c8:	f7ff f9f2 	bl	80806b0 <hal_i2c_init>
}
 80812cc:	4620      	mov	r0, r4
 80812ce:	bd10      	pop	{r4, pc}
 80812d0:	08082684 	.word	0x08082684

080812d4 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
 80812d4:	2300      	movs	r3, #0
 80812d6:	6840      	ldr	r0, [r0, #4]
 80812d8:	461a      	mov	r2, r3
 80812da:	f7ff ba65 	b.w	80807a8 <network_connect>

080812de <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
 80812de:	2200      	movs	r2, #0
 80812e0:	2102      	movs	r1, #2
 80812e2:	6840      	ldr	r0, [r0, #4]
 80812e4:	f7ff ba70 	b.w	80807c8 <network_disconnect>

080812e8 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
 80812e8:	2200      	movs	r2, #0
 80812ea:	6840      	ldr	r0, [r0, #4]
 80812ec:	4611      	mov	r1, r2
 80812ee:	f7ff ba63 	b.w	80807b8 <network_connecting>

080812f2 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
 80812f2:	2200      	movs	r2, #0
 80812f4:	6840      	ldr	r0, [r0, #4]
 80812f6:	4611      	mov	r1, r2
 80812f8:	f7ff ba6e 	b.w	80807d8 <network_ready>

080812fc <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
 80812fc:	2300      	movs	r3, #0
 80812fe:	6840      	ldr	r0, [r0, #4]
 8081300:	461a      	mov	r2, r3
 8081302:	4619      	mov	r1, r3
 8081304:	f7ff ba70 	b.w	80807e8 <network_on>

08081308 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
 8081308:	2300      	movs	r3, #0
 808130a:	6840      	ldr	r0, [r0, #4]
 808130c:	461a      	mov	r2, r3
 808130e:	4619      	mov	r1, r3
 8081310:	f7ff ba72 	b.w	80807f8 <network_off>

08081314 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
 8081314:	2200      	movs	r2, #0
 8081316:	6840      	ldr	r0, [r0, #4]
 8081318:	f081 0101 	eor.w	r1, r1, #1
 808131c:	f7ff ba74 	b.w	8080808 <network_listen>

08081320 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
 8081320:	2200      	movs	r2, #0
 8081322:	6840      	ldr	r0, [r0, #4]
 8081324:	f7ff ba80 	b.w	8080828 <network_set_listen_timeout>

08081328 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
 8081328:	2200      	movs	r2, #0
 808132a:	6840      	ldr	r0, [r0, #4]
 808132c:	4611      	mov	r1, r2
 808132e:	f7ff ba83 	b.w	8080838 <network_get_listen_timeout>

08081332 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
 8081332:	2200      	movs	r2, #0
 8081334:	6840      	ldr	r0, [r0, #4]
 8081336:	4611      	mov	r1, r2
 8081338:	f7ff ba6e 	b.w	8080818 <network_listening>

0808133c <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
 808133c:	b570      	push	{r4, r5, r6, lr}
 808133e:	4615      	mov	r5, r2
        HAL_IPAddress ip = {0};
 8081340:	2600      	movs	r6, #0
 8081342:	b086      	sub	sp, #24
 8081344:	4604      	mov	r4, r0
    IPAddress addr;
 8081346:	a804      	add	r0, sp, #16
 8081348:	f7ff fda4 	bl	8080e94 <_ZN9IPAddressC1Ev>
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 808134c:	4628      	mov	r0, r5
        HAL_IPAddress ip = {0};
 808134e:	9603      	str	r6, [sp, #12]
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 8081350:	f001 f8d6 	bl	8082500 <strlen>
 8081354:	4b0a      	ldr	r3, [pc, #40]	; (8081380 <_ZN5spark12NetworkClass7resolveEPKc+0x44>)
 8081356:	9600      	str	r6, [sp, #0]
 8081358:	b281      	uxth	r1, r0
 808135a:	685b      	ldr	r3, [r3, #4]
 808135c:	4628      	mov	r0, r5
 808135e:	aa03      	add	r2, sp, #12
 8081360:	f7ff f9be 	bl	80806e0 <inet_gethostbyname>
                IPAddress(uint32_t(0)) : IPAddress(ip);
 8081364:	b130      	cbz	r0, 8081374 <_ZN5spark12NetworkClass7resolveEPKc+0x38>
 8081366:	4631      	mov	r1, r6
 8081368:	4620      	mov	r0, r4
 808136a:	f7ff fda3 	bl	8080eb4 <_ZN9IPAddressC1Em>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
 808136e:	4620      	mov	r0, r4
 8081370:	b006      	add	sp, #24
 8081372:	bd70      	pop	{r4, r5, r6, pc}
 8081374:	4620      	mov	r0, r4
 8081376:	a903      	add	r1, sp, #12
 8081378:	f7ff fd94 	bl	8080ea4 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
    virtual ~IPAddress() {}
 808137c:	e7f7      	b.n	808136e <_ZN5spark12NetworkClass7resolveEPKc+0x32>
 808137e:	bf00      	nop
 8081380:	20000518 	.word	0x20000518

08081384 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
 8081384:	4b02      	ldr	r3, [pc, #8]	; (8081390 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
 8081386:	4a03      	ldr	r2, [pc, #12]	; (8081394 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
 8081388:	601a      	str	r2, [r3, #0]
 808138a:	2200      	movs	r2, #0
 808138c:	605a      	str	r2, [r3, #4]

} // spark
 808138e:	4770      	bx	lr
 8081390:	20000668 	.word	0x20000668
 8081394:	080826ac 	.word	0x080826ac

08081398 <_ZN8SPIClassD1Ev>:
  RecursiveMutex _mutex;
#endif

public:
  SPIClass(hal_spi_interface_t spi);
  ~SPIClass() = default;
 8081398:	b510      	push	{r4, lr}
 808139a:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (handle_) {
 808139c:	6880      	ldr	r0, [r0, #8]
 808139e:	b108      	cbz	r0, 80813a4 <_ZN8SPIClassD1Ev+0xc>
            os_mutex_recursive_destroy(handle_);
 80813a0:	f7ff f90e 	bl	80805c0 <os_mutex_recursive_destroy>
 80813a4:	4620      	mov	r0, r4
 80813a6:	bd10      	pop	{r4, pc}

080813a8 <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
 80813a8:	282e      	cmp	r0, #46	; 0x2e
bool pinAvailable(uint16_t pin) {
 80813aa:	b570      	push	{r4, r5, r6, lr}
 80813ac:	4604      	mov	r4, r0
  if (pin >= TOTAL_PINS) {
 80813ae:	d901      	bls.n	80813b4 <pinAvailable+0xc>
    return false;
 80813b0:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
 80813b2:	bd70      	pop	{r4, r5, r6, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
 80813b4:	f1a0 030d 	sub.w	r3, r0, #13
 80813b8:	2b02      	cmp	r3, #2
 80813ba:	d90b      	bls.n	80813d4 <pinAvailable+0x2c>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
 80813bc:	2801      	cmp	r0, #1
 80813be:	d826      	bhi.n	808140e <pinAvailable+0x66>
 80813c0:	f000 f8aa 	bl	8081518 <_Z19__fetch_global_Wirev>
 80813c4:	2100      	movs	r1, #0
 80813c6:	7c00      	ldrb	r0, [r0, #16]
 80813c8:	f7ff f96a 	bl	80806a0 <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
 80813cc:	f080 0001 	eor.w	r0, r0, #1
 80813d0:	b2c0      	uxtb	r0, r0
 80813d2:	e7ee      	b.n	80813b2 <pinAvailable+0xa>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
 80813d4:	4e13      	ldr	r6, [pc, #76]	; (8081424 <pinAvailable+0x7c>)
 80813d6:	7831      	ldrb	r1, [r6, #0]
 80813d8:	f3bf 8f5b 	dmb	ish
 80813dc:	f011 0501 	ands.w	r5, r1, #1
 80813e0:	d10f      	bne.n	8081402 <pinAvailable+0x5a>
 80813e2:	4630      	mov	r0, r6
 80813e4:	f7fe fe5d 	bl	80800a2 <__cxa_guard_acquire>
 80813e8:	b158      	cbz	r0, 8081402 <pinAvailable+0x5a>
 80813ea:	4629      	mov	r1, r5
 80813ec:	480e      	ldr	r0, [pc, #56]	; (8081428 <pinAvailable+0x80>)
 80813ee:	f7ff fa53 	bl	8080898 <_ZN8SPIClassC1E19hal_spi_interface_t>
 80813f2:	4630      	mov	r0, r6
 80813f4:	f7fe fe5a 	bl	80800ac <__cxa_guard_release>
 80813f8:	4a0c      	ldr	r2, [pc, #48]	; (808142c <pinAvailable+0x84>)
 80813fa:	490d      	ldr	r1, [pc, #52]	; (8081430 <pinAvailable+0x88>)
 80813fc:	480a      	ldr	r0, [pc, #40]	; (8081428 <pinAvailable+0x80>)
 80813fe:	f000 f8b3 	bl	8081568 <__aeabi_atexit>
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
 8081402:	4b09      	ldr	r3, [pc, #36]	; (8081428 <pinAvailable+0x80>)
 8081404:	7818      	ldrb	r0, [r3, #0]
 8081406:	f7ff f963 	bl	80806d0 <hal_spi_is_enabled>
 808140a:	2800      	cmp	r0, #0
 808140c:	d1d0      	bne.n	80813b0 <pinAvailable+0x8>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
 808140e:	3c12      	subs	r4, #18
 8081410:	2c01      	cmp	r4, #1
 8081412:	d805      	bhi.n	8081420 <pinAvailable+0x78>
 8081414:	f7ff fef8 	bl	8081208 <_Z22__fetch_global_Serial1v>
 8081418:	7c00      	ldrb	r0, [r0, #16]
 808141a:	f7ff f909 	bl	8080630 <hal_usart_is_enabled>
 808141e:	e7d5      	b.n	80813cc <pinAvailable+0x24>
  return true; // 'pin' is available
 8081420:	2001      	movs	r0, #1
 8081422:	e7c6      	b.n	80813b2 <pinAvailable+0xa>
 8081424:	20000670 	.word	0x20000670
 8081428:	20000674 	.word	0x20000674
 808142c:	20000068 	.word	0x20000068
 8081430:	08081399 	.word	0x08081399

08081434 <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 8081434:	282e      	cmp	r0, #46	; 0x2e
{
 8081436:	b538      	push	{r3, r4, r5, lr}
 8081438:	4604      	mov	r4, r0
 808143a:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 808143c:	d80a      	bhi.n	8081454 <pinMode+0x20>
 808143e:	29ff      	cmp	r1, #255	; 0xff
 8081440:	d008      	beq.n	8081454 <pinMode+0x20>
  if( !pinAvailable(pin) ) {
 8081442:	f7ff ffb1 	bl	80813a8 <pinAvailable>
 8081446:	b128      	cbz	r0, 8081454 <pinMode+0x20>
  HAL_Pin_Mode(pin, setMode);
 8081448:	4629      	mov	r1, r5
 808144a:	4620      	mov	r0, r4
}
 808144c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_Pin_Mode(pin, setMode);
 8081450:	f7ff b87e 	b.w	8080550 <HAL_Pin_Mode>
}
 8081454:	bd38      	pop	{r3, r4, r5, pc}

08081456 <digitalRead>:

/*
 * @brief Reads the value of a GPIO pin. Should return either 1 (HIGH) or 0 (LOW).
 */
int32_t digitalRead(pin_t pin)
{
 8081456:	b510      	push	{r4, lr}
 8081458:	4604      	mov	r4, r0
    PinMode mode = HAL_Get_Pin_Mode(pin);
 808145a:	f7ff f881 	bl	8080560 <HAL_Get_Pin_Mode>
    return mode == AF_OUTPUT_PUSHPULL ||
 808145e:	1f03      	subs	r3, r0, #4
    if (is_af_output_mode(mode))
 8081460:	b2db      	uxtb	r3, r3
 8081462:	2b01      	cmp	r3, #1
 8081464:	d908      	bls.n	8081478 <digitalRead+0x22>
        return LOW;

    // Safety check
    if( !pinAvailable(pin) ) {
 8081466:	4620      	mov	r0, r4
 8081468:	f7ff ff9e 	bl	80813a8 <pinAvailable>
 808146c:	b120      	cbz	r0, 8081478 <digitalRead+0x22>
      return LOW;
    }

    return HAL_GPIO_Read(pin);
 808146e:	4620      	mov	r0, r4
}
 8081470:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return HAL_GPIO_Read(pin);
 8081474:	f7ff b87c 	b.w	8080570 <HAL_GPIO_Read>
}
 8081478:	2000      	movs	r0, #0
 808147a:	bd10      	pop	{r4, pc}

0808147c <analogRead>:
 * @brief Read the analog value of a pin.
 * Should return a 16-bit value, 0-65536 (0 = LOW, 65536 = HIGH)
 * Note: ADC is 12-bit. Currently it returns 0-4095
 */
int32_t analogRead(pin_t pin)
{
 808147c:	b510      	push	{r4, lr}
 808147e:	4604      	mov	r4, r0
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
  if(pin < FIRST_ANALOG_PIN)
 8081480:	2809      	cmp	r0, #9
  {
    pin = pin + FIRST_ANALOG_PIN;
 8081482:	bf9c      	itt	ls
 8081484:	340a      	addls	r4, #10
 8081486:	b2a4      	uxthls	r4, r4
  }

  // Safety check
  if( !pinAvailable(pin) ) {
 8081488:	4620      	mov	r0, r4
 808148a:	f7ff ff8d 	bl	80813a8 <pinAvailable>
 808148e:	b150      	cbz	r0, 80814a6 <analogRead+0x2a>
    return LOW;
  }

  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
 8081490:	2103      	movs	r1, #3
 8081492:	4620      	mov	r0, r4
 8081494:	f7ff f854 	bl	8080540 <HAL_Validate_Pin_Function>
 8081498:	2803      	cmp	r0, #3
 808149a:	d104      	bne.n	80814a6 <analogRead+0x2a>
  {
    return LOW;
  }

  return hal_adc_read(pin);
 808149c:	4620      	mov	r0, r4
}
 808149e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return hal_adc_read(pin);
 80814a2:	f7ff b86d 	b.w	8080580 <hal_adc_read>
}
 80814a6:	2000      	movs	r0, #0
 80814a8:	bd10      	pop	{r4, pc}
	...

080814ac <_GLOBAL__sub_I_INADDR_NONE>:
#include "spark_wiring_ipaddress.h"

#if !HAL_USE_SOCKET_HAL_POSIX
const IPAddress INADDR_NONE(0, 0, 0, 0);
 80814ac:	2300      	movs	r3, #0
 80814ae:	b513      	push	{r0, r1, r4, lr}
 80814b0:	4c07      	ldr	r4, [pc, #28]	; (80814d0 <_GLOBAL__sub_I_INADDR_NONE+0x24>)
 80814b2:	461a      	mov	r2, r3
 80814b4:	4619      	mov	r1, r3
 80814b6:	4620      	mov	r0, r4
 80814b8:	9300      	str	r3, [sp, #0]
 80814ba:	f7ff fd0d 	bl	8080ed8 <_ZN9IPAddressC1Ehhhh>
 80814be:	4620      	mov	r0, r4
 80814c0:	4a04      	ldr	r2, [pc, #16]	; (80814d4 <_GLOBAL__sub_I_INADDR_NONE+0x28>)
 80814c2:	4905      	ldr	r1, [pc, #20]	; (80814d8 <_GLOBAL__sub_I_INADDR_NONE+0x2c>)
 80814c4:	b002      	add	sp, #8
 80814c6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80814ca:	f000 b84d 	b.w	8081568 <__aeabi_atexit>
 80814ce:	bf00      	nop
 80814d0:	20000684 	.word	0x20000684
 80814d4:	20000068 	.word	0x20000068
 80814d8:	08080e51 	.word	0x08080e51

080814dc <_ZN12_GLOBAL__N_117defaultWireConfigEv>:
#ifndef SPARK_WIRING_NO_I2C

namespace {

hal_i2c_config_t defaultWireConfig() {
	hal_i2c_config_t config = {
 80814dc:	2300      	movs	r3, #0
hal_i2c_config_t defaultWireConfig() {
 80814de:	b570      	push	{r4, r5, r6, lr}
	hal_i2c_config_t config = {
 80814e0:	2520      	movs	r5, #32
 80814e2:	8043      	strh	r3, [r0, #2]
 80814e4:	2314      	movs	r3, #20
		.size = sizeof(hal_i2c_config_t),
		.version = HAL_I2C_CONFIG_VERSION_1,
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80814e6:	4e08      	ldr	r6, [pc, #32]	; (8081508 <_ZN12_GLOBAL__N_117defaultWireConfigEv+0x2c>)
hal_i2c_config_t defaultWireConfig() {
 80814e8:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
 80814ea:	8003      	strh	r3, [r0, #0]
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80814ec:	4631      	mov	r1, r6
	hal_i2c_config_t config = {
 80814ee:	6085      	str	r5, [r0, #8]
 80814f0:	6105      	str	r5, [r0, #16]
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80814f2:	4628      	mov	r0, r5
 80814f4:	f000 f83f 	bl	8081576 <_ZnajRKSt9nothrow_t>
		.rx_buffer_size = I2C_BUFFER_LENGTH,
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80814f8:	4631      	mov	r1, r6
		.tx_buffer_size = I2C_BUFFER_LENGTH
	};
 80814fa:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80814fc:	4628      	mov	r0, r5
 80814fe:	f000 f83a 	bl	8081576 <_ZnajRKSt9nothrow_t>
	};
 8081502:	60e0      	str	r0, [r4, #12]

	return config;
}
 8081504:	4620      	mov	r0, r4
 8081506:	bd70      	pop	{r4, r5, r6, pc}
 8081508:	080826d8 	.word	0x080826d8

0808150c <_Z17acquireWireBufferv>:

} // anonymous

hal_i2c_config_t __attribute__((weak)) acquireWireBuffer()
{
 808150c:	b510      	push	{r4, lr}
 808150e:	4604      	mov	r4, r0
	return defaultWireConfig();
 8081510:	f7ff ffe4 	bl	80814dc <_ZN12_GLOBAL__N_117defaultWireConfigEv>
}
 8081514:	4620      	mov	r0, r4
 8081516:	bd10      	pop	{r4, pc}

08081518 <_Z19__fetch_global_Wirev>:
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
 8081518:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
 808151a:	4d0f      	ldr	r5, [pc, #60]	; (8081558 <_Z19__fetch_global_Wirev+0x40>)
{
 808151c:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
 808151e:	7829      	ldrb	r1, [r5, #0]
 8081520:	f3bf 8f5b 	dmb	ish
 8081524:	f011 0401 	ands.w	r4, r1, #1
 8081528:	d113      	bne.n	8081552 <_Z19__fetch_global_Wirev+0x3a>
 808152a:	4628      	mov	r0, r5
 808152c:	f7fe fdb9 	bl	80800a2 <__cxa_guard_acquire>
 8081530:	b178      	cbz	r0, 8081552 <_Z19__fetch_global_Wirev+0x3a>
 8081532:	a801      	add	r0, sp, #4
 8081534:	f7ff ffea 	bl	808150c <_Z17acquireWireBufferv>
 8081538:	4621      	mov	r1, r4
 808153a:	aa01      	add	r2, sp, #4
 808153c:	4807      	ldr	r0, [pc, #28]	; (808155c <_Z19__fetch_global_Wirev+0x44>)
 808153e:	f7ff feb7 	bl	80812b0 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
 8081542:	4628      	mov	r0, r5
 8081544:	f7fe fdb2 	bl	80800ac <__cxa_guard_release>
 8081548:	4a05      	ldr	r2, [pc, #20]	; (8081560 <_Z19__fetch_global_Wirev+0x48>)
 808154a:	4906      	ldr	r1, [pc, #24]	; (8081564 <_Z19__fetch_global_Wirev+0x4c>)
 808154c:	4803      	ldr	r0, [pc, #12]	; (808155c <_Z19__fetch_global_Wirev+0x44>)
 808154e:	f000 f80b 	bl	8081568 <__aeabi_atexit>
	return wire;
}
 8081552:	4802      	ldr	r0, [pc, #8]	; (808155c <_Z19__fetch_global_Wirev+0x44>)
 8081554:	b007      	add	sp, #28
 8081556:	bd30      	pop	{r4, r5, pc}
 8081558:	2000068c 	.word	0x2000068c
 808155c:	20000690 	.word	0x20000690
 8081560:	20000068 	.word	0x20000068
 8081564:	08081259 	.word	0x08081259

08081568 <__aeabi_atexit>:
 8081568:	460b      	mov	r3, r1
 808156a:	4601      	mov	r1, r0
 808156c:	4618      	mov	r0, r3
 808156e:	f000 bf77 	b.w	8082460 <__cxa_atexit>

08081572 <_ZdlPvj>:
 8081572:	f7fe bd94 	b.w	808009e <_ZdlPv>

08081576 <_ZnajRKSt9nothrow_t>:
 8081576:	f7fe bd90 	b.w	808009a <_Znaj>
	...

0808157c <nanf>:
 808157c:	4800      	ldr	r0, [pc, #0]	; (8081580 <nanf+0x4>)
 808157e:	4770      	bx	lr
 8081580:	7fc00000 	.word	0x7fc00000

08081584 <__aeabi_drsub>:
 8081584:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8081588:	e002      	b.n	8081590 <__adddf3>
 808158a:	bf00      	nop

0808158c <__aeabi_dsub>:
 808158c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08081590 <__adddf3>:
 8081590:	b530      	push	{r4, r5, lr}
 8081592:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8081596:	ea4f 0543 	mov.w	r5, r3, lsl #1
 808159a:	ea94 0f05 	teq	r4, r5
 808159e:	bf08      	it	eq
 80815a0:	ea90 0f02 	teqeq	r0, r2
 80815a4:	bf1f      	itttt	ne
 80815a6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80815aa:	ea55 0c02 	orrsne.w	ip, r5, r2
 80815ae:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80815b2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80815b6:	f000 80e2 	beq.w	808177e <__adddf3+0x1ee>
 80815ba:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80815be:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80815c2:	bfb8      	it	lt
 80815c4:	426d      	neglt	r5, r5
 80815c6:	dd0c      	ble.n	80815e2 <__adddf3+0x52>
 80815c8:	442c      	add	r4, r5
 80815ca:	ea80 0202 	eor.w	r2, r0, r2
 80815ce:	ea81 0303 	eor.w	r3, r1, r3
 80815d2:	ea82 0000 	eor.w	r0, r2, r0
 80815d6:	ea83 0101 	eor.w	r1, r3, r1
 80815da:	ea80 0202 	eor.w	r2, r0, r2
 80815de:	ea81 0303 	eor.w	r3, r1, r3
 80815e2:	2d36      	cmp	r5, #54	; 0x36
 80815e4:	bf88      	it	hi
 80815e6:	bd30      	pophi	{r4, r5, pc}
 80815e8:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80815ec:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80815f0:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80815f4:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80815f8:	d002      	beq.n	8081600 <__adddf3+0x70>
 80815fa:	4240      	negs	r0, r0
 80815fc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8081600:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8081604:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8081608:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 808160c:	d002      	beq.n	8081614 <__adddf3+0x84>
 808160e:	4252      	negs	r2, r2
 8081610:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8081614:	ea94 0f05 	teq	r4, r5
 8081618:	f000 80a7 	beq.w	808176a <__adddf3+0x1da>
 808161c:	f1a4 0401 	sub.w	r4, r4, #1
 8081620:	f1d5 0e20 	rsbs	lr, r5, #32
 8081624:	db0d      	blt.n	8081642 <__adddf3+0xb2>
 8081626:	fa02 fc0e 	lsl.w	ip, r2, lr
 808162a:	fa22 f205 	lsr.w	r2, r2, r5
 808162e:	1880      	adds	r0, r0, r2
 8081630:	f141 0100 	adc.w	r1, r1, #0
 8081634:	fa03 f20e 	lsl.w	r2, r3, lr
 8081638:	1880      	adds	r0, r0, r2
 808163a:	fa43 f305 	asr.w	r3, r3, r5
 808163e:	4159      	adcs	r1, r3
 8081640:	e00e      	b.n	8081660 <__adddf3+0xd0>
 8081642:	f1a5 0520 	sub.w	r5, r5, #32
 8081646:	f10e 0e20 	add.w	lr, lr, #32
 808164a:	2a01      	cmp	r2, #1
 808164c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8081650:	bf28      	it	cs
 8081652:	f04c 0c02 	orrcs.w	ip, ip, #2
 8081656:	fa43 f305 	asr.w	r3, r3, r5
 808165a:	18c0      	adds	r0, r0, r3
 808165c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8081660:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8081664:	d507      	bpl.n	8081676 <__adddf3+0xe6>
 8081666:	f04f 0e00 	mov.w	lr, #0
 808166a:	f1dc 0c00 	rsbs	ip, ip, #0
 808166e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8081672:	eb6e 0101 	sbc.w	r1, lr, r1
 8081676:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 808167a:	d31b      	bcc.n	80816b4 <__adddf3+0x124>
 808167c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8081680:	d30c      	bcc.n	808169c <__adddf3+0x10c>
 8081682:	0849      	lsrs	r1, r1, #1
 8081684:	ea5f 0030 	movs.w	r0, r0, rrx
 8081688:	ea4f 0c3c 	mov.w	ip, ip, rrx
 808168c:	f104 0401 	add.w	r4, r4, #1
 8081690:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8081694:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8081698:	f080 809a 	bcs.w	80817d0 <__adddf3+0x240>
 808169c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80816a0:	bf08      	it	eq
 80816a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80816a6:	f150 0000 	adcs.w	r0, r0, #0
 80816aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80816ae:	ea41 0105 	orr.w	r1, r1, r5
 80816b2:	bd30      	pop	{r4, r5, pc}
 80816b4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80816b8:	4140      	adcs	r0, r0
 80816ba:	eb41 0101 	adc.w	r1, r1, r1
 80816be:	3c01      	subs	r4, #1
 80816c0:	bf28      	it	cs
 80816c2:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80816c6:	d2e9      	bcs.n	808169c <__adddf3+0x10c>
 80816c8:	f091 0f00 	teq	r1, #0
 80816cc:	bf04      	itt	eq
 80816ce:	4601      	moveq	r1, r0
 80816d0:	2000      	moveq	r0, #0
 80816d2:	fab1 f381 	clz	r3, r1
 80816d6:	bf08      	it	eq
 80816d8:	3320      	addeq	r3, #32
 80816da:	f1a3 030b 	sub.w	r3, r3, #11
 80816de:	f1b3 0220 	subs.w	r2, r3, #32
 80816e2:	da0c      	bge.n	80816fe <__adddf3+0x16e>
 80816e4:	320c      	adds	r2, #12
 80816e6:	dd08      	ble.n	80816fa <__adddf3+0x16a>
 80816e8:	f102 0c14 	add.w	ip, r2, #20
 80816ec:	f1c2 020c 	rsb	r2, r2, #12
 80816f0:	fa01 f00c 	lsl.w	r0, r1, ip
 80816f4:	fa21 f102 	lsr.w	r1, r1, r2
 80816f8:	e00c      	b.n	8081714 <__adddf3+0x184>
 80816fa:	f102 0214 	add.w	r2, r2, #20
 80816fe:	bfd8      	it	le
 8081700:	f1c2 0c20 	rsble	ip, r2, #32
 8081704:	fa01 f102 	lsl.w	r1, r1, r2
 8081708:	fa20 fc0c 	lsr.w	ip, r0, ip
 808170c:	bfdc      	itt	le
 808170e:	ea41 010c 	orrle.w	r1, r1, ip
 8081712:	4090      	lslle	r0, r2
 8081714:	1ae4      	subs	r4, r4, r3
 8081716:	bfa2      	ittt	ge
 8081718:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 808171c:	4329      	orrge	r1, r5
 808171e:	bd30      	popge	{r4, r5, pc}
 8081720:	ea6f 0404 	mvn.w	r4, r4
 8081724:	3c1f      	subs	r4, #31
 8081726:	da1c      	bge.n	8081762 <__adddf3+0x1d2>
 8081728:	340c      	adds	r4, #12
 808172a:	dc0e      	bgt.n	808174a <__adddf3+0x1ba>
 808172c:	f104 0414 	add.w	r4, r4, #20
 8081730:	f1c4 0220 	rsb	r2, r4, #32
 8081734:	fa20 f004 	lsr.w	r0, r0, r4
 8081738:	fa01 f302 	lsl.w	r3, r1, r2
 808173c:	ea40 0003 	orr.w	r0, r0, r3
 8081740:	fa21 f304 	lsr.w	r3, r1, r4
 8081744:	ea45 0103 	orr.w	r1, r5, r3
 8081748:	bd30      	pop	{r4, r5, pc}
 808174a:	f1c4 040c 	rsb	r4, r4, #12
 808174e:	f1c4 0220 	rsb	r2, r4, #32
 8081752:	fa20 f002 	lsr.w	r0, r0, r2
 8081756:	fa01 f304 	lsl.w	r3, r1, r4
 808175a:	ea40 0003 	orr.w	r0, r0, r3
 808175e:	4629      	mov	r1, r5
 8081760:	bd30      	pop	{r4, r5, pc}
 8081762:	fa21 f004 	lsr.w	r0, r1, r4
 8081766:	4629      	mov	r1, r5
 8081768:	bd30      	pop	{r4, r5, pc}
 808176a:	f094 0f00 	teq	r4, #0
 808176e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8081772:	bf06      	itte	eq
 8081774:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8081778:	3401      	addeq	r4, #1
 808177a:	3d01      	subne	r5, #1
 808177c:	e74e      	b.n	808161c <__adddf3+0x8c>
 808177e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8081782:	bf18      	it	ne
 8081784:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8081788:	d029      	beq.n	80817de <__adddf3+0x24e>
 808178a:	ea94 0f05 	teq	r4, r5
 808178e:	bf08      	it	eq
 8081790:	ea90 0f02 	teqeq	r0, r2
 8081794:	d005      	beq.n	80817a2 <__adddf3+0x212>
 8081796:	ea54 0c00 	orrs.w	ip, r4, r0
 808179a:	bf04      	itt	eq
 808179c:	4619      	moveq	r1, r3
 808179e:	4610      	moveq	r0, r2
 80817a0:	bd30      	pop	{r4, r5, pc}
 80817a2:	ea91 0f03 	teq	r1, r3
 80817a6:	bf1e      	ittt	ne
 80817a8:	2100      	movne	r1, #0
 80817aa:	2000      	movne	r0, #0
 80817ac:	bd30      	popne	{r4, r5, pc}
 80817ae:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80817b2:	d105      	bne.n	80817c0 <__adddf3+0x230>
 80817b4:	0040      	lsls	r0, r0, #1
 80817b6:	4149      	adcs	r1, r1
 80817b8:	bf28      	it	cs
 80817ba:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80817be:	bd30      	pop	{r4, r5, pc}
 80817c0:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80817c4:	bf3c      	itt	cc
 80817c6:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80817ca:	bd30      	popcc	{r4, r5, pc}
 80817cc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80817d0:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80817d4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80817d8:	f04f 0000 	mov.w	r0, #0
 80817dc:	bd30      	pop	{r4, r5, pc}
 80817de:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80817e2:	bf1a      	itte	ne
 80817e4:	4619      	movne	r1, r3
 80817e6:	4610      	movne	r0, r2
 80817e8:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80817ec:	bf1c      	itt	ne
 80817ee:	460b      	movne	r3, r1
 80817f0:	4602      	movne	r2, r0
 80817f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80817f6:	bf06      	itte	eq
 80817f8:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80817fc:	ea91 0f03 	teqeq	r1, r3
 8081800:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8081804:	bd30      	pop	{r4, r5, pc}
 8081806:	bf00      	nop

08081808 <__aeabi_ui2d>:
 8081808:	f090 0f00 	teq	r0, #0
 808180c:	bf04      	itt	eq
 808180e:	2100      	moveq	r1, #0
 8081810:	4770      	bxeq	lr
 8081812:	b530      	push	{r4, r5, lr}
 8081814:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8081818:	f104 0432 	add.w	r4, r4, #50	; 0x32
 808181c:	f04f 0500 	mov.w	r5, #0
 8081820:	f04f 0100 	mov.w	r1, #0
 8081824:	e750      	b.n	80816c8 <__adddf3+0x138>
 8081826:	bf00      	nop

08081828 <__aeabi_i2d>:
 8081828:	f090 0f00 	teq	r0, #0
 808182c:	bf04      	itt	eq
 808182e:	2100      	moveq	r1, #0
 8081830:	4770      	bxeq	lr
 8081832:	b530      	push	{r4, r5, lr}
 8081834:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8081838:	f104 0432 	add.w	r4, r4, #50	; 0x32
 808183c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8081840:	bf48      	it	mi
 8081842:	4240      	negmi	r0, r0
 8081844:	f04f 0100 	mov.w	r1, #0
 8081848:	e73e      	b.n	80816c8 <__adddf3+0x138>
 808184a:	bf00      	nop

0808184c <__aeabi_f2d>:
 808184c:	0042      	lsls	r2, r0, #1
 808184e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8081852:	ea4f 0131 	mov.w	r1, r1, rrx
 8081856:	ea4f 7002 	mov.w	r0, r2, lsl #28
 808185a:	bf1f      	itttt	ne
 808185c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8081860:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8081864:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8081868:	4770      	bxne	lr
 808186a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 808186e:	bf08      	it	eq
 8081870:	4770      	bxeq	lr
 8081872:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8081876:	bf04      	itt	eq
 8081878:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 808187c:	4770      	bxeq	lr
 808187e:	b530      	push	{r4, r5, lr}
 8081880:	f44f 7460 	mov.w	r4, #896	; 0x380
 8081884:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8081888:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 808188c:	e71c      	b.n	80816c8 <__adddf3+0x138>
 808188e:	bf00      	nop

08081890 <__aeabi_ul2d>:
 8081890:	ea50 0201 	orrs.w	r2, r0, r1
 8081894:	bf08      	it	eq
 8081896:	4770      	bxeq	lr
 8081898:	b530      	push	{r4, r5, lr}
 808189a:	f04f 0500 	mov.w	r5, #0
 808189e:	e00a      	b.n	80818b6 <__aeabi_l2d+0x16>

080818a0 <__aeabi_l2d>:
 80818a0:	ea50 0201 	orrs.w	r2, r0, r1
 80818a4:	bf08      	it	eq
 80818a6:	4770      	bxeq	lr
 80818a8:	b530      	push	{r4, r5, lr}
 80818aa:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80818ae:	d502      	bpl.n	80818b6 <__aeabi_l2d+0x16>
 80818b0:	4240      	negs	r0, r0
 80818b2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80818b6:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80818ba:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80818be:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80818c2:	f43f aed8 	beq.w	8081676 <__adddf3+0xe6>
 80818c6:	f04f 0203 	mov.w	r2, #3
 80818ca:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80818ce:	bf18      	it	ne
 80818d0:	3203      	addne	r2, #3
 80818d2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80818d6:	bf18      	it	ne
 80818d8:	3203      	addne	r2, #3
 80818da:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80818de:	f1c2 0320 	rsb	r3, r2, #32
 80818e2:	fa00 fc03 	lsl.w	ip, r0, r3
 80818e6:	fa20 f002 	lsr.w	r0, r0, r2
 80818ea:	fa01 fe03 	lsl.w	lr, r1, r3
 80818ee:	ea40 000e 	orr.w	r0, r0, lr
 80818f2:	fa21 f102 	lsr.w	r1, r1, r2
 80818f6:	4414      	add	r4, r2
 80818f8:	e6bd      	b.n	8081676 <__adddf3+0xe6>
 80818fa:	bf00      	nop

080818fc <__aeabi_dmul>:
 80818fc:	b570      	push	{r4, r5, r6, lr}
 80818fe:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8081902:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8081906:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 808190a:	bf1d      	ittte	ne
 808190c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8081910:	ea94 0f0c 	teqne	r4, ip
 8081914:	ea95 0f0c 	teqne	r5, ip
 8081918:	f000 f8de 	bleq	8081ad8 <__aeabi_dmul+0x1dc>
 808191c:	442c      	add	r4, r5
 808191e:	ea81 0603 	eor.w	r6, r1, r3
 8081922:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8081926:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 808192a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 808192e:	bf18      	it	ne
 8081930:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8081934:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8081938:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 808193c:	d038      	beq.n	80819b0 <__aeabi_dmul+0xb4>
 808193e:	fba0 ce02 	umull	ip, lr, r0, r2
 8081942:	f04f 0500 	mov.w	r5, #0
 8081946:	fbe1 e502 	umlal	lr, r5, r1, r2
 808194a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 808194e:	fbe0 e503 	umlal	lr, r5, r0, r3
 8081952:	f04f 0600 	mov.w	r6, #0
 8081956:	fbe1 5603 	umlal	r5, r6, r1, r3
 808195a:	f09c 0f00 	teq	ip, #0
 808195e:	bf18      	it	ne
 8081960:	f04e 0e01 	orrne.w	lr, lr, #1
 8081964:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8081968:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 808196c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8081970:	d204      	bcs.n	808197c <__aeabi_dmul+0x80>
 8081972:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8081976:	416d      	adcs	r5, r5
 8081978:	eb46 0606 	adc.w	r6, r6, r6
 808197c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8081980:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8081984:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8081988:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 808198c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8081990:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8081994:	bf88      	it	hi
 8081996:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 808199a:	d81e      	bhi.n	80819da <__aeabi_dmul+0xde>
 808199c:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80819a0:	bf08      	it	eq
 80819a2:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80819a6:	f150 0000 	adcs.w	r0, r0, #0
 80819aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80819ae:	bd70      	pop	{r4, r5, r6, pc}
 80819b0:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80819b4:	ea46 0101 	orr.w	r1, r6, r1
 80819b8:	ea40 0002 	orr.w	r0, r0, r2
 80819bc:	ea81 0103 	eor.w	r1, r1, r3
 80819c0:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80819c4:	bfc2      	ittt	gt
 80819c6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80819ca:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80819ce:	bd70      	popgt	{r4, r5, r6, pc}
 80819d0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80819d4:	f04f 0e00 	mov.w	lr, #0
 80819d8:	3c01      	subs	r4, #1
 80819da:	f300 80ab 	bgt.w	8081b34 <__aeabi_dmul+0x238>
 80819de:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80819e2:	bfde      	ittt	le
 80819e4:	2000      	movle	r0, #0
 80819e6:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80819ea:	bd70      	pople	{r4, r5, r6, pc}
 80819ec:	f1c4 0400 	rsb	r4, r4, #0
 80819f0:	3c20      	subs	r4, #32
 80819f2:	da35      	bge.n	8081a60 <__aeabi_dmul+0x164>
 80819f4:	340c      	adds	r4, #12
 80819f6:	dc1b      	bgt.n	8081a30 <__aeabi_dmul+0x134>
 80819f8:	f104 0414 	add.w	r4, r4, #20
 80819fc:	f1c4 0520 	rsb	r5, r4, #32
 8081a00:	fa00 f305 	lsl.w	r3, r0, r5
 8081a04:	fa20 f004 	lsr.w	r0, r0, r4
 8081a08:	fa01 f205 	lsl.w	r2, r1, r5
 8081a0c:	ea40 0002 	orr.w	r0, r0, r2
 8081a10:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8081a14:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8081a18:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8081a1c:	fa21 f604 	lsr.w	r6, r1, r4
 8081a20:	eb42 0106 	adc.w	r1, r2, r6
 8081a24:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8081a28:	bf08      	it	eq
 8081a2a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8081a2e:	bd70      	pop	{r4, r5, r6, pc}
 8081a30:	f1c4 040c 	rsb	r4, r4, #12
 8081a34:	f1c4 0520 	rsb	r5, r4, #32
 8081a38:	fa00 f304 	lsl.w	r3, r0, r4
 8081a3c:	fa20 f005 	lsr.w	r0, r0, r5
 8081a40:	fa01 f204 	lsl.w	r2, r1, r4
 8081a44:	ea40 0002 	orr.w	r0, r0, r2
 8081a48:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8081a4c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8081a50:	f141 0100 	adc.w	r1, r1, #0
 8081a54:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8081a58:	bf08      	it	eq
 8081a5a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8081a5e:	bd70      	pop	{r4, r5, r6, pc}
 8081a60:	f1c4 0520 	rsb	r5, r4, #32
 8081a64:	fa00 f205 	lsl.w	r2, r0, r5
 8081a68:	ea4e 0e02 	orr.w	lr, lr, r2
 8081a6c:	fa20 f304 	lsr.w	r3, r0, r4
 8081a70:	fa01 f205 	lsl.w	r2, r1, r5
 8081a74:	ea43 0302 	orr.w	r3, r3, r2
 8081a78:	fa21 f004 	lsr.w	r0, r1, r4
 8081a7c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8081a80:	fa21 f204 	lsr.w	r2, r1, r4
 8081a84:	ea20 0002 	bic.w	r0, r0, r2
 8081a88:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8081a8c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8081a90:	bf08      	it	eq
 8081a92:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8081a96:	bd70      	pop	{r4, r5, r6, pc}
 8081a98:	f094 0f00 	teq	r4, #0
 8081a9c:	d10f      	bne.n	8081abe <__aeabi_dmul+0x1c2>
 8081a9e:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8081aa2:	0040      	lsls	r0, r0, #1
 8081aa4:	eb41 0101 	adc.w	r1, r1, r1
 8081aa8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8081aac:	bf08      	it	eq
 8081aae:	3c01      	subeq	r4, #1
 8081ab0:	d0f7      	beq.n	8081aa2 <__aeabi_dmul+0x1a6>
 8081ab2:	ea41 0106 	orr.w	r1, r1, r6
 8081ab6:	f095 0f00 	teq	r5, #0
 8081aba:	bf18      	it	ne
 8081abc:	4770      	bxne	lr
 8081abe:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8081ac2:	0052      	lsls	r2, r2, #1
 8081ac4:	eb43 0303 	adc.w	r3, r3, r3
 8081ac8:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8081acc:	bf08      	it	eq
 8081ace:	3d01      	subeq	r5, #1
 8081ad0:	d0f7      	beq.n	8081ac2 <__aeabi_dmul+0x1c6>
 8081ad2:	ea43 0306 	orr.w	r3, r3, r6
 8081ad6:	4770      	bx	lr
 8081ad8:	ea94 0f0c 	teq	r4, ip
 8081adc:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8081ae0:	bf18      	it	ne
 8081ae2:	ea95 0f0c 	teqne	r5, ip
 8081ae6:	d00c      	beq.n	8081b02 <__aeabi_dmul+0x206>
 8081ae8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8081aec:	bf18      	it	ne
 8081aee:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8081af2:	d1d1      	bne.n	8081a98 <__aeabi_dmul+0x19c>
 8081af4:	ea81 0103 	eor.w	r1, r1, r3
 8081af8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8081afc:	f04f 0000 	mov.w	r0, #0
 8081b00:	bd70      	pop	{r4, r5, r6, pc}
 8081b02:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8081b06:	bf06      	itte	eq
 8081b08:	4610      	moveq	r0, r2
 8081b0a:	4619      	moveq	r1, r3
 8081b0c:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8081b10:	d019      	beq.n	8081b46 <__aeabi_dmul+0x24a>
 8081b12:	ea94 0f0c 	teq	r4, ip
 8081b16:	d102      	bne.n	8081b1e <__aeabi_dmul+0x222>
 8081b18:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8081b1c:	d113      	bne.n	8081b46 <__aeabi_dmul+0x24a>
 8081b1e:	ea95 0f0c 	teq	r5, ip
 8081b22:	d105      	bne.n	8081b30 <__aeabi_dmul+0x234>
 8081b24:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8081b28:	bf1c      	itt	ne
 8081b2a:	4610      	movne	r0, r2
 8081b2c:	4619      	movne	r1, r3
 8081b2e:	d10a      	bne.n	8081b46 <__aeabi_dmul+0x24a>
 8081b30:	ea81 0103 	eor.w	r1, r1, r3
 8081b34:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8081b38:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8081b3c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8081b40:	f04f 0000 	mov.w	r0, #0
 8081b44:	bd70      	pop	{r4, r5, r6, pc}
 8081b46:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8081b4a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8081b4e:	bd70      	pop	{r4, r5, r6, pc}

08081b50 <__aeabi_ddiv>:
 8081b50:	b570      	push	{r4, r5, r6, lr}
 8081b52:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8081b56:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8081b5a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8081b5e:	bf1d      	ittte	ne
 8081b60:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8081b64:	ea94 0f0c 	teqne	r4, ip
 8081b68:	ea95 0f0c 	teqne	r5, ip
 8081b6c:	f000 f8a7 	bleq	8081cbe <__aeabi_ddiv+0x16e>
 8081b70:	eba4 0405 	sub.w	r4, r4, r5
 8081b74:	ea81 0e03 	eor.w	lr, r1, r3
 8081b78:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8081b7c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8081b80:	f000 8088 	beq.w	8081c94 <__aeabi_ddiv+0x144>
 8081b84:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8081b88:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8081b8c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8081b90:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8081b94:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8081b98:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8081b9c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8081ba0:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8081ba4:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8081ba8:	429d      	cmp	r5, r3
 8081baa:	bf08      	it	eq
 8081bac:	4296      	cmpeq	r6, r2
 8081bae:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8081bb2:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8081bb6:	d202      	bcs.n	8081bbe <__aeabi_ddiv+0x6e>
 8081bb8:	085b      	lsrs	r3, r3, #1
 8081bba:	ea4f 0232 	mov.w	r2, r2, rrx
 8081bbe:	1ab6      	subs	r6, r6, r2
 8081bc0:	eb65 0503 	sbc.w	r5, r5, r3
 8081bc4:	085b      	lsrs	r3, r3, #1
 8081bc6:	ea4f 0232 	mov.w	r2, r2, rrx
 8081bca:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8081bce:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8081bd2:	ebb6 0e02 	subs.w	lr, r6, r2
 8081bd6:	eb75 0e03 	sbcs.w	lr, r5, r3
 8081bda:	bf22      	ittt	cs
 8081bdc:	1ab6      	subcs	r6, r6, r2
 8081bde:	4675      	movcs	r5, lr
 8081be0:	ea40 000c 	orrcs.w	r0, r0, ip
 8081be4:	085b      	lsrs	r3, r3, #1
 8081be6:	ea4f 0232 	mov.w	r2, r2, rrx
 8081bea:	ebb6 0e02 	subs.w	lr, r6, r2
 8081bee:	eb75 0e03 	sbcs.w	lr, r5, r3
 8081bf2:	bf22      	ittt	cs
 8081bf4:	1ab6      	subcs	r6, r6, r2
 8081bf6:	4675      	movcs	r5, lr
 8081bf8:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8081bfc:	085b      	lsrs	r3, r3, #1
 8081bfe:	ea4f 0232 	mov.w	r2, r2, rrx
 8081c02:	ebb6 0e02 	subs.w	lr, r6, r2
 8081c06:	eb75 0e03 	sbcs.w	lr, r5, r3
 8081c0a:	bf22      	ittt	cs
 8081c0c:	1ab6      	subcs	r6, r6, r2
 8081c0e:	4675      	movcs	r5, lr
 8081c10:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8081c14:	085b      	lsrs	r3, r3, #1
 8081c16:	ea4f 0232 	mov.w	r2, r2, rrx
 8081c1a:	ebb6 0e02 	subs.w	lr, r6, r2
 8081c1e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8081c22:	bf22      	ittt	cs
 8081c24:	1ab6      	subcs	r6, r6, r2
 8081c26:	4675      	movcs	r5, lr
 8081c28:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8081c2c:	ea55 0e06 	orrs.w	lr, r5, r6
 8081c30:	d018      	beq.n	8081c64 <__aeabi_ddiv+0x114>
 8081c32:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8081c36:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8081c3a:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8081c3e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8081c42:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8081c46:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8081c4a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8081c4e:	d1c0      	bne.n	8081bd2 <__aeabi_ddiv+0x82>
 8081c50:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8081c54:	d10b      	bne.n	8081c6e <__aeabi_ddiv+0x11e>
 8081c56:	ea41 0100 	orr.w	r1, r1, r0
 8081c5a:	f04f 0000 	mov.w	r0, #0
 8081c5e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8081c62:	e7b6      	b.n	8081bd2 <__aeabi_ddiv+0x82>
 8081c64:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8081c68:	bf04      	itt	eq
 8081c6a:	4301      	orreq	r1, r0
 8081c6c:	2000      	moveq	r0, #0
 8081c6e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8081c72:	bf88      	it	hi
 8081c74:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8081c78:	f63f aeaf 	bhi.w	80819da <__aeabi_dmul+0xde>
 8081c7c:	ebb5 0c03 	subs.w	ip, r5, r3
 8081c80:	bf04      	itt	eq
 8081c82:	ebb6 0c02 	subseq.w	ip, r6, r2
 8081c86:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8081c8a:	f150 0000 	adcs.w	r0, r0, #0
 8081c8e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8081c92:	bd70      	pop	{r4, r5, r6, pc}
 8081c94:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8081c98:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8081c9c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8081ca0:	bfc2      	ittt	gt
 8081ca2:	ebd4 050c 	rsbsgt	r5, r4, ip
 8081ca6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8081caa:	bd70      	popgt	{r4, r5, r6, pc}
 8081cac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8081cb0:	f04f 0e00 	mov.w	lr, #0
 8081cb4:	3c01      	subs	r4, #1
 8081cb6:	e690      	b.n	80819da <__aeabi_dmul+0xde>
 8081cb8:	ea45 0e06 	orr.w	lr, r5, r6
 8081cbc:	e68d      	b.n	80819da <__aeabi_dmul+0xde>
 8081cbe:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8081cc2:	ea94 0f0c 	teq	r4, ip
 8081cc6:	bf08      	it	eq
 8081cc8:	ea95 0f0c 	teqeq	r5, ip
 8081ccc:	f43f af3b 	beq.w	8081b46 <__aeabi_dmul+0x24a>
 8081cd0:	ea94 0f0c 	teq	r4, ip
 8081cd4:	d10a      	bne.n	8081cec <__aeabi_ddiv+0x19c>
 8081cd6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8081cda:	f47f af34 	bne.w	8081b46 <__aeabi_dmul+0x24a>
 8081cde:	ea95 0f0c 	teq	r5, ip
 8081ce2:	f47f af25 	bne.w	8081b30 <__aeabi_dmul+0x234>
 8081ce6:	4610      	mov	r0, r2
 8081ce8:	4619      	mov	r1, r3
 8081cea:	e72c      	b.n	8081b46 <__aeabi_dmul+0x24a>
 8081cec:	ea95 0f0c 	teq	r5, ip
 8081cf0:	d106      	bne.n	8081d00 <__aeabi_ddiv+0x1b0>
 8081cf2:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8081cf6:	f43f aefd 	beq.w	8081af4 <__aeabi_dmul+0x1f8>
 8081cfa:	4610      	mov	r0, r2
 8081cfc:	4619      	mov	r1, r3
 8081cfe:	e722      	b.n	8081b46 <__aeabi_dmul+0x24a>
 8081d00:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8081d04:	bf18      	it	ne
 8081d06:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8081d0a:	f47f aec5 	bne.w	8081a98 <__aeabi_dmul+0x19c>
 8081d0e:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8081d12:	f47f af0d 	bne.w	8081b30 <__aeabi_dmul+0x234>
 8081d16:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8081d1a:	f47f aeeb 	bne.w	8081af4 <__aeabi_dmul+0x1f8>
 8081d1e:	e712      	b.n	8081b46 <__aeabi_dmul+0x24a>

08081d20 <__gedf2>:
 8081d20:	f04f 3cff 	mov.w	ip, #4294967295
 8081d24:	e006      	b.n	8081d34 <__cmpdf2+0x4>
 8081d26:	bf00      	nop

08081d28 <__ledf2>:
 8081d28:	f04f 0c01 	mov.w	ip, #1
 8081d2c:	e002      	b.n	8081d34 <__cmpdf2+0x4>
 8081d2e:	bf00      	nop

08081d30 <__cmpdf2>:
 8081d30:	f04f 0c01 	mov.w	ip, #1
 8081d34:	f84d cd04 	str.w	ip, [sp, #-4]!
 8081d38:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8081d3c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8081d40:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8081d44:	bf18      	it	ne
 8081d46:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8081d4a:	d01b      	beq.n	8081d84 <__cmpdf2+0x54>
 8081d4c:	b001      	add	sp, #4
 8081d4e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8081d52:	bf0c      	ite	eq
 8081d54:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8081d58:	ea91 0f03 	teqne	r1, r3
 8081d5c:	bf02      	ittt	eq
 8081d5e:	ea90 0f02 	teqeq	r0, r2
 8081d62:	2000      	moveq	r0, #0
 8081d64:	4770      	bxeq	lr
 8081d66:	f110 0f00 	cmn.w	r0, #0
 8081d6a:	ea91 0f03 	teq	r1, r3
 8081d6e:	bf58      	it	pl
 8081d70:	4299      	cmppl	r1, r3
 8081d72:	bf08      	it	eq
 8081d74:	4290      	cmpeq	r0, r2
 8081d76:	bf2c      	ite	cs
 8081d78:	17d8      	asrcs	r0, r3, #31
 8081d7a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8081d7e:	f040 0001 	orr.w	r0, r0, #1
 8081d82:	4770      	bx	lr
 8081d84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8081d88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8081d8c:	d102      	bne.n	8081d94 <__cmpdf2+0x64>
 8081d8e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8081d92:	d107      	bne.n	8081da4 <__cmpdf2+0x74>
 8081d94:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8081d98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8081d9c:	d1d6      	bne.n	8081d4c <__cmpdf2+0x1c>
 8081d9e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8081da2:	d0d3      	beq.n	8081d4c <__cmpdf2+0x1c>
 8081da4:	f85d 0b04 	ldr.w	r0, [sp], #4
 8081da8:	4770      	bx	lr
 8081daa:	bf00      	nop

08081dac <__aeabi_cdrcmple>:
 8081dac:	4684      	mov	ip, r0
 8081dae:	4610      	mov	r0, r2
 8081db0:	4662      	mov	r2, ip
 8081db2:	468c      	mov	ip, r1
 8081db4:	4619      	mov	r1, r3
 8081db6:	4663      	mov	r3, ip
 8081db8:	e000      	b.n	8081dbc <__aeabi_cdcmpeq>
 8081dba:	bf00      	nop

08081dbc <__aeabi_cdcmpeq>:
 8081dbc:	b501      	push	{r0, lr}
 8081dbe:	f7ff ffb7 	bl	8081d30 <__cmpdf2>
 8081dc2:	2800      	cmp	r0, #0
 8081dc4:	bf48      	it	mi
 8081dc6:	f110 0f00 	cmnmi.w	r0, #0
 8081dca:	bd01      	pop	{r0, pc}

08081dcc <__aeabi_dcmpeq>:
 8081dcc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8081dd0:	f7ff fff4 	bl	8081dbc <__aeabi_cdcmpeq>
 8081dd4:	bf0c      	ite	eq
 8081dd6:	2001      	moveq	r0, #1
 8081dd8:	2000      	movne	r0, #0
 8081dda:	f85d fb08 	ldr.w	pc, [sp], #8
 8081dde:	bf00      	nop

08081de0 <__aeabi_dcmplt>:
 8081de0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8081de4:	f7ff ffea 	bl	8081dbc <__aeabi_cdcmpeq>
 8081de8:	bf34      	ite	cc
 8081dea:	2001      	movcc	r0, #1
 8081dec:	2000      	movcs	r0, #0
 8081dee:	f85d fb08 	ldr.w	pc, [sp], #8
 8081df2:	bf00      	nop

08081df4 <__aeabi_dcmple>:
 8081df4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8081df8:	f7ff ffe0 	bl	8081dbc <__aeabi_cdcmpeq>
 8081dfc:	bf94      	ite	ls
 8081dfe:	2001      	movls	r0, #1
 8081e00:	2000      	movhi	r0, #0
 8081e02:	f85d fb08 	ldr.w	pc, [sp], #8
 8081e06:	bf00      	nop

08081e08 <__aeabi_dcmpge>:
 8081e08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8081e0c:	f7ff ffce 	bl	8081dac <__aeabi_cdrcmple>
 8081e10:	bf94      	ite	ls
 8081e12:	2001      	movls	r0, #1
 8081e14:	2000      	movhi	r0, #0
 8081e16:	f85d fb08 	ldr.w	pc, [sp], #8
 8081e1a:	bf00      	nop

08081e1c <__aeabi_dcmpgt>:
 8081e1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8081e20:	f7ff ffc4 	bl	8081dac <__aeabi_cdrcmple>
 8081e24:	bf34      	ite	cc
 8081e26:	2001      	movcc	r0, #1
 8081e28:	2000      	movcs	r0, #0
 8081e2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8081e2e:	bf00      	nop

08081e30 <__aeabi_d2uiz>:
 8081e30:	004a      	lsls	r2, r1, #1
 8081e32:	d211      	bcs.n	8081e58 <__aeabi_d2uiz+0x28>
 8081e34:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8081e38:	d211      	bcs.n	8081e5e <__aeabi_d2uiz+0x2e>
 8081e3a:	d50d      	bpl.n	8081e58 <__aeabi_d2uiz+0x28>
 8081e3c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8081e40:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8081e44:	d40e      	bmi.n	8081e64 <__aeabi_d2uiz+0x34>
 8081e46:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8081e4a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8081e4e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8081e52:	fa23 f002 	lsr.w	r0, r3, r2
 8081e56:	4770      	bx	lr
 8081e58:	f04f 0000 	mov.w	r0, #0
 8081e5c:	4770      	bx	lr
 8081e5e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8081e62:	d102      	bne.n	8081e6a <__aeabi_d2uiz+0x3a>
 8081e64:	f04f 30ff 	mov.w	r0, #4294967295
 8081e68:	4770      	bx	lr
 8081e6a:	f04f 0000 	mov.w	r0, #0
 8081e6e:	4770      	bx	lr

08081e70 <__aeabi_d2f>:
 8081e70:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8081e74:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8081e78:	bf24      	itt	cs
 8081e7a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8081e7e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8081e82:	d90d      	bls.n	8081ea0 <__aeabi_d2f+0x30>
 8081e84:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8081e88:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8081e8c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8081e90:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8081e94:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8081e98:	bf08      	it	eq
 8081e9a:	f020 0001 	biceq.w	r0, r0, #1
 8081e9e:	4770      	bx	lr
 8081ea0:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8081ea4:	d121      	bne.n	8081eea <__aeabi_d2f+0x7a>
 8081ea6:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8081eaa:	bfbc      	itt	lt
 8081eac:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8081eb0:	4770      	bxlt	lr
 8081eb2:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8081eb6:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8081eba:	f1c2 0218 	rsb	r2, r2, #24
 8081ebe:	f1c2 0c20 	rsb	ip, r2, #32
 8081ec2:	fa10 f30c 	lsls.w	r3, r0, ip
 8081ec6:	fa20 f002 	lsr.w	r0, r0, r2
 8081eca:	bf18      	it	ne
 8081ecc:	f040 0001 	orrne.w	r0, r0, #1
 8081ed0:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8081ed4:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8081ed8:	fa03 fc0c 	lsl.w	ip, r3, ip
 8081edc:	ea40 000c 	orr.w	r0, r0, ip
 8081ee0:	fa23 f302 	lsr.w	r3, r3, r2
 8081ee4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8081ee8:	e7cc      	b.n	8081e84 <__aeabi_d2f+0x14>
 8081eea:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8081eee:	d107      	bne.n	8081f00 <__aeabi_d2f+0x90>
 8081ef0:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8081ef4:	bf1e      	ittt	ne
 8081ef6:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8081efa:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8081efe:	4770      	bxne	lr
 8081f00:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8081f04:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8081f08:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8081f0c:	4770      	bx	lr
 8081f0e:	bf00      	nop

08081f10 <__aeabi_frsub>:
 8081f10:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8081f14:	e002      	b.n	8081f1c <__addsf3>
 8081f16:	bf00      	nop

08081f18 <__aeabi_fsub>:
 8081f18:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08081f1c <__addsf3>:
 8081f1c:	0042      	lsls	r2, r0, #1
 8081f1e:	bf1f      	itttt	ne
 8081f20:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8081f24:	ea92 0f03 	teqne	r2, r3
 8081f28:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8081f2c:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8081f30:	d06a      	beq.n	8082008 <__addsf3+0xec>
 8081f32:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8081f36:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8081f3a:	bfc1      	itttt	gt
 8081f3c:	18d2      	addgt	r2, r2, r3
 8081f3e:	4041      	eorgt	r1, r0
 8081f40:	4048      	eorgt	r0, r1
 8081f42:	4041      	eorgt	r1, r0
 8081f44:	bfb8      	it	lt
 8081f46:	425b      	neglt	r3, r3
 8081f48:	2b19      	cmp	r3, #25
 8081f4a:	bf88      	it	hi
 8081f4c:	4770      	bxhi	lr
 8081f4e:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8081f52:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8081f56:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8081f5a:	bf18      	it	ne
 8081f5c:	4240      	negne	r0, r0
 8081f5e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8081f62:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8081f66:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8081f6a:	bf18      	it	ne
 8081f6c:	4249      	negne	r1, r1
 8081f6e:	ea92 0f03 	teq	r2, r3
 8081f72:	d03f      	beq.n	8081ff4 <__addsf3+0xd8>
 8081f74:	f1a2 0201 	sub.w	r2, r2, #1
 8081f78:	fa41 fc03 	asr.w	ip, r1, r3
 8081f7c:	eb10 000c 	adds.w	r0, r0, ip
 8081f80:	f1c3 0320 	rsb	r3, r3, #32
 8081f84:	fa01 f103 	lsl.w	r1, r1, r3
 8081f88:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8081f8c:	d502      	bpl.n	8081f94 <__addsf3+0x78>
 8081f8e:	4249      	negs	r1, r1
 8081f90:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8081f94:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8081f98:	d313      	bcc.n	8081fc2 <__addsf3+0xa6>
 8081f9a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8081f9e:	d306      	bcc.n	8081fae <__addsf3+0x92>
 8081fa0:	0840      	lsrs	r0, r0, #1
 8081fa2:	ea4f 0131 	mov.w	r1, r1, rrx
 8081fa6:	f102 0201 	add.w	r2, r2, #1
 8081faa:	2afe      	cmp	r2, #254	; 0xfe
 8081fac:	d251      	bcs.n	8082052 <__addsf3+0x136>
 8081fae:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8081fb2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8081fb6:	bf08      	it	eq
 8081fb8:	f020 0001 	biceq.w	r0, r0, #1
 8081fbc:	ea40 0003 	orr.w	r0, r0, r3
 8081fc0:	4770      	bx	lr
 8081fc2:	0049      	lsls	r1, r1, #1
 8081fc4:	eb40 0000 	adc.w	r0, r0, r0
 8081fc8:	3a01      	subs	r2, #1
 8081fca:	bf28      	it	cs
 8081fcc:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8081fd0:	d2ed      	bcs.n	8081fae <__addsf3+0x92>
 8081fd2:	fab0 fc80 	clz	ip, r0
 8081fd6:	f1ac 0c08 	sub.w	ip, ip, #8
 8081fda:	ebb2 020c 	subs.w	r2, r2, ip
 8081fde:	fa00 f00c 	lsl.w	r0, r0, ip
 8081fe2:	bfaa      	itet	ge
 8081fe4:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8081fe8:	4252      	neglt	r2, r2
 8081fea:	4318      	orrge	r0, r3
 8081fec:	bfbc      	itt	lt
 8081fee:	40d0      	lsrlt	r0, r2
 8081ff0:	4318      	orrlt	r0, r3
 8081ff2:	4770      	bx	lr
 8081ff4:	f092 0f00 	teq	r2, #0
 8081ff8:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8081ffc:	bf06      	itte	eq
 8081ffe:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8082002:	3201      	addeq	r2, #1
 8082004:	3b01      	subne	r3, #1
 8082006:	e7b5      	b.n	8081f74 <__addsf3+0x58>
 8082008:	ea4f 0341 	mov.w	r3, r1, lsl #1
 808200c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8082010:	bf18      	it	ne
 8082012:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8082016:	d021      	beq.n	808205c <__addsf3+0x140>
 8082018:	ea92 0f03 	teq	r2, r3
 808201c:	d004      	beq.n	8082028 <__addsf3+0x10c>
 808201e:	f092 0f00 	teq	r2, #0
 8082022:	bf08      	it	eq
 8082024:	4608      	moveq	r0, r1
 8082026:	4770      	bx	lr
 8082028:	ea90 0f01 	teq	r0, r1
 808202c:	bf1c      	itt	ne
 808202e:	2000      	movne	r0, #0
 8082030:	4770      	bxne	lr
 8082032:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8082036:	d104      	bne.n	8082042 <__addsf3+0x126>
 8082038:	0040      	lsls	r0, r0, #1
 808203a:	bf28      	it	cs
 808203c:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8082040:	4770      	bx	lr
 8082042:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8082046:	bf3c      	itt	cc
 8082048:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 808204c:	4770      	bxcc	lr
 808204e:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8082052:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8082056:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 808205a:	4770      	bx	lr
 808205c:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8082060:	bf16      	itet	ne
 8082062:	4608      	movne	r0, r1
 8082064:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8082068:	4601      	movne	r1, r0
 808206a:	0242      	lsls	r2, r0, #9
 808206c:	bf06      	itte	eq
 808206e:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8082072:	ea90 0f01 	teqeq	r0, r1
 8082076:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 808207a:	4770      	bx	lr

0808207c <__aeabi_ui2f>:
 808207c:	f04f 0300 	mov.w	r3, #0
 8082080:	e004      	b.n	808208c <__aeabi_i2f+0x8>
 8082082:	bf00      	nop

08082084 <__aeabi_i2f>:
 8082084:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8082088:	bf48      	it	mi
 808208a:	4240      	negmi	r0, r0
 808208c:	ea5f 0c00 	movs.w	ip, r0
 8082090:	bf08      	it	eq
 8082092:	4770      	bxeq	lr
 8082094:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8082098:	4601      	mov	r1, r0
 808209a:	f04f 0000 	mov.w	r0, #0
 808209e:	e01c      	b.n	80820da <__aeabi_l2f+0x2a>

080820a0 <__aeabi_ul2f>:
 80820a0:	ea50 0201 	orrs.w	r2, r0, r1
 80820a4:	bf08      	it	eq
 80820a6:	4770      	bxeq	lr
 80820a8:	f04f 0300 	mov.w	r3, #0
 80820ac:	e00a      	b.n	80820c4 <__aeabi_l2f+0x14>
 80820ae:	bf00      	nop

080820b0 <__aeabi_l2f>:
 80820b0:	ea50 0201 	orrs.w	r2, r0, r1
 80820b4:	bf08      	it	eq
 80820b6:	4770      	bxeq	lr
 80820b8:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 80820bc:	d502      	bpl.n	80820c4 <__aeabi_l2f+0x14>
 80820be:	4240      	negs	r0, r0
 80820c0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80820c4:	ea5f 0c01 	movs.w	ip, r1
 80820c8:	bf02      	ittt	eq
 80820ca:	4684      	moveq	ip, r0
 80820cc:	4601      	moveq	r1, r0
 80820ce:	2000      	moveq	r0, #0
 80820d0:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 80820d4:	bf08      	it	eq
 80820d6:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 80820da:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 80820de:	fabc f28c 	clz	r2, ip
 80820e2:	3a08      	subs	r2, #8
 80820e4:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 80820e8:	db10      	blt.n	808210c <__aeabi_l2f+0x5c>
 80820ea:	fa01 fc02 	lsl.w	ip, r1, r2
 80820ee:	4463      	add	r3, ip
 80820f0:	fa00 fc02 	lsl.w	ip, r0, r2
 80820f4:	f1c2 0220 	rsb	r2, r2, #32
 80820f8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80820fc:	fa20 f202 	lsr.w	r2, r0, r2
 8082100:	eb43 0002 	adc.w	r0, r3, r2
 8082104:	bf08      	it	eq
 8082106:	f020 0001 	biceq.w	r0, r0, #1
 808210a:	4770      	bx	lr
 808210c:	f102 0220 	add.w	r2, r2, #32
 8082110:	fa01 fc02 	lsl.w	ip, r1, r2
 8082114:	f1c2 0220 	rsb	r2, r2, #32
 8082118:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 808211c:	fa21 f202 	lsr.w	r2, r1, r2
 8082120:	eb43 0002 	adc.w	r0, r3, r2
 8082124:	bf08      	it	eq
 8082126:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 808212a:	4770      	bx	lr

0808212c <__aeabi_uldivmod>:
 808212c:	b953      	cbnz	r3, 8082144 <__aeabi_uldivmod+0x18>
 808212e:	b94a      	cbnz	r2, 8082144 <__aeabi_uldivmod+0x18>
 8082130:	2900      	cmp	r1, #0
 8082132:	bf08      	it	eq
 8082134:	2800      	cmpeq	r0, #0
 8082136:	bf1c      	itt	ne
 8082138:	f04f 31ff 	movne.w	r1, #4294967295
 808213c:	f04f 30ff 	movne.w	r0, #4294967295
 8082140:	f000 b98c 	b.w	808245c <__aeabi_idiv0>
 8082144:	f1ad 0c08 	sub.w	ip, sp, #8
 8082148:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 808214c:	f000 f824 	bl	8082198 <__udivmoddi4>
 8082150:	f8dd e004 	ldr.w	lr, [sp, #4]
 8082154:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8082158:	b004      	add	sp, #16
 808215a:	4770      	bx	lr

0808215c <__aeabi_d2ulz>:
 808215c:	b5d0      	push	{r4, r6, r7, lr}
 808215e:	2200      	movs	r2, #0
 8082160:	4b0b      	ldr	r3, [pc, #44]	; (8082190 <__aeabi_d2ulz+0x34>)
 8082162:	4606      	mov	r6, r0
 8082164:	460f      	mov	r7, r1
 8082166:	f7ff fbc9 	bl	80818fc <__aeabi_dmul>
 808216a:	f7ff fe61 	bl	8081e30 <__aeabi_d2uiz>
 808216e:	4604      	mov	r4, r0
 8082170:	f7ff fb4a 	bl	8081808 <__aeabi_ui2d>
 8082174:	2200      	movs	r2, #0
 8082176:	4b07      	ldr	r3, [pc, #28]	; (8082194 <__aeabi_d2ulz+0x38>)
 8082178:	f7ff fbc0 	bl	80818fc <__aeabi_dmul>
 808217c:	4602      	mov	r2, r0
 808217e:	460b      	mov	r3, r1
 8082180:	4630      	mov	r0, r6
 8082182:	4639      	mov	r1, r7
 8082184:	f7ff fa02 	bl	808158c <__aeabi_dsub>
 8082188:	f7ff fe52 	bl	8081e30 <__aeabi_d2uiz>
 808218c:	4621      	mov	r1, r4
 808218e:	bdd0      	pop	{r4, r6, r7, pc}
 8082190:	3df00000 	.word	0x3df00000
 8082194:	41f00000 	.word	0x41f00000

08082198 <__udivmoddi4>:
 8082198:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 808219c:	9e08      	ldr	r6, [sp, #32]
 808219e:	460d      	mov	r5, r1
 80821a0:	4604      	mov	r4, r0
 80821a2:	468e      	mov	lr, r1
 80821a4:	2b00      	cmp	r3, #0
 80821a6:	f040 8083 	bne.w	80822b0 <__udivmoddi4+0x118>
 80821aa:	428a      	cmp	r2, r1
 80821ac:	4617      	mov	r7, r2
 80821ae:	d947      	bls.n	8082240 <__udivmoddi4+0xa8>
 80821b0:	fab2 f382 	clz	r3, r2
 80821b4:	b14b      	cbz	r3, 80821ca <__udivmoddi4+0x32>
 80821b6:	f1c3 0120 	rsb	r1, r3, #32
 80821ba:	fa05 fe03 	lsl.w	lr, r5, r3
 80821be:	fa20 f101 	lsr.w	r1, r0, r1
 80821c2:	409f      	lsls	r7, r3
 80821c4:	ea41 0e0e 	orr.w	lr, r1, lr
 80821c8:	409c      	lsls	r4, r3
 80821ca:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80821ce:	fbbe fcf8 	udiv	ip, lr, r8
 80821d2:	fa1f f987 	uxth.w	r9, r7
 80821d6:	fb08 e21c 	mls	r2, r8, ip, lr
 80821da:	fb0c f009 	mul.w	r0, ip, r9
 80821de:	0c21      	lsrs	r1, r4, #16
 80821e0:	ea41 4202 	orr.w	r2, r1, r2, lsl #16
 80821e4:	4290      	cmp	r0, r2
 80821e6:	d90a      	bls.n	80821fe <__udivmoddi4+0x66>
 80821e8:	18ba      	adds	r2, r7, r2
 80821ea:	f10c 31ff 	add.w	r1, ip, #4294967295
 80821ee:	f080 8118 	bcs.w	8082422 <__udivmoddi4+0x28a>
 80821f2:	4290      	cmp	r0, r2
 80821f4:	f240 8115 	bls.w	8082422 <__udivmoddi4+0x28a>
 80821f8:	f1ac 0c02 	sub.w	ip, ip, #2
 80821fc:	443a      	add	r2, r7
 80821fe:	1a12      	subs	r2, r2, r0
 8082200:	fbb2 f0f8 	udiv	r0, r2, r8
 8082204:	fb08 2210 	mls	r2, r8, r0, r2
 8082208:	fb00 f109 	mul.w	r1, r0, r9
 808220c:	b2a4      	uxth	r4, r4
 808220e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8082212:	42a1      	cmp	r1, r4
 8082214:	d909      	bls.n	808222a <__udivmoddi4+0x92>
 8082216:	193c      	adds	r4, r7, r4
 8082218:	f100 32ff 	add.w	r2, r0, #4294967295
 808221c:	f080 8103 	bcs.w	8082426 <__udivmoddi4+0x28e>
 8082220:	42a1      	cmp	r1, r4
 8082222:	f240 8100 	bls.w	8082426 <__udivmoddi4+0x28e>
 8082226:	3802      	subs	r0, #2
 8082228:	443c      	add	r4, r7
 808222a:	1a64      	subs	r4, r4, r1
 808222c:	2100      	movs	r1, #0
 808222e:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8082232:	b11e      	cbz	r6, 808223c <__udivmoddi4+0xa4>
 8082234:	2200      	movs	r2, #0
 8082236:	40dc      	lsrs	r4, r3
 8082238:	e9c6 4200 	strd	r4, r2, [r6]
 808223c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8082240:	b902      	cbnz	r2, 8082244 <__udivmoddi4+0xac>
 8082242:	deff      	udf	#255	; 0xff
 8082244:	fab2 f382 	clz	r3, r2
 8082248:	2b00      	cmp	r3, #0
 808224a:	d14f      	bne.n	80822ec <__udivmoddi4+0x154>
 808224c:	1a8d      	subs	r5, r1, r2
 808224e:	2101      	movs	r1, #1
 8082250:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8082254:	fa1f f882 	uxth.w	r8, r2
 8082258:	fbb5 fcfe 	udiv	ip, r5, lr
 808225c:	fb0e 551c 	mls	r5, lr, ip, r5
 8082260:	fb08 f00c 	mul.w	r0, r8, ip
 8082264:	0c22      	lsrs	r2, r4, #16
 8082266:	ea42 4505 	orr.w	r5, r2, r5, lsl #16
 808226a:	42a8      	cmp	r0, r5
 808226c:	d907      	bls.n	808227e <__udivmoddi4+0xe6>
 808226e:	197d      	adds	r5, r7, r5
 8082270:	f10c 32ff 	add.w	r2, ip, #4294967295
 8082274:	d202      	bcs.n	808227c <__udivmoddi4+0xe4>
 8082276:	42a8      	cmp	r0, r5
 8082278:	f200 80e9 	bhi.w	808244e <__udivmoddi4+0x2b6>
 808227c:	4694      	mov	ip, r2
 808227e:	1a2d      	subs	r5, r5, r0
 8082280:	fbb5 f0fe 	udiv	r0, r5, lr
 8082284:	fb0e 5510 	mls	r5, lr, r0, r5
 8082288:	fb08 f800 	mul.w	r8, r8, r0
 808228c:	b2a4      	uxth	r4, r4
 808228e:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8082292:	45a0      	cmp	r8, r4
 8082294:	d907      	bls.n	80822a6 <__udivmoddi4+0x10e>
 8082296:	193c      	adds	r4, r7, r4
 8082298:	f100 32ff 	add.w	r2, r0, #4294967295
 808229c:	d202      	bcs.n	80822a4 <__udivmoddi4+0x10c>
 808229e:	45a0      	cmp	r8, r4
 80822a0:	f200 80d9 	bhi.w	8082456 <__udivmoddi4+0x2be>
 80822a4:	4610      	mov	r0, r2
 80822a6:	eba4 0408 	sub.w	r4, r4, r8
 80822aa:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80822ae:	e7c0      	b.n	8082232 <__udivmoddi4+0x9a>
 80822b0:	428b      	cmp	r3, r1
 80822b2:	d908      	bls.n	80822c6 <__udivmoddi4+0x12e>
 80822b4:	2e00      	cmp	r6, #0
 80822b6:	f000 80b1 	beq.w	808241c <__udivmoddi4+0x284>
 80822ba:	2100      	movs	r1, #0
 80822bc:	e9c6 0500 	strd	r0, r5, [r6]
 80822c0:	4608      	mov	r0, r1
 80822c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80822c6:	fab3 f183 	clz	r1, r3
 80822ca:	2900      	cmp	r1, #0
 80822cc:	d14b      	bne.n	8082366 <__udivmoddi4+0x1ce>
 80822ce:	42ab      	cmp	r3, r5
 80822d0:	d302      	bcc.n	80822d8 <__udivmoddi4+0x140>
 80822d2:	4282      	cmp	r2, r0
 80822d4:	f200 80b9 	bhi.w	808244a <__udivmoddi4+0x2b2>
 80822d8:	1a84      	subs	r4, r0, r2
 80822da:	eb65 0303 	sbc.w	r3, r5, r3
 80822de:	2001      	movs	r0, #1
 80822e0:	469e      	mov	lr, r3
 80822e2:	2e00      	cmp	r6, #0
 80822e4:	d0aa      	beq.n	808223c <__udivmoddi4+0xa4>
 80822e6:	e9c6 4e00 	strd	r4, lr, [r6]
 80822ea:	e7a7      	b.n	808223c <__udivmoddi4+0xa4>
 80822ec:	409f      	lsls	r7, r3
 80822ee:	f1c3 0220 	rsb	r2, r3, #32
 80822f2:	40d1      	lsrs	r1, r2
 80822f4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80822f8:	fbb1 f0fe 	udiv	r0, r1, lr
 80822fc:	fa1f f887 	uxth.w	r8, r7
 8082300:	fb0e 1110 	mls	r1, lr, r0, r1
 8082304:	fa24 f202 	lsr.w	r2, r4, r2
 8082308:	409d      	lsls	r5, r3
 808230a:	fb00 fc08 	mul.w	ip, r0, r8
 808230e:	432a      	orrs	r2, r5
 8082310:	0c15      	lsrs	r5, r2, #16
 8082312:	ea45 4501 	orr.w	r5, r5, r1, lsl #16
 8082316:	45ac      	cmp	ip, r5
 8082318:	fa04 f403 	lsl.w	r4, r4, r3
 808231c:	d909      	bls.n	8082332 <__udivmoddi4+0x19a>
 808231e:	197d      	adds	r5, r7, r5
 8082320:	f100 31ff 	add.w	r1, r0, #4294967295
 8082324:	f080 808f 	bcs.w	8082446 <__udivmoddi4+0x2ae>
 8082328:	45ac      	cmp	ip, r5
 808232a:	f240 808c 	bls.w	8082446 <__udivmoddi4+0x2ae>
 808232e:	3802      	subs	r0, #2
 8082330:	443d      	add	r5, r7
 8082332:	eba5 050c 	sub.w	r5, r5, ip
 8082336:	fbb5 f1fe 	udiv	r1, r5, lr
 808233a:	fb0e 5c11 	mls	ip, lr, r1, r5
 808233e:	fb01 f908 	mul.w	r9, r1, r8
 8082342:	b295      	uxth	r5, r2
 8082344:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 8082348:	45a9      	cmp	r9, r5
 808234a:	d907      	bls.n	808235c <__udivmoddi4+0x1c4>
 808234c:	197d      	adds	r5, r7, r5
 808234e:	f101 32ff 	add.w	r2, r1, #4294967295
 8082352:	d274      	bcs.n	808243e <__udivmoddi4+0x2a6>
 8082354:	45a9      	cmp	r9, r5
 8082356:	d972      	bls.n	808243e <__udivmoddi4+0x2a6>
 8082358:	3902      	subs	r1, #2
 808235a:	443d      	add	r5, r7
 808235c:	eba5 0509 	sub.w	r5, r5, r9
 8082360:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8082364:	e778      	b.n	8082258 <__udivmoddi4+0xc0>
 8082366:	f1c1 0720 	rsb	r7, r1, #32
 808236a:	408b      	lsls	r3, r1
 808236c:	fa22 fc07 	lsr.w	ip, r2, r7
 8082370:	ea4c 0c03 	orr.w	ip, ip, r3
 8082374:	fa25 f407 	lsr.w	r4, r5, r7
 8082378:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 808237c:	fbb4 f9fe 	udiv	r9, r4, lr
 8082380:	fa1f f88c 	uxth.w	r8, ip
 8082384:	fb0e 4419 	mls	r4, lr, r9, r4
 8082388:	fa20 f307 	lsr.w	r3, r0, r7
 808238c:	fb09 fa08 	mul.w	sl, r9, r8
 8082390:	408d      	lsls	r5, r1
 8082392:	431d      	orrs	r5, r3
 8082394:	0c2b      	lsrs	r3, r5, #16
 8082396:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 808239a:	45a2      	cmp	sl, r4
 808239c:	fa02 f201 	lsl.w	r2, r2, r1
 80823a0:	fa00 f301 	lsl.w	r3, r0, r1
 80823a4:	d909      	bls.n	80823ba <__udivmoddi4+0x222>
 80823a6:	eb1c 0404 	adds.w	r4, ip, r4
 80823aa:	f109 30ff 	add.w	r0, r9, #4294967295
 80823ae:	d248      	bcs.n	8082442 <__udivmoddi4+0x2aa>
 80823b0:	45a2      	cmp	sl, r4
 80823b2:	d946      	bls.n	8082442 <__udivmoddi4+0x2aa>
 80823b4:	f1a9 0902 	sub.w	r9, r9, #2
 80823b8:	4464      	add	r4, ip
 80823ba:	eba4 040a 	sub.w	r4, r4, sl
 80823be:	fbb4 f0fe 	udiv	r0, r4, lr
 80823c2:	fb0e 4410 	mls	r4, lr, r0, r4
 80823c6:	fb00 fa08 	mul.w	sl, r0, r8
 80823ca:	b2ad      	uxth	r5, r5
 80823cc:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80823d0:	45a2      	cmp	sl, r4
 80823d2:	d908      	bls.n	80823e6 <__udivmoddi4+0x24e>
 80823d4:	eb1c 0404 	adds.w	r4, ip, r4
 80823d8:	f100 35ff 	add.w	r5, r0, #4294967295
 80823dc:	d22d      	bcs.n	808243a <__udivmoddi4+0x2a2>
 80823de:	45a2      	cmp	sl, r4
 80823e0:	d92b      	bls.n	808243a <__udivmoddi4+0x2a2>
 80823e2:	3802      	subs	r0, #2
 80823e4:	4464      	add	r4, ip
 80823e6:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80823ea:	fba0 8902 	umull	r8, r9, r0, r2
 80823ee:	eba4 040a 	sub.w	r4, r4, sl
 80823f2:	454c      	cmp	r4, r9
 80823f4:	46c6      	mov	lr, r8
 80823f6:	464d      	mov	r5, r9
 80823f8:	d319      	bcc.n	808242e <__udivmoddi4+0x296>
 80823fa:	d016      	beq.n	808242a <__udivmoddi4+0x292>
 80823fc:	b15e      	cbz	r6, 8082416 <__udivmoddi4+0x27e>
 80823fe:	ebb3 020e 	subs.w	r2, r3, lr
 8082402:	eb64 0405 	sbc.w	r4, r4, r5
 8082406:	fa04 f707 	lsl.w	r7, r4, r7
 808240a:	fa22 f301 	lsr.w	r3, r2, r1
 808240e:	431f      	orrs	r7, r3
 8082410:	40cc      	lsrs	r4, r1
 8082412:	e9c6 7400 	strd	r7, r4, [r6]
 8082416:	2100      	movs	r1, #0
 8082418:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 808241c:	4631      	mov	r1, r6
 808241e:	4630      	mov	r0, r6
 8082420:	e70c      	b.n	808223c <__udivmoddi4+0xa4>
 8082422:	468c      	mov	ip, r1
 8082424:	e6eb      	b.n	80821fe <__udivmoddi4+0x66>
 8082426:	4610      	mov	r0, r2
 8082428:	e6ff      	b.n	808222a <__udivmoddi4+0x92>
 808242a:	4543      	cmp	r3, r8
 808242c:	d2e6      	bcs.n	80823fc <__udivmoddi4+0x264>
 808242e:	ebb8 0e02 	subs.w	lr, r8, r2
 8082432:	eb69 050c 	sbc.w	r5, r9, ip
 8082436:	3801      	subs	r0, #1
 8082438:	e7e0      	b.n	80823fc <__udivmoddi4+0x264>
 808243a:	4628      	mov	r0, r5
 808243c:	e7d3      	b.n	80823e6 <__udivmoddi4+0x24e>
 808243e:	4611      	mov	r1, r2
 8082440:	e78c      	b.n	808235c <__udivmoddi4+0x1c4>
 8082442:	4681      	mov	r9, r0
 8082444:	e7b9      	b.n	80823ba <__udivmoddi4+0x222>
 8082446:	4608      	mov	r0, r1
 8082448:	e773      	b.n	8082332 <__udivmoddi4+0x19a>
 808244a:	4608      	mov	r0, r1
 808244c:	e749      	b.n	80822e2 <__udivmoddi4+0x14a>
 808244e:	f1ac 0c02 	sub.w	ip, ip, #2
 8082452:	443d      	add	r5, r7
 8082454:	e713      	b.n	808227e <__udivmoddi4+0xe6>
 8082456:	3802      	subs	r0, #2
 8082458:	443c      	add	r4, r7
 808245a:	e724      	b.n	80822a6 <__udivmoddi4+0x10e>

0808245c <__aeabi_idiv0>:
 808245c:	4770      	bx	lr
 808245e:	bf00      	nop

08082460 <__cxa_atexit>:
 8082460:	b510      	push	{r4, lr}
 8082462:	4604      	mov	r4, r0
 8082464:	4804      	ldr	r0, [pc, #16]	; (8082478 <__cxa_atexit+0x18>)
 8082466:	4613      	mov	r3, r2
 8082468:	b120      	cbz	r0, 8082474 <__cxa_atexit+0x14>
 808246a:	460a      	mov	r2, r1
 808246c:	2002      	movs	r0, #2
 808246e:	4621      	mov	r1, r4
 8082470:	f3af 8000 	nop.w
 8082474:	bd10      	pop	{r4, pc}
 8082476:	bf00      	nop
 8082478:	00000000 	.word	0x00000000

0808247c <memcpy>:
 808247c:	440a      	add	r2, r1
 808247e:	4291      	cmp	r1, r2
 8082480:	f100 33ff 	add.w	r3, r0, #4294967295
 8082484:	d100      	bne.n	8082488 <memcpy+0xc>
 8082486:	4770      	bx	lr
 8082488:	b510      	push	{r4, lr}
 808248a:	f811 4b01 	ldrb.w	r4, [r1], #1
 808248e:	4291      	cmp	r1, r2
 8082490:	f803 4f01 	strb.w	r4, [r3, #1]!
 8082494:	d1f9      	bne.n	808248a <memcpy+0xe>
 8082496:	bd10      	pop	{r4, pc}

08082498 <memset>:
 8082498:	4603      	mov	r3, r0
 808249a:	4402      	add	r2, r0
 808249c:	4293      	cmp	r3, r2
 808249e:	d100      	bne.n	80824a2 <memset+0xa>
 80824a0:	4770      	bx	lr
 80824a2:	f803 1b01 	strb.w	r1, [r3], #1
 80824a6:	e7f9      	b.n	808249c <memset+0x4>

080824a8 <srand>:
 80824a8:	b538      	push	{r3, r4, r5, lr}
 80824aa:	4b0d      	ldr	r3, [pc, #52]	; (80824e0 <srand+0x38>)
 80824ac:	4604      	mov	r4, r0
 80824ae:	681d      	ldr	r5, [r3, #0]
 80824b0:	6bab      	ldr	r3, [r5, #56]	; 0x38
 80824b2:	b97b      	cbnz	r3, 80824d4 <srand+0x2c>
 80824b4:	2018      	movs	r0, #24
 80824b6:	f7fe f9cf 	bl	8080858 <malloc>
 80824ba:	4a0a      	ldr	r2, [pc, #40]	; (80824e4 <srand+0x3c>)
 80824bc:	4b0a      	ldr	r3, [pc, #40]	; (80824e8 <srand+0x40>)
 80824be:	63a8      	str	r0, [r5, #56]	; 0x38
 80824c0:	e9c0 2300 	strd	r2, r3, [r0]
 80824c4:	4b09      	ldr	r3, [pc, #36]	; (80824ec <srand+0x44>)
 80824c6:	2201      	movs	r2, #1
 80824c8:	6083      	str	r3, [r0, #8]
 80824ca:	230b      	movs	r3, #11
 80824cc:	8183      	strh	r3, [r0, #12]
 80824ce:	2300      	movs	r3, #0
 80824d0:	e9c0 2304 	strd	r2, r3, [r0, #16]
 80824d4:	2200      	movs	r2, #0
 80824d6:	6bab      	ldr	r3, [r5, #56]	; 0x38
 80824d8:	611c      	str	r4, [r3, #16]
 80824da:	615a      	str	r2, [r3, #20]
 80824dc:	bd38      	pop	{r3, r4, r5, pc}
 80824de:	bf00      	nop
 80824e0:	20000004 	.word	0x20000004
 80824e4:	abcd330e 	.word	0xabcd330e
 80824e8:	e66d1234 	.word	0xe66d1234
 80824ec:	0005deec 	.word	0x0005deec

080824f0 <strcpy>:
 80824f0:	4603      	mov	r3, r0
 80824f2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80824f6:	f803 2b01 	strb.w	r2, [r3], #1
 80824fa:	2a00      	cmp	r2, #0
 80824fc:	d1f9      	bne.n	80824f2 <strcpy+0x2>
 80824fe:	4770      	bx	lr

08082500 <strlen>:
 8082500:	4603      	mov	r3, r0
 8082502:	f813 2b01 	ldrb.w	r2, [r3], #1
 8082506:	2a00      	cmp	r2, #0
 8082508:	d1fb      	bne.n	8082502 <strlen+0x2>
 808250a:	1a18      	subs	r0, r3, r0
 808250c:	3801      	subs	r0, #1
 808250e:	4770      	bx	lr

08082510 <dynalib_user>:
 8082510:	0021 0808 0061 0808 0089 0808 008d 0808     !...a...........
 8082520:	0000 0000 6e55 7865 6570 7463 6465 7320     ....Unexpected s
 8082530:	6e65 6f73 2072 7974 6570 3a00 0020 2820     ensor type.: . (
 8082540:	2900 2000 207c 0a00 6548 6c6c 206f 7553     .). | ..Hello Su
 8082550:	7473 6961 676e 6e69 6565 6972 676e 0a21     staingineering!.
 8082560:	5300 7465 7075 4420 6e6f 2165 000a 6f43     .Setup Done!..Co
 8082570:	6e75 6574 3172 5400 4300 756f 746e 7265     unter1.T.Counter
 8082580:	0032 6f43 6e75 6574 3372 4300 756f 746e     2.Counter3.Count
 8082590:	7265 0034                                   er4.

08082594 <_ZTV10farmSensor>:
	...
 808259c:	0101 0808 00d9 0808                         ........

080825a4 <_ZTV7counter>:
	...
 80825ac:	00b9 0808 00b3 0808 7061 0070 5925 252d     ........app.%Y-%
 80825bc:	2d6d 6425 2554 3a48 4d25 253a 2553 007a     m-%dT%H:%M:%S%z.
 80825cc:	7361 7463 6d69 0065                         asctime.

080825d4 <_ZTV9IPAddress>:
	...
 80825dc:	0e61 0808 0e51 0808 0e53 0808               a...Q...S...

080825e8 <_ZTV9USBSerial>:
	...
 80825f0:	0ef5 0808 0f5b 0808 0f33 0808 0bc9 0808     ....[...3.......
 8082600:	0f25 0808 0ef7 0808 0f07 0808 0f55 0808     %...........U...
 8082610:	0f17 0808 0ef1 0808                         ........

08082618 <_ZTVN5spark13CellularClassE>:
	...
 8082620:	112b 0808 1121 0808 1117 0808 1091 0808     +...!...........
 8082630:	110b 0808 10ff 0808 10f3 0808 10eb 0808     ................
 8082640:	10e1 0808 10d7 0808 109b 0808               ............

0808264c <_ZTV11USARTSerial>:
	...
 8082654:	1165 0808 11cd 0808 11a9 0808 0bc9 0808     e...............
 8082664:	1179 0808 1195 0808 1187 0808 11a3 0808     y...............
 8082674:	1167 0808 116b 0808                         g...k...

0808267c <_ZTV7TwoWire>:
	...
 8082684:	1259 0808 12a3 0808 127b 0808 125b 0808     Y.......{...[...
 8082694:	1283 0808 128b 0808 1293 0808 129b 0808     ................

080826a4 <_ZTVN5spark12NetworkClassE>:
	...
 80826ac:	12d5 0808 12df 0808 12e9 0808 12f3 0808     ................
 80826bc:	12fd 0808 1309 0808 1315 0808 1321 0808     ............!...
 80826cc:	1329 0808 1333 0808 133d 0808               )...3...=...

080826d8 <_ZSt7nothrow>:
	...

080826d9 <link_const_variable_data_end>:
 80826d9:	00          	.byte	0x00
	...

080826dc <link_constructors_location>:
 80826dc:	08080371 	.word	0x08080371
 80826e0:	080808d5 	.word	0x080808d5
 80826e4:	08080c89 	.word	0x08080c89
 80826e8:	08080c99 	.word	0x08080c99
 80826ec:	08080cd1 	.word	0x08080cd1
 80826f0:	08081135 	.word	0x08081135
 80826f4:	08081385 	.word	0x08081385
 80826f8:	080814ad 	.word	0x080814ad

080826fc <link_constructors_end>:
 80826fc:	00000000 	.word	0x00000000
